{
   "openapi": "3.0.1",
   "info": {
      "title": "Tripletex API",
      "description": "## Overview - Partial resource updating is done using the `PUT` method with optional fields instead of the `PATCH` method. - **Actions** or **commands** are represented in our RESTful path with a prefixed `:`. Example: `/v2/hours/123/:approve`. - **Summaries** or **aggregated** results are represented in our RESTful path with a prefixed `>`. Example: `/v2/hours/>thisWeeksBillables`. - **Request ID** is a key found in all responses in the header with the name `x-tlx-request-id`. For validation and error responses it is also in the response body. If additional log information is absolutely necessary, our support division can locate the key value. - **version** This is a revision number found on all persisted resources. If included, it will prevent your PUT/POST from overriding any updates to the resource since your GET. - **Date** follows the **[ISO8601](https://en.wikipedia.org/wiki/ISO_8601)** standard, meaning the format `YYYY-MM-DD`. - **DateTime** follows the **[ISO8601](https://en.wikipedia.org/wiki/ISO_8601)** standard, meaning the format `YYYY-MM-DDThh:mm:ss`. - **Searching** is done by entering values in the optional fields for each API call. The values fall into the following categories: range, in, exact and like. - **Missing fields** or even **no response data** can occur because result objects and fields are filtered on authorization.\n## Authentication - **Tokens:** The Tripletex API uses 3 different tokens\n  - **consumerToken** is a token provided to the consumer by Tripletex after the API 2.0 registration is completed.\n  - **employeeToken** is a token created by an administrator in your Tripletex account via the user settings and the tab \"API access\". Each employee token must be given a set of entitlements. [Read more here.](https://tripletex.no/execute/docViewer?articleId=1505&languageId=0)\n  - **sessionToken** is the token from `/token/session/:create` which requires a consumerToken and an employeeToken created with the same consumer token, but not an authentication header.\n- **Authentication** is done via [Basic access authentication](https://en.wikipedia.org/wiki/Basic_access_authentication)\n  - **username** is used to specify what company to access.\n    - `0` or blank means the company of the employee.\n    - Any other value means accountant clients. Use `/company/>withLoginAccess` to get a list of those.\n  - **password** is the **sessionToken**.\n  - If you need to create the header yourself use `Authorization: Basic <encoded token>` where `encoded token` is the string `<target company id or 0>:<your session token>` Base64 encoded.\n",
      "contact": {
         "name": "tripletex-api2 on GitHub",
         "url": "https://github.com/Tripletex/tripletex-api2"
      },
      "version": "2.70.44"
   },
   "servers": [
      {
         "url": "https://tripletex.no/v2"
      }
   ],
   "tags": [
      {
         "name": "activity"
      },
      {
         "name": "addon"
      },
      {
         "name": "deliveryAddress"
      },
      {
         "name": "address"
      },
      {
         "name": "internalautoPayIncomingFileSimulator"
      },
      {
         "name": "internalscheduling"
      },
      {
         "name": "internalsystemMessage"
      },
      {
         "name": "altinninstance"
      },
      {
         "name": "integrationfactoringaprila"
      },
      {
         "name": "asset"
      },
      {
         "name": "internalauth"
      },
      {
         "name": "auth/internal"
      },
      {
         "name": "balanceSheet"
      },
      {
         "name": "balanceSheet2"
      },
      {
         "name": "bank"
      },
      {
         "name": "bankadvice"
      },
      {
         "name": "bank/advice"
      },
      {
         "name": "bankagreements"
      },
      {
         "name": "bankonboarding"
      },
      {
         "name": "bankreconciliation"
      },
      {
         "name": "bank/reconciliation"
      },
      {
         "name": "bankreconciliationfileIdsForIncomingPayments"
      },
      {
         "name": "bankreconciliationmatch"
      },
      {
         "name": "bank/reconciliation/match"
      },
      {
         "name": "bankreconciliationmatchescounter"
      },
      {
         "name": "bankreconciliationpaymentType"
      },
      {
         "name": "bank/reconciliation/paymentType"
      },
      {
         "name": "bankreconciliationsettings"
      },
      {
         "name": "bank/reconciliation/settings"
      },
      {
         "name": "banksettings"
      },
      {
         "name": "bankstatement"
      },
      {
         "name": "bank/statement"
      },
      {
         "name": "bankstatementbalanceestimation"
      },
      {
         "name": "bankstatementtransaction"
      },
      {
         "name": "bank/statement/transaction"
      },
      {
         "name": "upsaleMetric"
      },
      {
         "name": "bringCredentials"
      },
      {
         "name": "checkout"
      },
      {
         "name": "accountantClientAccess"
      },
      {
         "name": "accountingOffice"
      },
      {
         "name": "accountantClientAccesstemplate"
      },
      {
         "name": "clientTasks"
      },
      {
         "name": "todoList"
      },
      {
         "name": "todoListComment"
      },
      {
         "name": "exceptiontest"
      },
      {
         "name": "apiConsumer"
      },
      {
         "name": "tokenconsumer"
      },
      {
         "name": "token/consumer"
      },
      {
         "name": "tokenemployee"
      },
      {
         "name": "token/employee"
      },
      {
         "name": "tokenlogin"
      },
      {
         "name": "loginconnect"
      },
      {
         "name": "tokensession"
      },
      {
         "name": "token/session"
      },
      {
         "name": "company"
      },
      {
         "name": "companysettingsaltinn"
      },
      {
         "name": "company/altinn"
      },
      {
         "name": "companybrreg"
      },
      {
         "name": "companymodules"
      },
      {
         "name": "companysalesmodules"
      },
      {
         "name": "company/salesmodules"
      },
      {
         "name": "companyRepresentative"
      },
      {
         "name": "contact"
      },
      {
         "name": "country"
      },
      {
         "name": "currency"
      },
      {
         "name": "customer"
      },
      {
         "name": "customercategory"
      },
      {
         "name": "customer/category"
      },
      {
         "name": "dashboard"
      },
      {
         "name": "department"
      },
      {
         "name": "distributionKey"
      },
      {
         "name": "division"
      },
      {
         "name": "document"
      },
      {
         "name": "documentArchive"
      },
      {
         "name": "employee"
      },
      {
         "name": "employeecategory"
      },
      {
         "name": "employee/category"
      },
      {
         "name": "employeeemployment"
      },
      {
         "name": "employee/employment"
      },
      {
         "name": "employeeemploymentdetails"
      },
      {
         "name": "employee/employment/details"
      },
      {
         "name": "employeeemploymentemploymentType"
      },
      {
         "name": "employee/employment/employmentType"
      },
      {
         "name": "employeeemploymentleaveOfAbsence"
      },
      {
         "name": "employee/employment/leaveOfAbsence"
      },
      {
         "name": "employeeemploymentleaveOfAbsenceType"
      },
      {
         "name": "employee/employment/leaveOfAbsenceType"
      },
      {
         "name": "employeeemploymentoccupationCode"
      },
      {
         "name": "employee/employment/occupationCode"
      },
      {
         "name": "employeeemploymentremunerationType"
      },
      {
         "name": "employee/employment/remunerationType"
      },
      {
         "name": "employeeemploymentworkingHoursScheme"
      },
      {
         "name": "employee/employment/workingHoursScheme"
      },
      {
         "name": "employeehourlyCostAndRate"
      },
      {
         "name": "employee/hourlyCostAndRate"
      },
      {
         "name": "employeelogininfo"
      },
      {
         "name": "employee/logininfo"
      },
      {
         "name": "employeenextOfKin"
      },
      {
         "name": "employee/nextOfKin"
      },
      {
         "name": "employeepreferences"
      },
      {
         "name": "employee/preferences"
      },
      {
         "name": "employeestandardTime"
      },
      {
         "name": "employee/standardTime"
      },
      {
         "name": "enhetsregisteret"
      },
      {
         "name": "employeeentitlement"
      },
      {
         "name": "employee/entitlement"
      },
      {
         "name": "event"
      },
      {
         "name": "eventexecute"
      },
      {
         "name": "eventtrigger"
      },
      {
         "name": "eventnotification"
      },
      {
         "name": "eventsubscription"
      },
      {
         "name": "event/subscription"
      },
      {
         "name": "feedback"
      },
      {
         "name": "fundingpartner"
      },
      {
         "name": "fundingpartnerqualify"
      },
      {
         "name": "idporten"
      },
      {
         "name": "idportenloginstatus"
      },
      {
         "name": "integrationautopaymessages"
      },
      {
         "name": "bankpayment"
      },
      {
         "name": "integrationlinkmobilityreport"
      },
      {
         "name": "integrationpg2callback"
      },
      {
         "name": "integrationsendgridparse"
      },
      {
         "name": "integrationsendgridevent"
      },
      {
         "name": "bankztlpaymentinternal"
      },
      {
         "name": "inventory"
      },
      {
         "name": "inventoryinventories"
      },
      {
         "name": "inventory/inventories"
      },
      {
         "name": "inventorylocation"
      },
      {
         "name": "inventory/location"
      },
      {
         "name": "inventorystocktaking"
      },
      {
         "name": "inventory/stocktaking"
      },
      {
         "name": "inventorystocktakingproductline"
      },
      {
         "name": "inventory/stocktaking/productline"
      },
      {
         "name": "invoice"
      },
      {
         "name": "invoiceRemark"
      },
      {
         "name": "integrationmaventastatus"
      },
      {
         "name": "invoicepaymentType"
      },
      {
         "name": "invoice/paymentType"
      },
      {
         "name": "invoicedetails"
      },
      {
         "name": "invoice/details"
      },
      {
         "name": "customerinvoiceSendType"
      },
      {
         "name": "invoicesettings"
      },
      {
         "name": "internalinvoiceOverview"
      },
      {
         "name": "killSwitch"
      },
      {
         "name": "ledger"
      },
      {
         "name": "ledgeraccount"
      },
      {
         "name": "ledger/account"
      },
      {
         "name": "ledgeraccountingPeriod"
      },
      {
         "name": "ledger/accountingPeriod"
      },
      {
         "name": "ledgerannualAccount"
      },
      {
         "name": "ledger/annualAccount"
      },
      {
         "name": "ledgercloseGroup"
      },
      {
         "name": "ledger/closeGroup"
      },
      {
         "name": "ledgerpaymentTypeOut"
      },
      {
         "name": "ledger/paymentTypeOut"
      },
      {
         "name": "ledgerposting"
      },
      {
         "name": "ledger/posting"
      },
      {
         "name": "ledgerpostinghistorical"
      },
      {
         "name": "ledgervatType"
      },
      {
         "name": "ledger/vatType"
      },
      {
         "name": "ledgervoucheropeningBalance"
      },
      {
         "name": "ledger/voucher/openingBalance"
      },
      {
         "name": "ledgervoucher"
      },
      {
         "name": "ledger/voucher"
      },
      {
         "name": "ledgervoucherhistorical"
      },
      {
         "name": "ledger/voucher/historical"
      },
      {
         "name": "ledgervoucherinternal"
      },
      {
         "name": "ledgervoucherType"
      },
      {
         "name": "ledger/voucherType"
      },
      {
         "name": "license"
      },
      {
         "name": "lookup"
      },
      {
         "name": "download-app"
      },
      {
         "name": "mobileapp"
      },
      {
         "name": "municipality"
      },
      {
         "name": "subscription"
      },
      {
         "name": "openid"
      },
      {
         "name": "order"
      },
      {
         "name": "orderoffer"
      },
      {
         "name": "orderorderGroup"
      },
      {
         "name": "order/orderGroup"
      },
      {
         "name": "orderorderline"
      },
      {
         "name": "order/orderline"
      },
      {
         "name": "stockoutgoing"
      },
      {
         "name": "paymentTypeAutomation"
      },
      {
         "name": "bankpaymentWidget"
      },
      {
         "name": "pilotFeature"
      },
      {
         "name": "productexternal"
      },
      {
         "name": "product/external"
      },
      {
         "name": "product"
      },
      {
         "name": "productsupplierProduct"
      },
      {
         "name": "product/supplierProduct"
      },
      {
         "name": "productdiscountGroup"
      },
      {
         "name": "product/discountGroup"
      },
      {
         "name": "productinventoryLocation"
      },
      {
         "name": "product/inventoryLocation"
      },
      {
         "name": "productlogisticsSettings"
      },
      {
         "name": "product/logisticsSettings"
      },
      {
         "name": "productgroup"
      },
      {
         "name": "product/group"
      },
      {
         "name": "productgroupRelation"
      },
      {
         "name": "product/groupRelation"
      },
      {
         "name": "productproductPrice"
      },
      {
         "name": "product/productPrice"
      },
      {
         "name": "productsettings"
      },
      {
         "name": "productImport"
      },
      {
         "name": "productImportFields"
      },
      {
         "name": "productImportimportHeaders"
      },
      {
         "name": "productImportFieldsRelation"
      },
      {
         "name": "productImportpotentialProduct"
      },
      {
         "name": "productunit"
      },
      {
         "name": "product/unit"
      },
      {
         "name": "productunitmaster"
      },
      {
         "name": "product/unit/master"
      },
      {
         "name": "project"
      },
      {
         "name": "project/import"
      },
      {
         "name": "projectaccess"
      },
      {
         "name": "projectcategory"
      },
      {
         "name": "project/category"
      },
      {
         "name": "projectonboarding"
      },
      {
         "name": "projectorderline"
      },
      {
         "name": "project/orderline"
      },
      {
         "name": "projectoverview"
      },
      {
         "name": "projectparticipant"
      },
      {
         "name": "project/participant"
      },
      {
         "name": "project{id}period"
      },
      {
         "name": "project/period"
      },
      {
         "name": "projectprojectActivity"
      },
      {
         "name": "project/projectActivity"
      },
      {
         "name": "projectcontrolForm"
      },
      {
         "name": "project/controlForm"
      },
      {
         "name": "projectcontrolFormType"
      },
      {
         "name": "project/controlFormType"
      },
      {
         "name": "projecthourlyRates"
      },
      {
         "name": "project/hourlyRates"
      },
      {
         "name": "projecthourlyRatesprojectSpecificRates"
      },
      {
         "name": "project/hourlyRates/projectSpecificRates"
      },
      {
         "name": "projectresourcePlanBudget"
      },
      {
         "name": "project/resourceplan"
      },
      {
         "name": "projectsettings"
      },
      {
         "name": "project/settings"
      },
      {
         "name": "projecttask"
      },
      {
         "name": "project/task"
      },
      {
         "name": "projecttemplate"
      },
      {
         "name": "project/template"
      },
      {
         "name": "crmprospect"
      },
      {
         "name": "crm/prospect"
      },
      {
         "name": "pickupPoint"
      },
      {
         "name": "purchaseOrder"
      },
      {
         "name": "purchaseOrderAddress"
      },
      {
         "name": "purchaseOrderinternal"
      },
      {
         "name": "transportType"
      },
      {
         "name": "purchaseOrderdeviation"
      },
      {
         "name": "purchaseOrder/deviation"
      },
      {
         "name": "purchaseOrdergoodsReceipt"
      },
      {
         "name": "purchaseOrder/goodsReceipt"
      },
      {
         "name": "purchaseOrdergoodsReceiptLine"
      },
      {
         "name": "purchaseOrder/goodsReceiptLine"
      },
      {
         "name": "purchaseOrderpurchaseOrderIncomingInvoiceRelation"
      },
      {
         "name": "purchaseOrder/purchaseOrderIncomingInvoiceRelation"
      },
      {
         "name": "purchaseOrderorderline"
      },
      {
         "name": "purchaseOrder/orderline"
      },
      {
         "name": "reminder"
      },
      {
         "name": "report"
      },
      {
         "name": "reportauthorization"
      },
      {
         "name": "reportreeldomain"
      },
      {
         "name": "reportreelfunction"
      },
      {
         "name": "reportresult"
      },
      {
         "name": "reportsystem"
      },
      {
         "name": "resourceMessages"
      },
      {
         "name": "internalresourcePlan2permissions"
      },
      {
         "name": "internalresourcePlan2employee"
      },
      {
         "name": "internalresourcePlan2employeejob"
      },
      {
         "name": "internalresourcePlan2modaljobs"
      },
      {
         "name": "internalresourcePlan2project"
      },
      {
         "name": "internalresourcePlan2projectjob"
      },
      {
         "name": "internalresourcePlan2totalTime"
      },
      {
         "name": "resultbudget"
      },
      {
         "name": "saft"
      },
      {
         "name": "salarytype"
      },
      {
         "name": "salary/type"
      },
      {
         "name": "salarytskinternalmeta"
      },
      {
         "name": "tsksalaryv2createSalaryEmployee"
      },
      {
         "name": "tsksalaryv2employee"
      },
      {
         "name": "tsksalaryv2payment"
      },
      {
         "name": "tsksalaryv2settings"
      },
      {
         "name": "tsksalaryv2specification"
      },
      {
         "name": "tsksalaryv2specificationsupplement"
      },
      {
         "name": "tsksalaryv2previousSalary"
      },
      {
         "name": "tsksalaryv2transaction"
      },
      {
         "name": "tsksalaryv2travelExpense"
      },
      {
         "name": "tsksalaryv2type"
      },
      {
         "name": "tsksalaryv2voucher"
      },
      {
         "name": "salarytskinternaltaxcard"
      },
      {
         "name": "salarytskinternalphonePrefixCountry"
      },
      {
         "name": "salarytskinternalreportingCompany"
      },
      {
         "name": "salarytskinternaltaxcardcontact"
      },
      {
         "name": "salarycompilation"
      },
      {
         "name": "salary/compilation"
      },
      {
         "name": "salarypayslip"
      },
      {
         "name": "salary/payslip"
      },
      {
         "name": "salarysettings"
      },
      {
         "name": "salary/settings"
      },
      {
         "name": "salarysettingsholiday"
      },
      {
         "name": "salary/settings/holiday"
      },
      {
         "name": "salarysettingspensionScheme"
      },
      {
         "name": "salary/settings/pensionScheme"
      },
      {
         "name": "salarysettingsstandardTime"
      },
      {
         "name": "salary/settings/standardTime"
      },
      {
         "name": "salaryspecification"
      },
      {
         "name": "salarytransaction"
      },
      {
         "name": "salary/transaction"
      },
      {
         "name": "signatureCombination"
      },
      {
         "name": "snowplow"
      },
      {
         "name": "sse"
      },
      {
         "name": "storebrandonboarding"
      },
      {
         "name": "storebrandonboardingqualify"
      },
      {
         "name": "supplier"
      },
      {
         "name": "supplierInvoice"
      },
      {
         "name": "voucherApprovalListElement"
      },
      {
         "name": "supplierInvoiceAutomation"
      },
      {
         "name": "supportAccessrequestread"
      },
      {
         "name": "testaccountdata"
      },
      {
         "name": "timesheetallocated"
      },
      {
         "name": "timesheet/allocated"
      },
      {
         "name": "timesheetcompanyHoliday"
      },
      {
         "name": "timesheet/companyHoliday"
      },
      {
         "name": "timesheetentry"
      },
      {
         "name": "timesheet/entry"
      },
      {
         "name": "timesheetmonth"
      },
      {
         "name": "timesheet/month"
      },
      {
         "name": "timesheetsalaryProjectTypeSpecification"
      },
      {
         "name": "timesheet/salaryProjectTypeSpecification"
      },
      {
         "name": "timesheetsalaryTypeSpecification"
      },
      {
         "name": "timesheet/salaryTypeSpecification"
      },
      {
         "name": "timesheetsettings"
      },
      {
         "name": "timesheet/settings"
      },
      {
         "name": "timesheettimeClock"
      },
      {
         "name": "timesheet/timeClock"
      },
      {
         "name": "timesheetweek"
      },
      {
         "name": "timesheet/week"
      },
      {
         "name": "travelExpenseaccommodationAllowance"
      },
      {
         "name": "travelExpense/accommodationAllowance"
      },
      {
         "name": "travelExpensecost"
      },
      {
         "name": "travelExpense/cost"
      },
      {
         "name": "travelExpensecostParticipant"
      },
      {
         "name": "travelExpense/costParticipant"
      },
      {
         "name": "travelExpensedrivingStop"
      },
      {
         "name": "travelExpense/drivingStop"
      },
      {
         "name": "travelExpensemileageAllowance"
      },
      {
         "name": "travelExpense/mileageAllowance"
      },
      {
         "name": "travelExpensepassenger"
      },
      {
         "name": "travelExpense/passenger"
      },
      {
         "name": "travelExpenseperDiemCompensation"
      },
      {
         "name": "travelExpense/perDiemCompensation"
      },
      {
         "name": "travelExpense"
      },
      {
         "name": "travelExpenserate"
      },
      {
         "name": "travelExpense/rate"
      },
      {
         "name": "travelExpenserateCategory"
      },
      {
         "name": "travelExpense/rateCategory"
      },
      {
         "name": "travelExpenserateCategoryGroup"
      },
      {
         "name": "travelExpense/rateCategoryGroup"
      },
      {
         "name": "travelExpensecostCategory"
      },
      {
         "name": "travelExpense/costCategory"
      },
      {
         "name": "travelExpensepaymentType"
      },
      {
         "name": "travelExpense/paymentType"
      },
      {
         "name": "travelExpensesettings"
      },
      {
         "name": "travelExpense/settings"
      },
      {
         "name": "travelExpensezone"
      },
      {
         "name": "tripletexAccount"
      },
      {
         "name": "tripletexAccountPrices"
      },
      {
         "name": "tripletexAccountsalesForceAccountInfo"
      },
      {
         "name": "tripletexAccountsalesForceAccountantConnection"
      },
      {
         "name": "tripletexAccountsalesForceEmployeeRole"
      },
      {
         "name": "tripletexAccountsalesForceTripletexSalesModulePurchase"
      },
      {
         "name": "tripletexAccountsalesForceUser"
      },
      {
         "name": "tripletexAccountsalesForceUserOverview"
      },
      {
         "name": "tripletexDashboard"
      },
      {
         "name": "tripletexDashboardbankingSummary"
      },
      {
         "name": "tripletexDashboardgetStartedSummary"
      },
      {
         "name": "tripletexDashboardincomeAndCostSummary"
      },
      {
         "name": "tripletexDashboardinvoiceSummary"
      },
      {
         "name": "tripletexDashboardreminder"
      },
      {
         "name": "tripletexDashboardsalarySummary"
      },
      {
         "name": "tripletexDashboardtask"
      },
      {
         "name": "tripletexDashboardtrial"
      },
      {
         "name": "tripletexDashboardvoucherSummary"
      },
      {
         "name": "vatReturns"
      },
      {
         "name": "vatReturnsvalidateCreate"
      },
      {
         "name": "vatReturnscomment"
      },
      {
         "name": "vismaconnectonboard"
      },
      {
         "name": "vismaconnectwebhook"
      },
      {
         "name": "comment"
      },
      {
         "name": "voucherInboxsendToArchive"
      },
      {
         "name": "voucherInbox"
      },
      {
         "name": "wootric"
      },
      {
         "name": "voucherMessage"
      },
      {
         "name": "voucherStatus"
      },
      {
         "name": "banner"
      },
      {
         "name": "webcallout"
      },
      {
         "name": "webclient"
      },
      {
         "name": "internalfavorites"
      },
      {
         "name": "favorites/internal"
      },
      {
         "name": "internalpilotFeatureuser"
      },
      {
         "name": "internalmenu"
      },
      {
         "name": "internalnews"
      },
      {
         "name": "optionspage"
      },
      {
         "name": "internalcompany-chooser"
      },
      {
         "name": "internalprofile"
      },
      {
         "name": "internalhelpcenter"
      },
      {
         "name": "internalsearch"
      },
      {
         "name": "internalsegmentation"
      },
      {
         "name": "segmentation/internal"
      },
      {
         "name": "internalsupport"
      },
      {
         "name": "internalzendesk-chat"
      },
      {
         "name": "ztlaccount"
      },
      {
         "name": "ztlconsent"
      },
      {
         "name": "ztlonboardingpage"
      },
      {
         "name": "ztlonboarding"
      },
      {
         "name": "ztlsettings"
      }
   ],
   "paths": {
      "/activity/{id}": {
         "get": {
            "tags": [
               "activity"
            ],
            "summary": "Find activity by ID.",
            "operationId": "Activity_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperActivity"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/activity": {
         "get": {
            "tags": [
               "activity"
            ],
            "summary": "Find activities corresponding with sent data.",
            "operationId": "Activity_search",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "name",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "number",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "description",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "isProjectActivity",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "isGeneral",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "isChargeable",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "isTask",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "isInactive",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseActivity"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "activity"
            ],
            "summary": "Add activity.",
            "operationId": "Activity_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/Activity"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperActivity"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/activity/list": {
         "post": {
            "tags": [
               "activity"
            ],
            "summary": "Add multiple activities.",
            "operationId": "ActivityList_postList",
            "requestBody": {
               "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
               "content": {
                  "*/*": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/Activity"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseActivity"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/activity/>forTimeSheet": {
         "get": {
            "tags": [
               "activity"
            ],
            "summary": "Find applicable time sheet activities for an employee on a specific day.",
            "operationId": "ActivityForTimeSheet_getForTimeSheet",
            "parameters": [
               {
                  "name": "projectId",
                  "in": "query",
                  "description": "Project ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "employeeId",
                  "in": "query",
                  "description": "Employee ID. Defaults to ID of token owner.",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "date",
                  "in": "query",
                  "description": "yyyy-MM-dd. Defaults to today.",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseActivity"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/deliveryAddress/{id}": {
         "get": {
            "tags": [
               "deliveryAddress"
            ],
            "summary": "Get address by ID.",
            "operationId": "DeliveryAddress_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperDeliveryAddress"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "deliveryAddress"
            ],
            "summary": "Update address.",
            "operationId": "DeliveryAddress_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/DeliveryAddress"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperDeliveryAddress"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/deliveryAddress": {
         "get": {
            "tags": [
               "deliveryAddress"
            ],
            "summary": "Find addresses corresponding with sent data.",
            "operationId": "DeliveryAddress_search",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "addressLine1",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "addressLine2",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "postalCode",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "city",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "name",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseDeliveryAddress"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/asset/{id}": {
         "get": {
            "tags": [
               "asset"
            ],
            "summary": "Get asset by ID.",
            "operationId": "Asset_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperAsset"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "asset"
            ],
            "summary": "Update asset.",
            "operationId": "Asset_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/Asset"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperAsset"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "asset"
            ],
            "summary": "Delete asset.",
            "operationId": "Asset_delete",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/asset": {
         "get": {
            "tags": [
               "asset"
            ],
            "summary": "Find assets corresponding with sent data.",
            "operationId": "Asset_search",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "name",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "description",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseAsset"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "asset"
            ],
            "summary": "Create one asset.",
            "operationId": "Asset_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/Asset"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperAsset"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/asset/list": {
         "post": {
            "tags": [
               "asset"
            ],
            "summary": "Create several assets.",
            "operationId": "AssetList_postList",
            "requestBody": {
               "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/Asset"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseAsset"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/asset/canDelete/{id}": {
         "get": {
            "tags": [
               "asset"
            ],
            "summary": "Validate delete asset",
            "operationId": "AssetCanDelete_canDelete",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperBoolean"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/asset/deleteImport": {
         "delete": {
            "tags": [
               "asset"
            ],
            "summary": "[BETA] Delete most recent assets import.",
            "operationId": "AssetDeleteImport_deleteImport",
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/asset/assetsExist": {
         "get": {
            "tags": [
               "asset"
            ],
            "summary": "Get if AssetOverview details is empty.",
            "operationId": "AssetAssetsExist_getAssetsExist",
            "parameters": [
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperBoolean"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/asset/balanceAccountsSum": {
         "get": {
            "tags": [
               "asset"
            ],
            "summary": "Get balanceAccountsSum.",
            "operationId": "AssetBalanceAccountsSum_balanceAccountsSum",
            "parameters": [
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperTlxNumber"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/asset/duplicate/{id}": {
         "post": {
            "tags": [
               "asset"
            ],
            "summary": "Create copy of one asset",
            "operationId": "AssetDuplicate_postDuplicate",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/asset/upload": {
         "post": {
            "tags": [
               "asset"
            ],
            "summary": "[BETA] Upload Excel file with Assets in the standard Tripletex defined format.",
            "operationId": "AssetUpload_upload",
            "parameters": [
               {
                  "name": "isPreview",
                  "in": "query",
                  "description": "Is the import a preview, or a real import.",
                  "required": true,
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "startDate",
                  "in": "query",
                  "description": "Start date for asset registry. Should always be on the first day of the year.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "multipart/form-data": {
                     "schema": {
                        "required": [
                           "file"
                        ],
                        "properties": {
                           "file": {
                              "type": "string",
                              "description": "The Excel file with assets",
                              "format": "binary"
                           }
                        }
                     }
                  }
               },
               "required": true
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseAssetAccountRow"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/internal/auth/config": {
         "get": {
            "tags": [
               "auth/internal"
            ],
            "summary": "Get auth config",
            "operationId": "InternalAuthConfig_getConfig",
            "parameters": [
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperAuthConfigDTO"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/balanceSheet": {
         "get": {
            "tags": [
               "balanceSheet"
            ],
            "summary": "Get balance sheet (saldobalanse).",
            "operationId": "BalanceSheet_search",
            "parameters": [
               {
                  "name": "dateFrom",
                  "in": "query",
                  "description": "Format is yyyy-MM-dd (from and incl.).",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "dateTo",
                  "in": "query",
                  "description": "Format is yyyy-MM-dd (to and excl.).",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "accountNumberFrom",
                  "in": "query",
                  "description": "From and including",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "accountNumberTo",
                  "in": "query",
                  "description": "To and excluding",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "customerId",
                  "in": "query",
                  "description": "Element ID",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "employeeId",
                  "in": "query",
                  "description": "Element ID",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "departmentId",
                  "in": "query",
                  "description": "Element ID",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "projectId",
                  "in": "query",
                  "description": "Element ID",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "includeSubProjects",
                  "in": "query",
                  "description": "Should sub projects of the given project be included",
                  "schema": {
                     "type": "boolean",
                     "default": false
                  }
               },
               {
                  "name": "includeActiveAccountsWithoutMovements",
                  "in": "query",
                  "description": "Should active accounts with no movements be included",
                  "schema": {
                     "type": "boolean",
                     "default": false
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseBalanceSheetAccount"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/bank/{id}": {
         "get": {
            "tags": [
               "bank"
            ],
            "summary": "Get bank.",
            "operationId": "Bank_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperBank"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/bank": {
         "get": {
            "tags": [
               "bank"
            ],
            "summary": "Find bank corresponding with sent data.",
            "operationId": "Bank_search",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "registerNumbers",
                  "in": "query",
                  "description": "Bank register number (four digits)",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "isBankReconciliationSupport",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "isAutoPaySupported",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "isZtlSupported",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "query",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseBank"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/bank/advice/{id}": {
         "put": {
            "tags": [
               "bank/advice"
            ],
            "summary": "Update advice.",
            "operationId": "BankAdvice_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/BankDashboardAdvice"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperBankDashboardAdvice"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/bank/advice": {
         "get": {
            "tags": [
               "bank/advice"
            ],
            "summary": "Find advices for the company context",
            "operationId": "BankAdvice_search",
            "parameters": [
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseBankDashboardAdvice"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/bank/reconciliation/{id}": {
         "get": {
            "tags": [
               "bank/reconciliation"
            ],
            "summary": "Get bank reconciliation.",
            "operationId": "BankReconciliation_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperBankReconciliation"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "bank/reconciliation"
            ],
            "summary": "Update a bank reconciliation.",
            "operationId": "BankReconciliation_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/BankReconciliation"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperBankReconciliation"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "bank/reconciliation"
            ],
            "summary": "Delete bank reconciliation by ID.",
            "operationId": "BankReconciliation_delete",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/bank/reconciliation/>last": {
         "get": {
            "tags": [
               "bank/reconciliation"
            ],
            "summary": "Get the last created reconciliation by account ID.",
            "operationId": "BankReconciliationLast_last",
            "parameters": [
               {
                  "name": "accountId",
                  "in": "query",
                  "description": "Account ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperBankReconciliation"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/bank/reconciliation": {
         "get": {
            "tags": [
               "bank/reconciliation"
            ],
            "summary": "Find bank reconciliation corresponding with sent data.",
            "operationId": "BankReconciliation_search",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "accountingPeriodId",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "accountId",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseBankReconciliation"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "bank/reconciliation"
            ],
            "summary": "Post a bank reconciliation.",
            "operationId": "BankReconciliation_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/BankReconciliation"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperBankReconciliation"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/bank/reconciliation/{id}/:adjustment": {
         "put": {
            "tags": [
               "bank/reconciliation"
            ],
            "summary": "Add an adjustment to reconciliation by ID.",
            "operationId": "BankReconciliationAdjustment_adjustment",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Adjustments",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/BankReconciliationAdjustment"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseBankReconciliationAdjustment"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/bank/reconciliation/>lastClosed": {
         "get": {
            "tags": [
               "bank/reconciliation"
            ],
            "summary": "Get last closed reconciliation by account ID.",
            "operationId": "BankReconciliationLastClosed_lastClosed",
            "parameters": [
               {
                  "name": "accountId",
                  "in": "query",
                  "description": "Account ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "after",
                  "in": "query",
                  "description": "Format is yyyy-MM-dd",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperBankReconciliation"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/bank/reconciliation/closedWithUnmatchedTransactions": {
         "get": {
            "tags": [
               "bank/reconciliation"
            ],
            "summary": "Get the last closed reconciliation with unmached transactions by account ID.",
            "operationId": "BankReconciliationClosedWithUnmatchedTransactions_closedWithUnmatchedTransactions",
            "parameters": [
               {
                  "name": "accountId",
                  "in": "query",
                  "description": "Account ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "start",
                  "in": "query",
                  "description": "Format is yyyy-MM-dd",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperBankReconciliation"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/bank/reconciliation/previousBankingDay": {
         "get": {
            "tags": [
               "bank/reconciliation"
            ],
            "summary": "Get the last banking day",
            "operationId": "BankReconciliationPreviousBankingDay_getPreviousBankingDay",
            "parameters": [
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperDate"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/bank/reconciliation/match/{id}": {
         "get": {
            "tags": [
               "bank/reconciliation/match"
            ],
            "summary": "Get bank reconciliation match by ID.",
            "operationId": "BankReconciliationMatch_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperBankReconciliationMatch"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "bank/reconciliation/match"
            ],
            "summary": "Update a bank reconciliation match by ID.",
            "operationId": "BankReconciliationMatch_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/BankReconciliationMatch"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperBankReconciliationMatch"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "bank/reconciliation/match"
            ],
            "summary": "Delete a bank reconciliation match by ID.",
            "operationId": "BankReconciliationMatch_delete",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/bank/reconciliation/match/count": {
         "get": {
            "tags": [
               "bank/reconciliation/match"
            ],
            "summary": "Get the total number of matches",
            "operationId": "BankReconciliationMatchCount_count",
            "parameters": [
               {
                  "name": "bankReconciliationId",
                  "in": "query",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperInteger"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/bank/reconciliation/match/query": {
         "get": {
            "tags": [
               "bank/reconciliation/match"
            ],
            "summary": "[INTERNAL] Wildcard search.",
            "operationId": "BankReconciliationMatchQuery_query",
            "parameters": [
               {
                  "name": "bankReconciliationId",
                  "in": "query",
                  "description": "The bank reconciliation id",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "approved",
                  "in": "query",
                  "description": "Approved or unapproved matches",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseBankReconciliationMatch"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/bank/reconciliation/match": {
         "get": {
            "tags": [
               "bank/reconciliation/match"
            ],
            "summary": "Find bank reconciliation match corresponding with sent data.",
            "operationId": "BankReconciliationMatch_search",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "bankReconciliationId",
                  "in": "query",
                  "description": "List of bank reconciliation IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "format": "int32",
                     "default": 5000
                  }
               },
               {
                  "name": "approved",
                  "in": "query",
                  "description": "Approved or unapproved matches",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseBankReconciliationMatch"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "bank/reconciliation/match"
            ],
            "summary": "Create a bank reconciliation match.",
            "operationId": "BankReconciliationMatch_post",
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/BankReconciliationMatch"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperBankReconciliationMatch"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/bank/reconciliation/match/:suggest": {
         "put": {
            "tags": [
               "bank/reconciliation/match"
            ],
            "summary": "Suggest matches for a bank reconciliation by ID.",
            "operationId": "BankReconciliationMatchSuggest_suggest",
            "parameters": [
               {
                  "name": "bankReconciliationId",
                  "in": "query",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseBankReconciliationMatch"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/bank/reconciliation/matches/counter": {
         "get": {
            "tags": [
               "bank/reconciliation/match"
            ],
            "summary": "[BETA] Get number of matches since last page access.",
            "operationId": "BankReconciliationMatchesCounter_get",
            "parameters": [
               {
                  "name": "bankReconciliationId",
                  "in": "query",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperBankReconciliationMatchesCounter"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "bank/reconciliation/match"
            ],
            "summary": "[BETA] Reset the number of matches after the page has been accessed.",
            "operationId": "BankReconciliationMatchesCounter_post",
            "parameters": [
               {
                  "name": "bankReconciliationId",
                  "in": "query",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/bank/reconciliation/paymentType/{id}": {
         "get": {
            "tags": [
               "bank/reconciliation/paymentType"
            ],
            "summary": "Get payment type by ID.",
            "operationId": "BankReconciliationPaymentType_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperBankReconciliationPaymentType"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/bank/reconciliation/paymentType": {
         "get": {
            "tags": [
               "bank/reconciliation/paymentType"
            ],
            "summary": "Find payment type corresponding with sent data.",
            "operationId": "BankReconciliationPaymentType_search",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "description",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseBankReconciliationPaymentType"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/bank/reconciliation/settings": {
         "get": {
            "tags": [
               "bank/reconciliation/settings"
            ],
            "summary": "Get bank reconciliation settings.",
            "operationId": "BankReconciliationSettings_get",
            "parameters": [
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperBankReconciliationSettings"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "bank/reconciliation/settings"
            ],
            "summary": "Post bank reconciliation settings.",
            "operationId": "BankReconciliationSettings_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/BankReconciliationSettings"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperBankReconciliationSettings"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/bank/reconciliation/settings/{id}": {
         "put": {
            "tags": [
               "bank/reconciliation/settings"
            ],
            "summary": "Update bank reconciliation settings.",
            "operationId": "BankReconciliationSettings_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/BankReconciliationSettings"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperBankReconciliationSettings"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/bank/statement/{id}": {
         "get": {
            "tags": [
               "bank/statement"
            ],
            "summary": "Get bank statement.",
            "operationId": "BankStatement_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperBankStatement"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "delete": {
            "tags": [
               "bank/statement"
            ],
            "summary": "Delete bank statement by ID.",
            "operationId": "BankStatement_delete",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/bank/statement": {
         "get": {
            "tags": [
               "bank/statement"
            ],
            "summary": "Find bank statement corresponding with sent data.",
            "operationId": "BankStatement_search",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "accountId",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fileFormat",
                  "in": "query",
                  "description": "File format",
                  "schema": {
                     "type": "string",
                     "enum": [
                        "DNB_CSV",
                        "EIKA_TELEPAY",
                        "SPAREBANK1_TELEPAY",
                        "VISMA_ACCOUNT_STATEMENT",
                        "HANDELSBANKEN_TELEPAY",
                        "SPAREBANKEN_VEST_TELEPAY",
                        "NORDEA_CSV",
                        "TRANSFERWISE",
                        "SPAREBANKEN_SOR_TELEPAY",
                        "SPAREBANKEN_OST_TELEPAY",
                        "DANSKE_BANK_CSV",
                        "CULTURA_BANK_TELEPAY",
                        "SBANKEN_PRIVAT_CSV",
                        "HAUGESUND_SPAREBANK_CSV",
                        "VISMA_ACCOUNT_STATEMENT_PSD2",
                        "SBANKEN_BEDRIFT_CSV",
                        "LANDKREDITT_TELEPAY",
                        "ZTL"
                     ]
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseBankStatement"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/bank/statement/import": {
         "post": {
            "tags": [
               "bank/statement"
            ],
            "summary": "Upload bank statement file.",
            "operationId": "BankStatementImport_importBankStatement",
            "parameters": [
               {
                  "name": "bankId",
                  "in": "query",
                  "description": "Bank ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "accountId",
                  "in": "query",
                  "description": "Account ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fromDate",
                  "in": "query",
                  "description": "Format is yyyy-MM-dd (from and incl.).",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "toDate",
                  "in": "query",
                  "description": "Format is yyyy-MM-dd (to and excl.).",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "externalId",
                  "in": "query",
                  "description": "External ID",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fileFormat",
                  "in": "query",
                  "description": "File format",
                  "required": true,
                  "schema": {
                     "type": "string",
                     "enum": [
                        "DNB_CSV",
                        "EIKA_TELEPAY",
                        "SPAREBANK1_TELEPAY",
                        "VISMA_ACCOUNT_STATEMENT",
                        "HANDELSBANKEN_TELEPAY",
                        "SPAREBANKEN_VEST_TELEPAY",
                        "NORDEA_CSV",
                        "TRANSFERWISE",
                        "SPAREBANKEN_SOR_TELEPAY",
                        "SPAREBANKEN_OST_TELEPAY",
                        "DANSKE_BANK_CSV",
                        "CULTURA_BANK_TELEPAY",
                        "SBANKEN_PRIVAT_CSV",
                        "HAUGESUND_SPAREBANK_CSV",
                        "VISMA_ACCOUNT_STATEMENT_PSD2",
                        "SBANKEN_BEDRIFT_CSV",
                        "LANDKREDITT_TELEPAY",
                        "ZTL"
                     ]
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "multipart/form-data": {
                     "schema": {
                        "required": [
                           "file"
                        ],
                        "properties": {
                           "file": {
                              "type": "string",
                              "description": "The bank statement file",
                              "format": "binary"
                           }
                        }
                     }
                  }
               },
               "required": true
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperBankStatement"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/bank/statement/transaction/{id}": {
         "get": {
            "tags": [
               "bank/statement/transaction"
            ],
            "summary": "Get bank transaction by ID.",
            "operationId": "BankStatementTransaction_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperBankTransaction"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/bank/statement/transaction": {
         "get": {
            "tags": [
               "bank/statement/transaction"
            ],
            "summary": "Find bank transaction corresponding with sent data.",
            "operationId": "BankStatementTransaction_search",
            "parameters": [
               {
                  "name": "bankStatementId",
                  "in": "query",
                  "description": "Bank statement ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseBankTransaction"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/bank/statement/transaction/{id}/details": {
         "get": {
            "tags": [
               "bank/statement/transaction"
            ],
            "summary": "Get additional details about transaction by ID.",
            "operationId": "BankStatementTransactionDetails_getDetails",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperObject"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/accountantClientAccess/requiresLevel4Authorization": {
         "get": {
            "tags": [
               "accountantClientAccess"
            ],
            "summary": "Check if any of the employee ids requires level 4 authorizations to make changes",
            "operationId": "AccountantClientAccessRequiresLevel4Authorization_getRequiresLevel4Authorization",
            "parameters": [
               {
                  "name": "customerIds",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "employeeIds",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperBoolean"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/token/consumer/byToken": {
         "get": {
            "tags": [
               "token/consumer"
            ],
            "summary": "Get consumer token by token string.",
            "operationId": "TokenConsumerByToken_getByToken",
            "parameters": [
               {
                  "name": "token",
                  "in": "query",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperConsumerToken"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/token/employee/:create": {
         "put": {
            "tags": [
               "token/employee"
            ],
            "summary": "Create an employee token. Only selected consumers are allowed",
            "operationId": "TokenEmployeeCreate_create",
            "parameters": [
               {
                  "name": "tokenName",
                  "in": "query",
                  "description": "A user defined name for the new token",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "consumerName",
                  "in": "query",
                  "description": "The name of the consumer",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "employeeId",
                  "in": "query",
                  "description": "The id of the employee",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "companyOwned",
                  "in": "query",
                  "description": "Is the key company owned",
                  "required": true,
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "expirationDate",
                  "in": "query",
                  "description": "Expiration date for the employeeToken",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperEmployeeToken"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/token/session/{token}": {
         "delete": {
            "tags": [
               "token/session"
            ],
            "summary": "Delete session token.",
            "operationId": "TokenSession_delete",
            "parameters": [
               {
                  "name": "token",
                  "in": "path",
                  "description": "The login token string to delete",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/token/session/:create": {
         "put": {
            "tags": [
               "token/session"
            ],
            "summary": "Create session token.",
            "operationId": "TokenSessionCreate_create",
            "parameters": [
               {
                  "name": "consumerToken",
                  "in": "query",
                  "description": "Token of the API consumer",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "employeeToken",
                  "in": "query",
                  "description": "The employee's token",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "expirationDate",
                  "in": "query",
                  "description": "Expiration date for the combined token",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperSessionToken"
                        }
                     }
                  }
               }
            }
         }
      },
      "/token/session/>whoAmI": {
         "get": {
            "tags": [
               "token/session"
            ],
            "summary": "Find information about the current user.",
            "operationId": "TokenSessionWhoAmI_whoAmI",
            "parameters": [
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperLoggedInUserInfoDTO"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/company/>withLoginAccess": {
         "get": {
            "tags": [
               "company"
            ],
            "summary": "Returns client customers (with accountant/auditor relation) where the current user has login access (proxy login).",
            "operationId": "CompanyWithLoginAccess_getWithLoginAccess",
            "parameters": [
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseClient"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/company/{id}": {
         "get": {
            "tags": [
               "company"
            ],
            "summary": "Find company by ID.",
            "operationId": "Company_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperCompany"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/company": {
         "put": {
            "tags": [
               "company"
            ],
            "summary": "Update company information.",
            "operationId": "Company_put",
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/Company"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperCompany"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/company/divisions": {
         "get": {
            "tags": [
               "company"
            ],
            "summary": "[DEPRECATED] Find divisions.",
            "operationId": "CompanyDivisions_getDivisions",
            "parameters": [
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseCompany"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/company/settings/altinn": {
         "get": {
            "tags": [
               "company/altinn"
            ],
            "summary": "Find Altinn id for login in company.",
            "operationId": "CompanySettingsAltinn_search",
            "parameters": [
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperAltinnCompanyModule"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "company/altinn"
            ],
            "summary": "Update AltInn id and password.",
            "operationId": "CompanySettingsAltinn_put",
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/AltinnCompanyModule"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperAltinnCompanyModule"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/company/salesmodules": {
         "get": {
            "tags": [
               "company/salesmodules"
            ],
            "summary": "[BETA] Get active sales modules.",
            "operationId": "CompanySalesmodules_get",
            "parameters": [
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseSalesModuleDTO"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "company/salesmodules"
            ],
            "summary": "[BETA] Add (activate) a new sales module.",
            "operationId": "CompanySalesmodules_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/SalesModuleDTO"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperSalesModuleDTO"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/contact/{id}": {
         "get": {
            "tags": [
               "contact"
            ],
            "summary": "Get contact by ID.",
            "operationId": "Contact_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperContact"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "contact"
            ],
            "summary": "Update contact.",
            "operationId": "Contact_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/Contact"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperContact"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/contact": {
         "get": {
            "tags": [
               "contact"
            ],
            "summary": "Find contacts corresponding with sent data.",
            "operationId": "Contact_search",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "firstName",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "lastName",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "email",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "customerId",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "departmentId",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseContact"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "contact"
            ],
            "summary": "Create contact.",
            "operationId": "Contact_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/Contact"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperContact"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/contact/list": {
         "delete": {
            "tags": [
               "contact"
            ],
            "summary": "[BETA] Delete multiple contacts.",
            "operationId": "ContactList_deleteByIds",
            "parameters": [
               {
                  "name": "ids",
                  "in": "query",
                  "description": "ID of the elements",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/country/{id}": {
         "get": {
            "tags": [
               "country"
            ],
            "summary": "Get country by ID.",
            "operationId": "Country_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperCountry"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/country": {
         "get": {
            "tags": [
               "country"
            ],
            "summary": "Find countries corresponding with sent data.",
            "operationId": "Country_search",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "code",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "isDisabled",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseCountry"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/currency/{id}": {
         "get": {
            "tags": [
               "currency"
            ],
            "summary": "Get currency by ID.",
            "operationId": "Currency_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperCurrency"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/currency": {
         "get": {
            "tags": [
               "currency"
            ],
            "summary": "Find currencies corresponding with sent data.",
            "operationId": "Currency_search",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "code",
                  "in": "query",
                  "description": "Currency codes",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseCurrency"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/currency/{id}/rate": {
         "get": {
            "tags": [
               "currency"
            ],
            "summary": "Find currency exchange rate corresponding with sent data.",
            "operationId": "CurrencyRate_getRate",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Currency id",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "date",
                  "in": "query",
                  "description": "Format is yyyy-MM-dd",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperCurrencyExchangeRate"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/customer/{id}": {
         "get": {
            "tags": [
               "customer"
            ],
            "summary": "Get customer by ID.",
            "operationId": "Customer_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperCustomer"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "customer"
            ],
            "summary": "Update customer. ",
            "operationId": "Customer_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/Customer"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperCustomer"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "customer"
            ],
            "summary": "[BETA] Delete customer by ID",
            "operationId": "Customer_delete",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/customer": {
         "get": {
            "tags": [
               "customer"
            ],
            "summary": "Find customers corresponding with sent data.",
            "operationId": "Customer_search",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "customerAccountNumber",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "organizationNumber",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "email",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "invoiceEmail",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "isInactive",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean",
                     "default": false
                  }
               },
               {
                  "name": "accountManagerId",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "changedSince",
                  "in": "query",
                  "description": "Only return elements that have changed since this date and time",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseCustomer"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "customer"
            ],
            "summary": "Create customer. Related customer addresses may also be created.",
            "operationId": "Customer_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/Customer"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperCustomer"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/customer/list": {
         "put": {
            "tags": [
               "customer"
            ],
            "summary": "[BETA] Update multiple customers. Addresses can also be updated.",
            "operationId": "CustomerList_putList",
            "requestBody": {
               "description": "JSON representing updates to objects. Should have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/Customer"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseCustomer"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "post": {
            "tags": [
               "customer"
            ],
            "summary": "[BETA] Create multiple customers. Related supplier addresses may also be created.",
            "operationId": "CustomerList_postList",
            "requestBody": {
               "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/Customer"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseCustomer"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/customer/category/{id}": {
         "get": {
            "tags": [
               "customer/category"
            ],
            "summary": "Find customer/supplier category by ID.",
            "operationId": "CustomerCategory_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperCustomerCategory"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "customer/category"
            ],
            "summary": "Update customer/supplier category.",
            "operationId": "CustomerCategory_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/CustomerCategory"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperCustomerCategory"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/customer/category": {
         "get": {
            "tags": [
               "customer/category"
            ],
            "summary": "Find customer/supplier categories corresponding with sent data.",
            "operationId": "CustomerCategory_search",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "name",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "number",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "description",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "type",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseCustomerCategory"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "customer/category"
            ],
            "summary": "Add new customer/supplier category.",
            "operationId": "CustomerCategory_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/CustomerCategory"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperCustomerCategory"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/department/{id}": {
         "get": {
            "tags": [
               "department"
            ],
            "summary": "Get department by ID.",
            "operationId": "Department_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperDepartment"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "department"
            ],
            "summary": "Update department.",
            "operationId": "Department_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/Department"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperDepartment"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "department"
            ],
            "summary": "Delete department by ID",
            "operationId": "Department_delete",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/department/query": {
         "get": {
            "tags": [
               "department"
            ],
            "summary": "Wildcard search.",
            "operationId": "DepartmentQuery_query",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "query",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "format": "int32",
                     "default": 25
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string",
                     "default": "id, name"
                  }
               },
               {
                  "name": "isInactive",
                  "in": "query",
                  "description": "true - return only inactive departments; false - return only active departments; unspecified - return both types",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseDepartment"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/department": {
         "get": {
            "tags": [
               "department"
            ],
            "summary": "Find department corresponding with sent data.",
            "operationId": "Department_search",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "name",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "departmentNumber",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "departmentManagerId",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "isInactive",
                  "in": "query",
                  "description": "true - return only inactive departments; false - return only active departments; unspecified - return both types",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseDepartment"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "department"
            ],
            "summary": "Add new department.",
            "operationId": "Department_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/Department"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperDepartment"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/department/list": {
         "put": {
            "tags": [
               "department"
            ],
            "summary": "Update multiple departments.",
            "operationId": "DepartmentList_putList",
            "requestBody": {
               "description": "JSON representing updates to objects. Should have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/Department"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseDepartment"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "post": {
            "tags": [
               "department"
            ],
            "summary": "Register new departments.",
            "operationId": "DepartmentList_postList",
            "requestBody": {
               "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/Department"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseDepartment"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/division/{id}": {
         "put": {
            "tags": [
               "division"
            ],
            "summary": "Update division information.",
            "operationId": "Division_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/Division"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperDivision"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/division": {
         "get": {
            "tags": [
               "division"
            ],
            "summary": "Get divisions.",
            "operationId": "Division_search",
            "parameters": [
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseDivision"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "division"
            ],
            "summary": "Create division.",
            "operationId": "Division_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/Division"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperDivision"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/division/list": {
         "put": {
            "tags": [
               "division"
            ],
            "summary": "Update multiple divisions.",
            "operationId": "DivisionList_putList",
            "requestBody": {
               "description": "JSON representing updates to objects. Should have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/Division"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseDivision"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "post": {
            "tags": [
               "division"
            ],
            "summary": "Create divisions.",
            "operationId": "DivisionList_postList",
            "requestBody": {
               "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/Division"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseDivision"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/document/{id}": {
         "get": {
            "tags": [
               "document"
            ],
            "summary": "[BETA] Get document by ID.",
            "operationId": "Document_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperDocument"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/documentArchive/{id}": {
         "put": {
            "tags": [
               "documentArchive"
            ],
            "summary": "[BETA] Update document archive.",
            "operationId": "DocumentArchive_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/DocumentArchive"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperDocumentArchive"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "documentArchive"
            ],
            "summary": "[BETA] Delete document archive.",
            "operationId": "DocumentArchive_delete",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/documentArchive/reception": {
         "post": {
            "tags": [
               "documentArchive"
            ],
            "summary": "[BETA] Upload a file to the document archive reception. Send as multipart form.",
            "operationId": "DocumentArchiveReception_receptionPost",
            "requestBody": {
               "content": {
                  "multipart/form-data": {
                     "schema": {
                        "required": [
                           "file"
                        ],
                        "properties": {
                           "file": {
                              "type": "string",
                              "description": "The file",
                              "format": "binary"
                           }
                        }
                     }
                  }
               },
               "required": true
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperDocumentArchive"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/documentArchive/project/{id}": {
         "get": {
            "tags": [
               "documentArchive"
            ],
            "summary": "[BETA] Find documents archived associated with project object type.",
            "operationId": "DocumentArchiveProject_getProject",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "periodDateFrom",
                  "in": "query",
                  "description": "From and including",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "periodDateTo",
                  "in": "query",
                  "description": "To and excluding",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseDocumentArchive"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "documentArchive"
            ],
            "summary": "[BETA] Upload file to Project Document Archive.",
            "operationId": "DocumentArchiveProject_projectPost",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "multipart/form-data": {
                     "schema": {
                        "required": [
                           "file"
                        ],
                        "properties": {
                           "file": {
                              "type": "string",
                              "description": "The file",
                              "format": "binary"
                           }
                        }
                     }
                  }
               },
               "required": true
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperDocumentArchive"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/documentArchive/customer/{id}": {
         "get": {
            "tags": [
               "documentArchive"
            ],
            "summary": "[BETA] Find documents archived associated with customer object type.",
            "operationId": "DocumentArchiveCustomer_getCustomer",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "periodDateFrom",
                  "in": "query",
                  "description": "From and including",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "periodDateTo",
                  "in": "query",
                  "description": "To and excluding",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseDocumentArchive"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "documentArchive"
            ],
            "summary": "[BETA] Upload file to Customer Document Archive.",
            "operationId": "DocumentArchiveCustomer_customerPost",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "multipart/form-data": {
                     "schema": {
                        "required": [
                           "file"
                        ],
                        "properties": {
                           "file": {
                              "type": "string",
                              "description": "The file",
                              "format": "binary"
                           }
                        }
                     }
                  }
               },
               "required": true
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperDocumentArchive"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/documentArchive/supplier/{id}": {
         "get": {
            "tags": [
               "documentArchive"
            ],
            "summary": "[BETA] Find documents archived associated with supplier object type.",
            "operationId": "DocumentArchiveSupplier_getSupplier",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "periodDateFrom",
                  "in": "query",
                  "description": "From and including",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "periodDateTo",
                  "in": "query",
                  "description": "To and excluding",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseDocumentArchive"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "documentArchive"
            ],
            "summary": "[BETA] Upload file to Supplier Document Archive.",
            "operationId": "DocumentArchiveSupplier_supplierPost",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "multipart/form-data": {
                     "schema": {
                        "required": [
                           "file"
                        ],
                        "properties": {
                           "file": {
                              "type": "string",
                              "description": "The file",
                              "format": "binary"
                           }
                        }
                     }
                  }
               },
               "required": true
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperDocumentArchive"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/documentArchive/employee/{id}": {
         "get": {
            "tags": [
               "documentArchive"
            ],
            "summary": "[BETA] Find documents archived associated with employee object type.",
            "operationId": "DocumentArchiveEmployee_getEmployee",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "periodDateFrom",
                  "in": "query",
                  "description": "From and including",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "periodDateTo",
                  "in": "query",
                  "description": "To and excluding",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseDocumentArchive"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "documentArchive"
            ],
            "summary": "[BETA] Upload file to Employee Document Archive.",
            "operationId": "DocumentArchiveEmployee_employeePost",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "multipart/form-data": {
                     "schema": {
                        "required": [
                           "file"
                        ],
                        "properties": {
                           "file": {
                              "type": "string",
                              "description": "The file",
                              "format": "binary"
                           }
                        }
                     }
                  }
               },
               "required": true
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperDocumentArchive"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/documentArchive/product/{id}": {
         "get": {
            "tags": [
               "documentArchive"
            ],
            "summary": "[BETA] Find documents archived associated with product object type.",
            "operationId": "DocumentArchiveProduct_getProduct",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "periodDateFrom",
                  "in": "query",
                  "description": "From and including",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "periodDateTo",
                  "in": "query",
                  "description": "To and excluding",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseDocumentArchive"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "documentArchive"
            ],
            "summary": "[BETA] Upload file to Product Document Archive.",
            "operationId": "DocumentArchiveProduct_productPost",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "multipart/form-data": {
                     "schema": {
                        "required": [
                           "file"
                        ],
                        "properties": {
                           "file": {
                              "type": "string",
                              "description": "The file",
                              "format": "binary"
                           }
                        }
                     }
                  }
               },
               "required": true
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperDocumentArchive"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/documentArchive/account/{id}": {
         "get": {
            "tags": [
               "documentArchive"
            ],
            "summary": "[BETA] Find documents archived associated with account object type.",
            "operationId": "DocumentArchiveAccount_getAccount",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "periodDateFrom",
                  "in": "query",
                  "description": "From and including",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "periodDateTo",
                  "in": "query",
                  "description": "To and excluding",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseDocumentArchive"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "documentArchive"
            ],
            "summary": "[BETA] Upload file to Account Document Archive.",
            "operationId": "DocumentArchiveAccount_accountPost",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "multipart/form-data": {
                     "schema": {
                        "required": [
                           "file"
                        ],
                        "properties": {
                           "file": {
                              "type": "string",
                              "description": "The file",
                              "format": "binary"
                           }
                        }
                     }
                  }
               },
               "required": true
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperDocumentArchive"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/documentArchive/prospect/{id}": {
         "get": {
            "tags": [
               "documentArchive"
            ],
            "summary": "[BETA] Find documents archived associated with prospect object type.",
            "operationId": "DocumentArchiveProspect_getProspect",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "periodDateFrom",
                  "in": "query",
                  "description": "From and including",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "periodDateTo",
                  "in": "query",
                  "description": "To and excluding",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseDocumentArchive"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "documentArchive"
            ],
            "summary": "[BETA] Upload file to Prospect Document Archive.",
            "operationId": "DocumentArchiveProspect_prospectPost",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "multipart/form-data": {
                     "schema": {
                        "required": [
                           "file"
                        ],
                        "properties": {
                           "file": {
                              "type": "string",
                              "description": "The file",
                              "format": "binary"
                           }
                        }
                     }
                  }
               },
               "required": true
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperDocumentArchive"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/employee/{id}": {
         "get": {
            "tags": [
               "employee"
            ],
            "summary": "Get employee by ID.",
            "operationId": "Employee_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperEmployee"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "employee"
            ],
            "summary": "Update employee.",
            "operationId": "Employee_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/Employee"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperEmployee"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/employee": {
         "get": {
            "tags": [
               "employee"
            ],
            "summary": "Find employees corresponding with sent data.",
            "operationId": "Employee_search",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "firstName",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "lastName",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "employeeNumber",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "email",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "allowInformationRegistration",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "includeContacts",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean",
                     "default": false
                  }
               },
               {
                  "name": "departmentId",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "onlyProjectManagers",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "onlyContacts",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean",
                     "default": false
                  }
               },
               {
                  "name": "assignableProjectManagers",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "periodStart",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "periodEnd",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "hasSystemAccess",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseEmployee"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "employee"
            ],
            "summary": "Create one employee.",
            "operationId": "Employee_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/Employee"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperEmployee"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/employee/list": {
         "post": {
            "tags": [
               "employee"
            ],
            "summary": "Create several employees.",
            "operationId": "EmployeeList_postList",
            "requestBody": {
               "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/Employee"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseEmployee"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/employee/searchForEmployeesAndContacts": {
         "get": {
            "tags": [
               "employee"
            ],
            "summary": "Get employees and contacts by parameters. Include contacts by default.",
            "operationId": "EmployeeSearchForEmployeesAndContacts_searchForEmployeesAndContacts",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "firstName",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "lastName",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "email",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "includeContacts",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean",
                     "default": true
                  }
               },
               {
                  "name": "isInactive",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "hasSystemAccess",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "excludeReadOnly",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string",
                     "default": "id, employeeNumber, firstName, lastName, email, pictureId"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseEmployee"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/employee/category/{id}": {
         "get": {
            "tags": [
               "employee/category"
            ],
            "summary": "Get employee category by ID.",
            "operationId": "EmployeeCategory_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperEmployeeCategory"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "employee/category"
            ],
            "summary": "Update employee category information.",
            "operationId": "EmployeeCategory_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/EmployeeCategory"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperEmployeeCategory"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "employee/category"
            ],
            "summary": "Delete employee category by ID",
            "operationId": "EmployeeCategory_delete",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/employee/category": {
         "get": {
            "tags": [
               "employee/category"
            ],
            "summary": "Find employee category corresponding with sent data.",
            "operationId": "EmployeeCategory_search",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "name",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "number",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseEmployeeCategory"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "employee/category"
            ],
            "summary": "Create a new employee category.",
            "operationId": "EmployeeCategory_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/EmployeeCategory"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperEmployeeCategory"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/employee/category/list": {
         "put": {
            "tags": [
               "employee/category"
            ],
            "summary": "Update multiple employee categories.",
            "operationId": "EmployeeCategoryList_putList",
            "requestBody": {
               "description": "JSON representing updates to objects. Should have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/EmployeeCategory"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseEmployeeCategory"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "post": {
            "tags": [
               "employee/category"
            ],
            "summary": "Create new employee categories.",
            "operationId": "EmployeeCategoryList_postList",
            "requestBody": {
               "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/EmployeeCategory"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseEmployeeCategory"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "employee/category"
            ],
            "summary": "Delete multiple employee categories",
            "operationId": "EmployeeCategoryList_deleteByIds",
            "parameters": [
               {
                  "name": "ids",
                  "in": "query",
                  "description": "ID of the elements",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/employee/employment/{id}": {
         "get": {
            "tags": [
               "employee/employment"
            ],
            "summary": "Find employment by ID.",
            "operationId": "EmployeeEmployment_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperEmployment"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "employee/employment"
            ],
            "summary": "Update employemnt. ",
            "operationId": "EmployeeEmployment_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/Employment"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperEmployment"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/employee/employment": {
         "get": {
            "tags": [
               "employee/employment"
            ],
            "summary": "Find all employments for employee.",
            "operationId": "EmployeeEmployment_search",
            "parameters": [
               {
                  "name": "employeeId",
                  "in": "query",
                  "description": "Element ID",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseEmployment"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "employee/employment"
            ],
            "summary": "Create employment.",
            "operationId": "EmployeeEmployment_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/Employment"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperEmployment"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/employee/employment/details/{id}": {
         "get": {
            "tags": [
               "employee/employment/details"
            ],
            "summary": "Find employment details by ID.",
            "operationId": "EmployeeEmploymentDetails_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperEmploymentDetails"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "employee/employment/details"
            ],
            "summary": "Update employment details. ",
            "operationId": "EmployeeEmploymentDetails_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/EmploymentDetails"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperEmploymentDetails"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/employee/employment/details": {
         "get": {
            "tags": [
               "employee/employment/details"
            ],
            "summary": "Find all employmentdetails for employment.",
            "operationId": "EmployeeEmploymentDetails_search",
            "parameters": [
               {
                  "name": "employmentId",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseEmploymentDetails"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "employee/employment/details"
            ],
            "summary": "Create employment details.",
            "operationId": "EmployeeEmploymentDetails_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/EmploymentDetails"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperEmploymentDetails"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/employee/employment/employmentType": {
         "get": {
            "tags": [
               "employee/employment/employmentType"
            ],
            "summary": "Find all employment type IDs.",
            "operationId": "EmployeeEmploymentEmploymentType_search",
            "parameters": [
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseEmploymentType"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/employee/employment/employmentType/maritimeEmploymentType": {
         "get": {
            "tags": [
               "employee/employment/employmentType"
            ],
            "summary": "Find all maritime employment type IDs.",
            "operationId": "EmployeeEmploymentEmploymentTypeMaritimeEmploymentType_getMaritimeEmploymentType",
            "parameters": [
               {
                  "name": "type",
                  "in": "query",
                  "description": "maritimeEmploymentType",
                  "required": true,
                  "schema": {
                     "type": "string",
                     "enum": [
                        "SHIP_REGISTER",
                        "SHIP_TYPE",
                        "TRADE_AREA"
                     ]
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseEmploymentType"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/employee/employment/employmentType/salaryType": {
         "get": {
            "tags": [
               "employee/employment/employmentType"
            ],
            "summary": "Find all salary type IDs.",
            "operationId": "EmployeeEmploymentEmploymentTypeSalaryType_getSalaryType",
            "parameters": [
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseEmploymentType"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/employee/employment/employmentType/scheduleType": {
         "get": {
            "tags": [
               "employee/employment/employmentType"
            ],
            "summary": "Find all schedule type IDs.",
            "operationId": "EmployeeEmploymentEmploymentTypeScheduleType_getScheduleType",
            "parameters": [
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseEmploymentType"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/employee/employment/employmentType/employmentFormType": {
         "get": {
            "tags": [
               "employee/employment/employmentType"
            ],
            "summary": "Find all employment form type IDs.",
            "operationId": "EmployeeEmploymentEmploymentTypeEmploymentFormType_getEmploymentFormType",
            "parameters": [
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseEmploymentType"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/employee/employment/employmentType/employmentEndReasonType": {
         "get": {
            "tags": [
               "employee/employment/employmentType"
            ],
            "summary": "Find all employment end reason type IDs.",
            "operationId": "EmployeeEmploymentEmploymentTypeEmploymentEndReasonType_getEmploymentEndReasonType",
            "parameters": [
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseEmploymentType"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/employee/employment/leaveOfAbsence/{id}": {
         "get": {
            "tags": [
               "employee/employment/leaveOfAbsence"
            ],
            "summary": "Find leave of absence by ID.",
            "operationId": "EmployeeEmploymentLeaveOfAbsence_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperLeaveOfAbsence"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "employee/employment/leaveOfAbsence"
            ],
            "summary": "Update leave of absence.",
            "operationId": "EmployeeEmploymentLeaveOfAbsence_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/LeaveOfAbsence"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperLeaveOfAbsence"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/employee/employment/leaveOfAbsence": {
         "get": {
            "tags": [
               "employee/employment/leaveOfAbsence"
            ],
            "summary": "Find all leave of absence corresponding with the sent data.",
            "operationId": "EmployeeEmploymentLeaveOfAbsence_search",
            "parameters": [
               {
                  "name": "employmentIds",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "date",
                  "in": "query",
                  "description": "yyyy-MM-dd. Defaults to today.",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "minPercentage",
                  "in": "query",
                  "description": "Must be between 0-100.",
                  "schema": {
                     "type": "integer",
                     "format": "int32",
                     "default": 0
                  }
               },
               {
                  "name": "maxPercentage",
                  "in": "query",
                  "description": "Must be between 0-100.",
                  "schema": {
                     "type": "integer",
                     "format": "int32",
                     "default": 100
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseLeaveOfAbsence"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "employee/employment/leaveOfAbsence"
            ],
            "summary": "Create leave of absence.",
            "operationId": "EmployeeEmploymentLeaveOfAbsence_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/LeaveOfAbsence"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperLeaveOfAbsence"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/employee/employment/leaveOfAbsence/list": {
         "post": {
            "tags": [
               "employee/employment/leaveOfAbsence"
            ],
            "summary": "Create multiple leave of absences.",
            "operationId": "EmployeeEmploymentLeaveOfAbsenceList_postList",
            "requestBody": {
               "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/LeaveOfAbsence"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseLeaveOfAbsence"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/employee/employment/leaveOfAbsenceType": {
         "get": {
            "tags": [
               "employee/employment/leaveOfAbsenceType"
            ],
            "summary": "Find all leave of absence type IDs.",
            "operationId": "EmployeeEmploymentLeaveOfAbsenceType_search",
            "parameters": [
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseLeaveOfAbsenceType"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/employee/employment/occupationCode/{id}": {
         "get": {
            "tags": [
               "employee/employment/occupationCode"
            ],
            "summary": "Get occupation by ID.",
            "operationId": "EmployeeEmploymentOccupationCode_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperOccupationCode"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/employee/employment/occupationCode": {
         "get": {
            "tags": [
               "employee/employment/occupationCode"
            ],
            "summary": "Find all profession codes.",
            "operationId": "EmployeeEmploymentOccupationCode_search",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "Element ID",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "nameNO",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "code",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseOccupationCode"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/employee/employment/remunerationType": {
         "get": {
            "tags": [
               "employee/employment/remunerationType"
            ],
            "summary": "Find all remuneration type IDs.",
            "operationId": "EmployeeEmploymentRemunerationType_search",
            "parameters": [
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseRemunerationType"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/employee/employment/workingHoursScheme": {
         "get": {
            "tags": [
               "employee/employment/workingHoursScheme"
            ],
            "summary": "Find working hours scheme ID.",
            "operationId": "EmployeeEmploymentWorkingHoursScheme_search",
            "parameters": [
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseWorkingHoursScheme"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/employee/hourlyCostAndRate/{id}": {
         "get": {
            "tags": [
               "employee/hourlyCostAndRate"
            ],
            "summary": "Find hourly cost and rate by ID.",
            "operationId": "EmployeeHourlyCostAndRate_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperHourlyCostAndRate"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "employee/hourlyCostAndRate"
            ],
            "summary": "Update hourly cost and rate. ",
            "operationId": "EmployeeHourlyCostAndRate_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/HourlyCostAndRate"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperHourlyCostAndRate"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/employee/hourlyCostAndRate": {
         "get": {
            "tags": [
               "employee/hourlyCostAndRate"
            ],
            "summary": "Find all hourly cost and rates for employee.",
            "operationId": "EmployeeHourlyCostAndRate_search",
            "parameters": [
               {
                  "name": "employeeId",
                  "in": "query",
                  "description": "Employee ID. Defaults to ID of token owner.",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseHourlyCostAndRate"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "employee/hourlyCostAndRate"
            ],
            "summary": "Create hourly cost and rate.",
            "operationId": "EmployeeHourlyCostAndRate_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/HourlyCostAndRate"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperHourlyCostAndRate"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/employee/logininfo/{id}": {
         "get": {
            "tags": [
               "employee/logininfo"
            ],
            "summary": "[BETA] Get employee login info.",
            "operationId": "EmployeeLogininfo_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperEmployeeLoginInfo"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/employee/nextOfKin/{id}": {
         "get": {
            "tags": [
               "employee/nextOfKin"
            ],
            "summary": "Find next of kin by ID.",
            "operationId": "EmployeeNextOfKin_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperNextOfKin"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "employee/nextOfKin"
            ],
            "summary": "Update next of kin. ",
            "operationId": "EmployeeNextOfKin_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/NextOfKin"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperNextOfKin"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/employee/nextOfKin": {
         "get": {
            "tags": [
               "employee/nextOfKin"
            ],
            "summary": "Find all next of kin for employee.",
            "operationId": "EmployeeNextOfKin_search",
            "parameters": [
               {
                  "name": "employeeId",
                  "in": "query",
                  "description": "Employee ID. Defaults to ID of token owner.",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseNextOfKin"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "employee/nextOfKin"
            ],
            "summary": "Create next of kin.",
            "operationId": "EmployeeNextOfKin_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/NextOfKin"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperNextOfKin"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/employee/preferences/{id}": {
         "put": {
            "tags": [
               "employee/preferences"
            ],
            "summary": "Update employee preferences information.",
            "operationId": "EmployeePreferences_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/EmployeePreferences"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperEmployeePreferences"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/employee/preferences": {
         "get": {
            "tags": [
               "employee/preferences"
            ],
            "summary": "Find employee preferences corresponding with sent data.",
            "operationId": "EmployeePreferences_search",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "employeeId",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperEmployeePreferences"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/employee/preferences/list": {
         "put": {
            "tags": [
               "employee/preferences"
            ],
            "summary": "Update multiple employee preferences.",
            "operationId": "EmployeePreferencesList_putList",
            "requestBody": {
               "description": "JSON representing updates to objects. Should have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/EmployeePreferences"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseEmployeePreferences"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/employee/preferences/>loggedInEmployeePreferences": {
         "get": {
            "tags": [
               "employee/preferences"
            ],
            "summary": "Get employee preferences for current user",
            "operationId": "EmployeePreferencesLoggedInEmployeePreferences_loggedInEmployeePreferences",
            "parameters": [
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperEmployeePreferences"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/employee/standardTime/{id}": {
         "get": {
            "tags": [
               "employee/standardTime"
            ],
            "summary": "Find standard time by ID.",
            "operationId": "EmployeeStandardTime_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperStandardTime"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "employee/standardTime"
            ],
            "summary": "Update standard time. ",
            "operationId": "EmployeeStandardTime_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/StandardTime"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperStandardTime"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/employee/standardTime": {
         "get": {
            "tags": [
               "employee/standardTime"
            ],
            "summary": "Find all standard times for employee.",
            "operationId": "EmployeeStandardTime_search",
            "parameters": [
               {
                  "name": "employeeId",
                  "in": "query",
                  "description": "Employee ID. Defaults to ID of token owner.",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseStandardTime"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "employee/standardTime"
            ],
            "summary": "Create standard time.",
            "operationId": "EmployeeStandardTime_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/StandardTime"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperStandardTime"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/employee/standardTime/byDate": {
         "get": {
            "tags": [
               "employee/standardTime"
            ],
            "summary": "Find standard time for employee by date.",
            "operationId": "EmployeeStandardTimeByDate_getByDate",
            "parameters": [
               {
                  "name": "employeeId",
                  "in": "query",
                  "description": "Employee ID. Defaults to ID of token owner.",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "date",
                  "in": "query",
                  "description": "yyyy-MM-dd. Defaults to today.",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperStandardTime"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/employee/entitlement/{id}": {
         "get": {
            "tags": [
               "employee/entitlement"
            ],
            "summary": "Get entitlement by ID.",
            "operationId": "EmployeeEntitlement_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperEntitlement"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/employee/entitlement": {
         "get": {
            "tags": [
               "employee/entitlement"
            ],
            "summary": "Find all entitlements for user.",
            "operationId": "EmployeeEntitlement_search",
            "parameters": [
               {
                  "name": "employeeId",
                  "in": "query",
                  "description": "Employee ID. Defaults to ID of token owner.",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseEntitlement"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/employee/entitlement/:grantClientEntitlementsByTemplate": {
         "put": {
            "tags": [
               "employee/entitlement"
            ],
            "summary": "[BETA] Update employee entitlements in client account.",
            "operationId": "EmployeeEntitlementGrantClientEntitlementsByTemplate_grantClientEntitlementsByTemplate",
            "parameters": [
               {
                  "name": "employeeId",
                  "in": "query",
                  "description": "Employee ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "customerId",
                  "in": "query",
                  "description": "Client ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "template",
                  "in": "query",
                  "description": "Template",
                  "required": true,
                  "schema": {
                     "type": "string",
                     "enum": [
                        "NONE_PRIVILEGES",
                        "STANDARD_PRIVILEGES_ACCOUNTANT",
                        "STANDARD_PRIVILEGES_AUDITOR",
                        "ALL_PRIVILEGES",
                        "AGRO_READ_ONLY",
                        "AGRO_READ_APPROVE",
                        "AGRO_READ_WRITE",
                        "AGRO_READ_WRITE_APPROVE",
                        "MAMUT_PAYROLL_ADMIN",
                        "MAMUT_PAYROLL_CLERK",
                        "AGRO_PAYROLL_ADMIN",
                        "AGRO_PAYROLL_CLERK",
                        "AGRO_INVOICE_ADMIN",
                        "AGRO_INVOICE_CLERK"
                     ]
                  }
               },
               {
                  "name": "addToExisting",
                  "in": "query",
                  "description": "Add template to existing entitlements",
                  "schema": {
                     "type": "boolean",
                     "default": false
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/employee/entitlement/:grantEntitlementsByTemplate": {
         "put": {
            "tags": [
               "employee/entitlement"
            ],
            "summary": "[BETA] Update employee entitlements.",
            "description": "The user will only receive the entitlements which are possible with the registered user type",
            "operationId": "EmployeeEntitlementGrantEntitlementsByTemplate_grantEntitlementsByTemplate",
            "parameters": [
               {
                  "name": "employeeId",
                  "in": "query",
                  "description": "Employee ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "template",
                  "in": "query",
                  "description": "Template",
                  "required": true,
                  "schema": {
                     "type": "string",
                     "enum": [
                        "NONE_PRIVILEGES",
                        "ALL_PRIVILEGES",
                        "INVOICING_MANAGER",
                        "PERSONELL_MANAGER",
                        "ACCOUNTANT",
                        "AUDITOR",
                        "DEPARTMENT_LEADER",
                        "MAMUT_USER_ADMIN",
                        "MAMUT_USER"
                     ]
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/employee/entitlement/client": {
         "get": {
            "tags": [
               "employee/entitlement"
            ],
            "summary": "[BETA] Find all entitlements at client for user.",
            "operationId": "EmployeeEntitlementClient_client",
            "parameters": [
               {
                  "name": "employeeId",
                  "in": "query",
                  "description": "Employee ID. Defaults to ID of token owner.",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "customerId",
                  "in": "query",
                  "description": "Client ID",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseEntitlement"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/event": {
         "get": {
            "tags": [
               "event"
            ],
            "summary": "[BETA] Get all (WebHook) event keys.",
            "operationId": "Event_get",
            "parameters": [
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperMapStringEventInfoDescription"
                        }
                     }
                  }
               }
            }
         }
      },
      "/event/{eventType}": {
         "get": {
            "tags": [
               "event"
            ],
            "summary": "[BETA] Get example webhook payload",
            "operationId": "Event_example",
            "parameters": [
               {
                  "name": "eventType",
                  "in": "path",
                  "description": "Event type, from /event endpoint",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperEventInfoDTO"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/event/subscription/{id}": {
         "get": {
            "tags": [
               "event/subscription"
            ],
            "summary": "[BETA] Get subscription by ID.",
            "operationId": "EventSubscription_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperSubscription"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "event/subscription"
            ],
            "summary": "[BETA] Change a current subscription, based on id.",
            "operationId": "EventSubscription_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "*/*": {
                     "schema": {
                        "$ref": "#/components/schemas/Subscription"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperSubscription"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "event/subscription"
            ],
            "summary": "[BETA] Delete the given subscription.",
            "operationId": "EventSubscription_delete",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/event/subscription": {
         "get": {
            "tags": [
               "event/subscription"
            ],
            "summary": "[BETA] Find all ongoing subscriptions.",
            "operationId": "EventSubscription_search",
            "parameters": [
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseSubscription"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "event/subscription"
            ],
            "summary": "[BETA] Create a new subscription for current EmployeeToken.",
            "operationId": "EventSubscription_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/Subscription"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperSubscription"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/event/subscription/list": {
         "put": {
            "tags": [
               "event/subscription"
            ],
            "summary": "[BETA] Update multiple subscription.",
            "operationId": "EventSubscriptionList_putList",
            "requestBody": {
               "description": "JSON representing updates to objects. Should have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/Subscription"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseSubscription"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "post": {
            "tags": [
               "event/subscription"
            ],
            "summary": "[BETA] Create multiple subscriptions for current EmployeeToken.",
            "operationId": "EventSubscriptionList_postList",
            "requestBody": {
               "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/Subscription"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseSubscription"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "event/subscription"
            ],
            "summary": "[BETA] Delete multiple subscriptions.",
            "operationId": "EventSubscriptionList_deleteByIds",
            "parameters": [
               {
                  "name": "ids",
                  "in": "query",
                  "description": "ID of the elements",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/inventory/{id}": {
         "get": {
            "tags": [
               "inventory"
            ],
            "summary": "Get inventory by ID.",
            "operationId": "Inventory_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperInventory"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "inventory"
            ],
            "summary": "Update inventory.",
            "operationId": "Inventory_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/Inventory"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperInventory"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "inventory"
            ],
            "summary": "[BETA] Delete inventory.",
            "operationId": "Inventory_delete",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/inventory": {
         "get": {
            "tags": [
               "inventory"
            ],
            "summary": "Find inventory corresponding with sent data.",
            "operationId": "Inventory_search",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "name",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "isMainInventory",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "isInactive",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "query",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseInventory"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "inventory"
            ],
            "summary": "Create new inventory.",
            "operationId": "Inventory_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/Inventory"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperInventory"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/inventory/inventories": {
         "get": {
            "tags": [
               "inventory/inventories"
            ],
            "summary": "[BETA] Find inventories corresponding with sent data.",
            "operationId": "InventoryInventories_search",
            "parameters": [
               {
                  "name": "dateFrom",
                  "in": "query",
                  "description": "Format is yyyy-MM-dd (from and incl.).",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "dateTo",
                  "in": "query",
                  "description": "Format is yyyy-MM-dd (to and incl.).",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "productId",
                  "in": "query",
                  "description": "Element ID",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "inventoryId",
                  "in": "query",
                  "description": "Element ID",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "onlyProductWithChangedStatus",
                  "in": "query",
                  "schema": {
                     "type": "boolean",
                     "default": false
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseInventories"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/inventory/location/{id}": {
         "get": {
            "tags": [
               "inventory/location"
            ],
            "summary": "Get inventory location by ID. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
            "operationId": "InventoryLocation_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperInventoryLocation"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "inventory/location"
            ],
            "summary": "[BETA] Update inventory location. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
            "operationId": "InventoryLocation_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/InventoryLocation"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperInventoryLocation"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "inventory/location"
            ],
            "summary": "[BETA] Delete inventory location. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
            "operationId": "InventoryLocation_delete",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/inventory/location": {
         "get": {
            "tags": [
               "inventory/location"
            ],
            "summary": "[BETA] Find inventory locations by inventory ID. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
            "operationId": "InventoryLocation_search",
            "parameters": [
               {
                  "name": "warehouseId",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "isInactive",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "name",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseInventoryLocation"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "inventory/location"
            ],
            "summary": "[BETA] Create new inventory location. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
            "operationId": "InventoryLocation_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/InventoryLocation"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperInventoryLocation"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/inventory/location/list": {
         "put": {
            "tags": [
               "inventory/location"
            ],
            "summary": "[BETA] Update multiple inventory locations. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
            "operationId": "InventoryLocationList_putList",
            "requestBody": {
               "description": "JSON representing updates to objects. Should have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/InventoryLocation"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseInventoryLocation"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "post": {
            "tags": [
               "inventory/location"
            ],
            "summary": "[BETA] Add multiple inventory locations. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
            "operationId": "InventoryLocationList_postList",
            "requestBody": {
               "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/InventoryLocation"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseInventoryLocation"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "inventory/location"
            ],
            "summary": "[BETA] Delete inventory location. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
            "operationId": "InventoryLocationList_deleteByIds",
            "parameters": [
               {
                  "name": "ids",
                  "in": "query",
                  "description": "ID of the elements",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/inventory/stocktaking/{id}": {
         "get": {
            "tags": [
               "inventory/stocktaking"
            ],
            "summary": "[BETA] Get stocktaking by ID.",
            "operationId": "InventoryStocktaking_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperStocktaking"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "inventory/stocktaking"
            ],
            "summary": "[BETA] Update stocktaking.",
            "operationId": "InventoryStocktaking_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/Stocktaking"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperStocktaking"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "inventory/stocktaking"
            ],
            "summary": "[BETA] Delete stocktaking.",
            "operationId": "InventoryStocktaking_delete",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/inventory/stocktaking": {
         "get": {
            "tags": [
               "inventory/stocktaking"
            ],
            "summary": "[BETA] Find stocktaking corresponding with sent data.",
            "operationId": "InventoryStocktaking_search",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "isCompleted",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "inventoryId",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseStocktaking"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "inventory/stocktaking"
            ],
            "summary": "[BETA] Create new stocktaking.",
            "operationId": "InventoryStocktaking_post",
            "parameters": [
               {
                  "name": "typeOfStocktaking",
                  "in": "query",
                  "description": "[DEPRECATED]",
                  "schema": {
                     "type": "string",
                     "enum": [
                        "ALL_PRODUCTS_WITH_INVENTORIES",
                        "INCLUDE_PRODUCTS",
                        "NO_PRODUCTS"
                     ]
                  }
               }
            ],
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/Stocktaking"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperStocktaking"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/inventory/stocktaking/productline/{id}": {
         "get": {
            "tags": [
               "inventory/stocktaking/productline"
            ],
            "summary": "[BETA] Get product line by ID.",
            "operationId": "InventoryStocktakingProductline_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperProductLine"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "inventory/stocktaking/productline"
            ],
            "summary": "[BETA] Update product line.",
            "operationId": "InventoryStocktakingProductline_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/ProductLine"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperProductLine"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "inventory/stocktaking/productline"
            ],
            "summary": "[BETA] Delete product line.",
            "operationId": "InventoryStocktakingProductline_delete",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/inventory/stocktaking/productline": {
         "get": {
            "tags": [
               "inventory/stocktaking/productline"
            ],
            "summary": "[BETA] Find all product lines by stocktaking ID.",
            "operationId": "InventoryStocktakingProductline_search",
            "parameters": [
               {
                  "name": "stocktakingId",
                  "in": "query",
                  "description": "Equals",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "query",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "productGroupIds",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "locationIds",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "productLineStatus",
                  "in": "query",
                  "description": "Productline status",
                  "schema": {
                     "type": "string",
                     "default": "ALL_PRODUCTS",
                     "enum": [
                        "ALL_PRODUCTS",
                        "COUNTED_PRODUCTS",
                        "NOT_COUNTED_PRODUCTS"
                     ]
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "format": "int32",
                     "default": 10000
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseProductLine"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "inventory/stocktaking/productline"
            ],
            "summary": "[BETA] Create product line. When creating several product lines, use /list for better performance.",
            "operationId": "InventoryStocktakingProductline_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/ProductLine"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperProductLine"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/invoice/{id}": {
         "get": {
            "tags": [
               "invoice"
            ],
            "summary": "Get invoice by ID.",
            "operationId": "Invoice_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperInvoice"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/invoice": {
         "get": {
            "tags": [
               "invoice"
            ],
            "summary": "Find invoices corresponding with sent data. Includes charged outgoing invoices only.",
            "operationId": "Invoice_search",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "invoiceDateFrom",
                  "in": "query",
                  "description": "From and including",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "invoiceDateTo",
                  "in": "query",
                  "description": "To and excluding",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "invoiceNumber",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "kid",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "voucherId",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "customerId",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseInvoice"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "invoice"
            ],
            "summary": "Create invoice. Related Order and OrderLines can be created first, or included as new objects inside the Invoice.",
            "operationId": "Invoice_post",
            "parameters": [
               {
                  "name": "sendToCustomer",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean",
                     "default": true
                  }
               },
               {
                  "name": "paymentTypeId",
                  "in": "query",
                  "description": "Payment type to register prepayment of the invoice. paymentTypeId and paidAmount are optional, but both must be provided if the invoice has already been paid.",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "paidAmount",
                  "in": "query",
                  "description": "Paid amount to register prepayment of the invoice, in invoice currency. paymentTypeId and paidAmount are optional, but both must be provided if the invoice has already been paid.",
                  "schema": {
                     "type": "number"
                  }
               }
            ],
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/Invoice"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperInvoice"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/invoice/list": {
         "post": {
            "tags": [
               "invoice"
            ],
            "summary": "[BETA] Create multiple invoices. Max 100 at a time.",
            "operationId": "InvoiceList_postList",
            "parameters": [
               {
                  "name": "sendToCustomer",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean",
                     "default": true
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string",
                     "default": "*"
                  }
               }
            ],
            "requestBody": {
               "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/Invoice"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseInvoice"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/invoice/{id}/:send": {
         "put": {
            "tags": [
               "invoice"
            ],
            "summary": "Send invoice by ID and sendType. Optionally override email recipient.",
            "operationId": "InvoiceSend_send",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "sendType",
                  "in": "query",
                  "description": "SendType",
                  "required": true,
                  "schema": {
                     "type": "string",
                     "enum": [
                        "EMAIL",
                        "EHF",
                        "AVTALEGIRO",
                        "EFAKTURA",
                        "VIPPS",
                        "PAPER",
                        "MANUAL"
                     ]
                  }
               },
               {
                  "name": "overrideEmailAddress",
                  "in": "query",
                  "description": "Will override email address if sendType = EMAIL",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/invoice/{id}/:payment": {
         "put": {
            "tags": [
               "invoice"
            ],
            "summary": "Update invoice. The invoice is updated with payment information. The amount is in the invoice’s currency.",
            "operationId": "InvoicePayment_payment",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Invoice id",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "paymentDate",
                  "in": "query",
                  "description": "Payment date",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "paymentTypeId",
                  "in": "query",
                  "description": "PaymentType id",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "paidAmount",
                  "in": "query",
                  "description": "Amount paid by customer in the company currency, typically NOK.",
                  "required": true,
                  "schema": {
                     "type": "number"
                  }
               },
               {
                  "name": "paidAmountCurrency",
                  "in": "query",
                  "description": "Amount paid by customer in the invoice currency. Optional, but required for invoices in alternate currencies.",
                  "schema": {
                     "type": "number"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperInvoice"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/invoice/{id}/:createCreditNote": {
         "put": {
            "tags": [
               "invoice"
            ],
            "summary": "Creates a new Invoice representing a credit memo that nullifies the given invoice. Updates this invoice and any pre-existing inverse invoice.",
            "operationId": "InvoiceCreateCreditNote_createCreditNote",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Invoice id",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "date",
                  "in": "query",
                  "description": "Credit note date",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "comment",
                  "in": "query",
                  "description": "Comment",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "creditNoteEmail",
                  "in": "query",
                  "description": "The credit note will not be sent if the customer send type is email and this field is empty",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "sendToCustomer",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean",
                     "default": true
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperInvoice"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/invoice/{id}/:createReminder": {
         "put": {
            "tags": [
               "invoice"
            ],
            "summary": "Create invoice reminder and sends it by the given dispatch type. Supports the reminder types SOFT_REMINDER, REMINDER and NOTICE_OF_DEBT_COLLECTION. DispatchType NETS_PRINT must have type NOTICE_OF_DEBT_COLLECTION. SMS and NETS_PRINT must be activated prior to usage in the API.",
            "operationId": "InvoiceCreateReminder_createReminder",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "type",
                  "in": "query",
                  "description": "type",
                  "required": true,
                  "schema": {
                     "type": "string",
                     "enum": [
                        "SOFT_REMINDER",
                        "REMINDER",
                        "NOTICE_OF_DEBT_COLLECTION",
                        "DEBT_COLLECTION"
                     ]
                  }
               },
               {
                  "name": "date",
                  "in": "query",
                  "description": "yyyy-MM-dd. Defaults to today.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "includeCharge",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean",
                     "default": false
                  }
               },
               {
                  "name": "includeInterest",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean",
                     "default": false
                  }
               },
               {
                  "name": "dispatchType",
                  "in": "query",
                  "description": "dispatchType",
                  "required": true,
                  "schema": {
                     "type": "string",
                     "enum": [
                        "NETS_PRINT",
                        "EMAIL",
                        "SMS"
                     ]
                  }
               },
               {
                  "name": "smsNumber",
                  "in": "query",
                  "description": "SMS number (must be a valid Norwegian telephone number)",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/invoiceRemark/{id}": {
         "get": {
            "tags": [
               "invoiceRemark"
            ],
            "summary": "Get invoice remark by ID.",
            "operationId": "InvoiceRemark_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperInvoiceRemark"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/invoice/paymentType/{id}": {
         "get": {
            "tags": [
               "invoice/paymentType"
            ],
            "summary": "Get payment type by ID.",
            "operationId": "InvoicePaymentType_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperPaymentType"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/invoice/paymentType": {
         "get": {
            "tags": [
               "invoice/paymentType"
            ],
            "summary": "Find payment type corresponding with sent data.",
            "operationId": "InvoicePaymentType_search",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "description",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "query",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponsePaymentType"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/invoice/details/{id}": {
         "get": {
            "tags": [
               "invoice/details"
            ],
            "summary": "Get ProjectInvoiceDetails by ID.",
            "operationId": "InvoiceDetails_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperProjectInvoiceDetails"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/invoice/details": {
         "get": {
            "tags": [
               "invoice/details"
            ],
            "summary": "Find ProjectInvoiceDetails corresponding with sent data.",
            "operationId": "InvoiceDetails_search",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "invoiceDateFrom",
                  "in": "query",
                  "description": "From and including",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "invoiceDateTo",
                  "in": "query",
                  "description": "To and excluding",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseProjectInvoiceDetails"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/ledger": {
         "get": {
            "tags": [
               "ledger"
            ],
            "summary": "Get ledger (hovedbok).",
            "operationId": "Ledger_search",
            "parameters": [
               {
                  "name": "dateFrom",
                  "in": "query",
                  "description": "Format is yyyy-MM-dd (from and incl.).",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "dateTo",
                  "in": "query",
                  "description": "Format is yyyy-MM-dd (to and excl.).",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "openPostings",
                  "in": "query",
                  "description": "Deprecated",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "accountId",
                  "in": "query",
                  "description": "Element ID",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "supplierId",
                  "in": "query",
                  "description": "Element ID",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "customerId",
                  "in": "query",
                  "description": "Element ID",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "employeeId",
                  "in": "query",
                  "description": "Element ID",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "departmentId",
                  "in": "query",
                  "description": "Element ID",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "projectId",
                  "in": "query",
                  "description": "Element ID",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "productId",
                  "in": "query",
                  "description": "Element ID",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseLedgerAccount"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/ledger/openPost": {
         "get": {
            "tags": [
               "ledger"
            ],
            "summary": "Find open posts corresponding with sent data.",
            "operationId": "LedgerOpenPost_openPost",
            "parameters": [
               {
                  "name": "date",
                  "in": "query",
                  "description": "Invoice date. Format is yyyy-MM-dd (to and excl.).",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "accountId",
                  "in": "query",
                  "description": "Element ID",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "supplierId",
                  "in": "query",
                  "description": "Element ID",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "customerId",
                  "in": "query",
                  "description": "Element ID",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "employeeId",
                  "in": "query",
                  "description": "Element ID",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "departmentId",
                  "in": "query",
                  "description": "Element ID",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "projectId",
                  "in": "query",
                  "description": "Element ID",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "productId",
                  "in": "query",
                  "description": "Element ID",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseLedgerAccount"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/ledger/account/{id}": {
         "get": {
            "tags": [
               "ledger/account"
            ],
            "summary": "Get account by ID.",
            "operationId": "LedgerAccount_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperAccount"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "ledger/account"
            ],
            "summary": "Update account.",
            "operationId": "LedgerAccount_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/Account"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperAccount"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "ledger/account"
            ],
            "summary": "Delete account.",
            "operationId": "LedgerAccount_delete",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/ledger/account": {
         "get": {
            "tags": [
               "ledger/account"
            ],
            "summary": "Find accounts corresponding with sent data.",
            "operationId": "LedgerAccount_search",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "number",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "isBankAccount",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "isInactive",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "isApplicableForSupplierInvoice",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "ledgerType",
                  "in": "query",
                  "description": "Ledger type",
                  "schema": {
                     "type": "string",
                     "enum": [
                        "GENERAL",
                        "CUSTOMER",
                        "VENDOR",
                        "EMPLOYEE",
                        "ASSET"
                     ]
                  }
               },
               {
                  "name": "isBalanceAccount",
                  "in": "query",
                  "description": "Balance account",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "saftCode",
                  "in": "query",
                  "description": "SAF-T code",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseAccount"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "ledger/account"
            ],
            "summary": "Create a new account.",
            "operationId": "LedgerAccount_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/Account"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperAccount"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/ledger/account/list": {
         "put": {
            "tags": [
               "ledger/account"
            ],
            "summary": "Update multiple accounts.",
            "operationId": "LedgerAccountList_putList",
            "requestBody": {
               "description": "JSON representing updates to objects. Should have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/Account"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseAccount"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "post": {
            "tags": [
               "ledger/account"
            ],
            "summary": "Create several accounts.",
            "operationId": "LedgerAccountList_postList",
            "requestBody": {
               "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/Account"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseAccount"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "ledger/account"
            ],
            "summary": "Delete multiple accounts.",
            "operationId": "LedgerAccountList_deleteByIds",
            "parameters": [
               {
                  "name": "ids",
                  "in": "query",
                  "description": "ID of the elements",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/ledger/accountingPeriod/{id}": {
         "get": {
            "tags": [
               "ledger/accountingPeriod"
            ],
            "summary": "Get accounting period by ID.",
            "operationId": "LedgerAccountingPeriod_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperAccountingPeriod"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/ledger/accountingPeriod": {
         "get": {
            "tags": [
               "ledger/accountingPeriod"
            ],
            "summary": "Find accounting periods corresponding with sent data.",
            "operationId": "LedgerAccountingPeriod_search",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "numberFrom",
                  "in": "query",
                  "description": "From and including",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "numberTo",
                  "in": "query",
                  "description": "To and excluding",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "startFrom",
                  "in": "query",
                  "description": "From and including",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "startTo",
                  "in": "query",
                  "description": "To and excluding",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "endFrom",
                  "in": "query",
                  "description": "From and including",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "endTo",
                  "in": "query",
                  "description": "To and excluding",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "format": "int32",
                     "default": 1400
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseAccountingPeriod"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/ledger/annualAccount/{id}": {
         "get": {
            "tags": [
               "ledger/annualAccount"
            ],
            "summary": "Get annual account by ID.",
            "operationId": "LedgerAnnualAccount_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperAnnualAccount"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/ledger/annualAccount": {
         "get": {
            "tags": [
               "ledger/annualAccount"
            ],
            "summary": "Find annual accounts corresponding with sent data.",
            "operationId": "LedgerAnnualAccount_search",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "yearFrom",
                  "in": "query",
                  "description": "From and including",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "yearTo",
                  "in": "query",
                  "description": "To and excluding",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseAnnualAccount"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/ledger/closeGroup/{id}": {
         "get": {
            "tags": [
               "ledger/closeGroup"
            ],
            "summary": "Get close group by ID.",
            "operationId": "LedgerCloseGroup_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperCloseGroup"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/ledger/closeGroup": {
         "get": {
            "tags": [
               "ledger/closeGroup"
            ],
            "summary": "Find close groups corresponding with sent data.",
            "operationId": "LedgerCloseGroup_search",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "dateFrom",
                  "in": "query",
                  "description": "From and including",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "dateTo",
                  "in": "query",
                  "description": "To and excluding",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseCloseGroup"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/ledger/paymentTypeOut/{id}": {
         "get": {
            "tags": [
               "ledger/paymentTypeOut"
            ],
            "summary": "[BETA] Get payment type for outgoing payments by ID.",
            "operationId": "LedgerPaymentTypeOut_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperPaymentTypeOut"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "ledger/paymentTypeOut"
            ],
            "summary": "[BETA] Update existing payment type for outgoing payments",
            "operationId": "LedgerPaymentTypeOut_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/PaymentTypeOut"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperPaymentTypeOut"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "ledger/paymentTypeOut"
            ],
            "summary": "[BETA] Delete payment type for outgoing payments by ID.",
            "operationId": "LedgerPaymentTypeOut_delete",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/ledger/paymentTypeOut": {
         "get": {
            "tags": [
               "ledger/paymentTypeOut"
            ],
            "summary": "[BETA] Gets payment types for outgoing payments",
            "description": "This is an API endpoint for getting payment types for outgoing payments. This is equivalent to the section 'Outgoing Payments' under Accounts Settings in Tripletex. These are the payment types listed in supplier invoices, vat returns, salary payments and Tax/ENI",
            "operationId": "LedgerPaymentTypeOut_search",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "description",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "isInactive",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponsePaymentTypeOut"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "ledger/paymentTypeOut"
            ],
            "summary": "[BETA] Create new payment type for outgoing payments",
            "operationId": "LedgerPaymentTypeOut_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/PaymentTypeOut"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperPaymentTypeOut"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/ledger/paymentTypeOut/list": {
         "put": {
            "tags": [
               "ledger/paymentTypeOut"
            ],
            "summary": "[BETA] Update multiple payment types for outgoing payments at once",
            "operationId": "LedgerPaymentTypeOutList_putList",
            "requestBody": {
               "description": "JSON representing updates to objects. Should have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/PaymentTypeOut"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponsePaymentTypeOut"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "post": {
            "tags": [
               "ledger/paymentTypeOut"
            ],
            "summary": "[BETA] Create multiple payment types for outgoing payments at once",
            "operationId": "LedgerPaymentTypeOutList_postList",
            "requestBody": {
               "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/PaymentTypeOut"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponsePaymentTypeOut"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/ledger/posting/{id}": {
         "get": {
            "tags": [
               "ledger/posting"
            ],
            "summary": "Find postings by ID.",
            "operationId": "LedgerPosting_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperPosting"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/ledger/posting": {
         "get": {
            "tags": [
               "ledger/posting"
            ],
            "summary": "Find postings corresponding with sent data.",
            "operationId": "LedgerPosting_search",
            "parameters": [
               {
                  "name": "dateFrom",
                  "in": "query",
                  "description": "Format is yyyy-MM-dd (from and incl.).",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "dateTo",
                  "in": "query",
                  "description": "Format is yyyy-MM-dd (to and excl.).",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "openPostings",
                  "in": "query",
                  "description": "Deprecated",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "accountId",
                  "in": "query",
                  "description": "Element ID",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "supplierId",
                  "in": "query",
                  "description": "Element ID",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "customerId",
                  "in": "query",
                  "description": "Element ID",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "employeeId",
                  "in": "query",
                  "description": "Element ID",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "departmentId",
                  "in": "query",
                  "description": "Element ID",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "projectId",
                  "in": "query",
                  "description": "Element ID",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "productId",
                  "in": "query",
                  "description": "Element ID",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "accountNumberFrom",
                  "in": "query",
                  "description": "Element ID",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "accountNumberTo",
                  "in": "query",
                  "description": "Element ID",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "type",
                  "in": "query",
                  "description": "Element ID",
                  "schema": {
                     "type": "string",
                     "enum": [
                        "INCOMING_PAYMENT",
                        "INCOMING_PAYMENT_OPPOSITE",
                        "INVOICE_EXPENSE",
                        "OUTGOING_INVOICE_CUSTOMER_POSTING",
                        "WAGE"
                     ]
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponsePosting"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/ledger/posting/openPost": {
         "get": {
            "tags": [
               "ledger/posting"
            ],
            "summary": "Find open posts corresponding with sent data.",
            "operationId": "LedgerPostingOpenPost_openPost",
            "parameters": [
               {
                  "name": "date",
                  "in": "query",
                  "description": "Invoice date. Format is yyyy-MM-dd (to and excl.).",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "accountId",
                  "in": "query",
                  "description": "Element ID",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "supplierId",
                  "in": "query",
                  "description": "Element ID",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "customerId",
                  "in": "query",
                  "description": "Element ID",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "employeeId",
                  "in": "query",
                  "description": "Element ID",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "departmentId",
                  "in": "query",
                  "description": "Element ID",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "projectId",
                  "in": "query",
                  "description": "Element ID",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "productId",
                  "in": "query",
                  "description": "Element ID",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "accountNumberFrom",
                  "in": "query",
                  "description": "Element ID",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "accountNumberTo",
                  "in": "query",
                  "description": "Element ID",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponsePosting"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/ledger/vatType/{id}": {
         "get": {
            "tags": [
               "ledger/vatType"
            ],
            "summary": "Get vat type by ID.",
            "operationId": "LedgerVatType_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperVatType"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/ledger/vatType": {
         "get": {
            "tags": [
               "ledger/vatType"
            ],
            "summary": "Find vat types corresponding with sent data.",
            "operationId": "LedgerVatType_search",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "number",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "typeOfVat",
                  "in": "query",
                  "description": "Type of VAT",
                  "schema": {
                     "type": "string",
                     "enum": [
                        "OUTGOING",
                        "INCOMING",
                        "INCOMING_INVOICE",
                        "PROJECT"
                     ]
                  }
               },
               {
                  "name": "vatDate",
                  "in": "query",
                  "description": "yyyy-MM-dd. Defaults to today. Note that this is only used in combination with typeOfVat-parameter. Only valid vatTypes on the given date are returned.",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "shouldIncludeSpecificationTypes",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseVatType"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/ledger/vatType/createRelativeVatType": {
         "put": {
            "tags": [
               "ledger/vatType"
            ],
            "summary": "Create a new relative VAT Type. These are used if the company has 'forholdsmessig fradrag for inngående MVA'.",
            "operationId": "LedgerVatTypeCreateRelativeVatType_createRelativeVatType",
            "parameters": [
               {
                  "name": "name",
                  "in": "query",
                  "description": "VAT type name, max 8 characters.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "vatTypeId",
                  "in": "query",
                  "description": "VAT type ID. The relative VAT type will behave like this VAT type, except for the basis for calculating the VAT deduction, which is decided by the basis percentage.",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "percentage",
                  "in": "query",
                  "description": "Basis percentage. This percentage will be multiplied with the transaction amount to find the amount that will be the basis for calculating the deduction amount.",
                  "required": true,
                  "schema": {
                     "type": "number"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperVatType"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/ledger/voucher/openingBalance": {
         "get": {
            "tags": [
               "ledger/voucher/openingBalance"
            ],
            "summary": "[BETA] Get the voucher for the opening balance.",
            "operationId": "LedgerVoucherOpeningBalance_get",
            "parameters": [
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperVoucher"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "ledger/voucher/openingBalance"
            ],
            "summary": "[BETA] Add an opening balance on the given date.  All movements before this date will be 'zeroed out' in a separate correction voucher. The opening balance must have the first day of a month as the date, and it's also recommended to have the first day of the year as the date. If the postings provided don't balance the voucher, the difference will automatically be posted to a help account",
            "operationId": "LedgerVoucherOpeningBalance_post",
            "parameters": [
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string",
                     "default": "*"
                  }
               }
            ],
            "requestBody": {
               "description": "dto",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/OpeningBalance"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperVoucher"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "ledger/voucher/openingBalance"
            ],
            "summary": "[BETA] Delete the opening balance. The correction voucher will also be deleted",
            "operationId": "LedgerVoucherOpeningBalance_delete",
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/ledger/voucher/openingBalance/>correctionVoucher": {
         "get": {
            "tags": [
               "ledger/voucher/openingBalance"
            ],
            "summary": "[BETA] Get the correction voucher for the opening balance.",
            "operationId": "LedgerVoucherOpeningBalanceCorrectionVoucher_correctionVoucher",
            "parameters": [
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperVoucher"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/ledger/voucher/{id}": {
         "get": {
            "tags": [
               "ledger/voucher"
            ],
            "summary": "Get voucher by ID.",
            "operationId": "LedgerVoucher_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperVoucher"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "ledger/voucher"
            ],
            "summary": "Update voucher. Postings with guiRow==0 will be deleted and regenerated.",
            "operationId": "LedgerVoucher_put",
            "parameters": [
               {
                  "name": "sendToLedger",
                  "in": "query",
                  "description": "Should the voucher be sent to ledger? Requires the \"Advanced Voucher\" permission.",
                  "schema": {
                     "type": "boolean",
                     "default": true
                  }
               },
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/Voucher"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperVoucher"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "ledger/voucher"
            ],
            "summary": "Delete voucher by ID.",
            "operationId": "LedgerVoucher_delete",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/ledger/voucher/{id}/:reverse": {
         "put": {
            "tags": [
               "ledger/voucher"
            ],
            "summary": "Reverses the voucher, and returns the reversed voucher. Supports reversing most voucher types, except salary transactions.",
            "operationId": "LedgerVoucherReverse_reverse",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of voucher that should be reversed.",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "date",
                  "in": "query",
                  "description": "Reverse voucher date",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperVoucher"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/ledger/voucher": {
         "get": {
            "tags": [
               "ledger/voucher"
            ],
            "summary": "Find vouchers corresponding with sent data.",
            "operationId": "LedgerVoucher_search",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "number",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "numberFrom",
                  "in": "query",
                  "description": "From and including",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "numberTo",
                  "in": "query",
                  "description": "To and excluding",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "typeId",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "dateFrom",
                  "in": "query",
                  "description": "From and including",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "dateTo",
                  "in": "query",
                  "description": "To and excluding",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/VoucherSearchResponse"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "ledger/voucher"
            ],
            "summary": "Add new voucher. IMPORTANT: Also creates postings. Only the gross amounts will be used",
            "operationId": "LedgerVoucher_post",
            "parameters": [
               {
                  "name": "sendToLedger",
                  "in": "query",
                  "description": "Should the voucher be sent to ledger? Requires the \"Advanced Voucher\" permission.",
                  "schema": {
                     "type": "boolean",
                     "default": true
                  }
               }
            ],
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/Voucher"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperVoucher"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/ledger/voucher/{id}/options": {
         "get": {
            "tags": [
               "ledger/voucher"
            ],
            "summary": "Returns a data structure containing meta information about operations that are available for this voucher. Currently only implemented for DELETE: It is possible to check if the voucher is deletable.",
            "operationId": "LedgerVoucherOptions_options",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperVoucherOptions"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/ledger/voucher/>nonPosted": {
         "get": {
            "tags": [
               "ledger/voucher"
            ],
            "summary": "Find non-posted vouchers.",
            "operationId": "LedgerVoucherNonPosted_nonPosted",
            "parameters": [
               {
                  "name": "dateFrom",
                  "in": "query",
                  "description": "From and including",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "dateTo",
                  "in": "query",
                  "description": "To and excluding",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "includeNonApproved",
                  "in": "query",
                  "description": "Include non-approved vouchers in the result.",
                  "required": true,
                  "schema": {
                     "type": "boolean",
                     "default": false
                  }
               },
               {
                  "name": "changedSince",
                  "in": "query",
                  "description": "Only return elements that have changed since this date and time",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseVoucher"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/ledger/voucher/>voucherReception": {
         "get": {
            "tags": [
               "ledger/voucher"
            ],
            "summary": "Find vouchers in voucher reception.",
            "operationId": "LedgerVoucherVoucherReception_voucherReception",
            "parameters": [
               {
                  "name": "dateFrom",
                  "in": "query",
                  "description": "From and including",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "dateTo",
                  "in": "query",
                  "description": "To and excluding",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "searchText",
                  "in": "query",
                  "description": "Search",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseVoucher"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/ledger/voucher/>externalVoucherNumber": {
         "get": {
            "tags": [
               "ledger/voucher"
            ],
            "summary": "Find vouchers based on the external voucher number.",
            "operationId": "LedgerVoucherExternalVoucherNumber_externalVoucherNumber",
            "parameters": [
               {
                  "name": "externalVoucherNumber",
                  "in": "query",
                  "description": "The external voucher number, when voucher is created from import.",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseVoucher"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/ledger/voucher/{voucherId}/pdf/{fileName}": {
         "post": {
            "tags": [
               "ledger/voucher"
            ],
            "summary": "[DEPRECATED] Use POST ledger/voucher/{voucherId}/attachment instead.",
            "operationId": "LedgerVoucherPdf_uploadPdf",
            "parameters": [
               {
                  "name": "voucherId",
                  "in": "path",
                  "description": "Voucher ID to upload PDF to.",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fileName",
                  "in": "path",
                  "description": "File name to store the pdf under. Will not be the same as the filename on the file returned.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "multipart/form-data": {
                     "schema": {
                        "required": [
                           "file"
                        ],
                        "properties": {
                           "file": {
                              "type": "string",
                              "description": "The file",
                              "format": "binary"
                           }
                        }
                     }
                  }
               },
               "required": true
            },
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/ledger/voucher/{id}/:sendToInbox": {
         "put": {
            "tags": [
               "ledger/voucher"
            ],
            "summary": "Send voucher to inbox.",
            "operationId": "LedgerVoucherSendToInbox_sendToInbox",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of voucher that should be sent to inbox.",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "version",
                  "in": "query",
                  "description": "Version of voucher that should be sent to inbox.",
                  "schema": {
                     "minimum": 0,
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "comment",
                  "in": "query",
                  "description": "Description of why the voucher was rejected. This parameter is only used if the approval feature is enabled.",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperVoucher"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/ledger/voucher/importGbat10": {
         "post": {
            "tags": [
               "ledger/voucher"
            ],
            "summary": "Import GBAT10. Send as multipart form.",
            "operationId": "LedgerVoucherImportGbat10_importGbat10",
            "requestBody": {
               "content": {
                  "multipart/form-data": {
                     "schema": {
                        "required": [
                           "file",
                           "generateVatPostings"
                        ],
                        "properties": {
                           "generateVatPostings": {
                              "type": "boolean",
                              "description": "If the import should generate VAT postings"
                           },
                           "file": {
                              "type": "string",
                              "description": "The file",
                              "format": "binary"
                           },
                           "encoding": {
                              "type": "string",
                              "description": "The file encoding",
                              "default": "utf-8"
                           }
                        }
                     }
                  }
               },
               "required": true
            },
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/ledger/voucher/importDocument": {
         "post": {
            "tags": [
               "ledger/voucher"
            ],
            "summary": "Upload a document to create one or more vouchers. Valid document formats are PDF, PNG, JPEG and TIFF. Send as multipart form.",
            "operationId": "LedgerVoucherImportDocument_importDocument",
            "parameters": [
               {
                  "name": "split",
                  "in": "query",
                  "description": "If the document consists of several pages, should the document be split into one voucher per page?",
                  "schema": {
                     "type": "boolean",
                     "default": false
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "multipart/form-data": {
                     "schema": {
                        "required": [
                           "file"
                        ],
                        "properties": {
                           "file": {
                              "type": "string",
                              "description": "The file",
                              "format": "binary"
                           },
                           "description": {
                              "type": "string",
                              "description": "Optional description to use for the voucher(s). If omitted the file name will be used."
                           }
                        }
                     }
                  }
               },
               "required": true
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseVoucher"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/ledger/voucher/list": {
         "put": {
            "tags": [
               "ledger/voucher"
            ],
            "summary": "Update multiple vouchers. Postings with guiRow==0 will be deleted and regenerated.",
            "operationId": "LedgerVoucherList_putList",
            "parameters": [
               {
                  "name": "sendToLedger",
                  "in": "query",
                  "description": "Should the voucher be sent to ledger? Requires the \"Advanced Voucher\" permission.",
                  "schema": {
                     "type": "boolean",
                     "default": true
                  }
               }
            ],
            "requestBody": {
               "description": "JSON representing updates to objects. Should have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/Voucher"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseVoucher"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/ledger/voucher/{voucherId}/attachment": {
         "post": {
            "tags": [
               "ledger/voucher"
            ],
            "summary": "Upload attachment to voucher. If the voucher already has an attachment the content will be appended to the existing attachment as new PDF page(s). Valid document formats are PDF, PNG, JPEG and TIFF. Non PDF formats will be converted to PDF. Send as multipart form.",
            "operationId": "LedgerVoucherAttachment_uploadAttachment",
            "parameters": [
               {
                  "name": "voucherId",
                  "in": "path",
                  "description": "Voucher ID to upload attachment to.",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "multipart/form-data": {
                     "schema": {
                        "required": [
                           "file"
                        ],
                        "properties": {
                           "file": {
                              "type": "string",
                              "description": "The file",
                              "format": "binary"
                           }
                        }
                     }
                  }
               },
               "required": true
            },
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "delete": {
            "tags": [
               "ledger/voucher"
            ],
            "summary": "Delete attachment.",
            "operationId": "LedgerVoucherAttachment_deleteAttachment",
            "parameters": [
               {
                  "name": "voucherId",
                  "in": "path",
                  "description": "ID of voucher containing the attachment to delete.",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "version",
                  "in": "query",
                  "description": "Version of voucher containing the attachment to delete.",
                  "schema": {
                     "minimum": 0,
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "sendToInbox",
                  "in": "query",
                  "description": "Should the attachment be sent to inbox rather than deleted?",
                  "schema": {
                     "type": "boolean",
                     "default": false
                  }
               },
               {
                  "name": "split",
                  "in": "query",
                  "description": "If sendToInbox is true, should the attachment be split into one voucher per page?",
                  "schema": {
                     "type": "boolean",
                     "default": false
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/ledger/voucher/{id}/:sendToLedger": {
         "put": {
            "tags": [
               "ledger/voucher"
            ],
            "summary": "Send voucher to ledger.",
            "operationId": "LedgerVoucherSendToLedger_sendToLedger",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of voucher that should be sent to ledger.",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "version",
                  "in": "query",
                  "description": "Version of voucher that should be sent to ledger.",
                  "schema": {
                     "minimum": 0,
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "number",
                  "in": "query",
                  "description": "Voucher number to use. If omitted or 0 the system will assign the number.",
                  "schema": {
                     "minimum": 0,
                     "type": "integer",
                     "format": "int32",
                     "default": 0
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperVoucher"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/ledger/voucher/historical/historical": {
         "post": {
            "tags": [
               "ledger/voucher/historical"
            ],
            "summary": "API endpoint for creating historical vouchers. These are vouchers created outside Tripletex, and should be from closed accounting years. The intended usage is to get access to historical transcations in Tripletex. Also creates postings. All amount fields in postings will be used. VAT postings must be included, these are not generated automatically like they are for normal vouchers in Tripletex. Requires the \\\"All vouchers\\\" and \\\"Advanced Voucher\\\" permissions.",
            "operationId": "LedgerVoucherHistoricalHistorical_postHistorical",
            "parameters": [
               {
                  "name": "comment",
                  "in": "query",
                  "description": "Import comment, include the name and version of the source system.",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "useCustomNumberSeries",
                  "in": "query",
                  "description": "Use custom number series (true), or use default number series for historical vouchers (false).",
                  "schema": {
                     "type": "boolean"
                  }
               }
            ],
            "requestBody": {
               "description": "List of vouchers and related postings to import. Max 500.  ",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/HistoricalVoucher"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseHistoricalVoucher"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/ledger/voucher/historical/:reverseHistoricalVouchers": {
         "put": {
            "tags": [
               "ledger/voucher/historical"
            ],
            "summary": "[BETA] Deletes all historical vouchers. Requires the \"All vouchers\" and \"Advanced Voucher\" permissions.",
            "operationId": "LedgerVoucherHistoricalReverseHistoricalVouchers_reverseHistoricalVouchers",
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/ledger/voucher/historical/:closePostings": {
         "put": {
            "tags": [
               "ledger/voucher/historical"
            ],
            "summary": "[BETA] Close postings.",
            "operationId": "LedgerVoucherHistoricalClosePostings_closePostings",
            "parameters": [
               {
                  "name": "postingIds",
                  "in": "query",
                  "description": "[Deprecated] List of Posting IDs to close separated by comma. The postings should have the same customer, supplier or employee. The sum of amount for all postings MUST be 0.0, otherwise an exception will be thrown.",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "description": "List of Posting IDs to close separated by comma. The postings should have the same customer, supplier or employee. The sum of amount for all postings MUST be 0.0, otherwise an exception will be thrown.",
               "content": {
                  "*/*": {
                     "schema": {
                        "type": "string"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/ledger/voucher/historical/employee": {
         "post": {
            "tags": [
               "ledger/voucher/historical"
            ],
            "summary": "[BETA] Create one employee, based on import from external system. Validation is less strict, ie. employee department isn't required.",
            "operationId": "LedgerVoucherHistoricalEmployee_postEmployee",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/Employee"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperEmployee"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/ledger/voucher/historical/{voucherId}/attachment": {
         "post": {
            "tags": [
               "ledger/voucher/historical"
            ],
            "summary": "Upload attachment to voucher. If the voucher already has an attachment the content will be appended to the existing attachment as new PDF page(s). Valid document formats are PDF, PNG, JPEG and TIFF. Non PDF formats will be converted to PDF. Send as multipart form.",
            "operationId": "LedgerVoucherHistoricalAttachment_uploadAttachment",
            "parameters": [
               {
                  "name": "voucherId",
                  "in": "path",
                  "description": "Voucher ID to upload attachment to.",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "multipart/form-data": {
                     "schema": {
                        "required": [
                           "file"
                        ],
                        "properties": {
                           "file": {
                              "type": "string",
                              "description": "The file",
                              "format": "binary"
                           }
                        }
                     }
                  }
               },
               "required": true
            },
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/ledger/voucherType/{id}": {
         "get": {
            "tags": [
               "ledger/voucherType"
            ],
            "summary": "Get voucher type by ID.",
            "operationId": "LedgerVoucherType_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperVoucherType"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/ledger/voucherType": {
         "get": {
            "tags": [
               "ledger/voucherType"
            ],
            "summary": "Find voucher types corresponding with sent data.",
            "operationId": "LedgerVoucherType_search",
            "parameters": [
               {
                  "name": "name",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseVoucherType"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/municipality/query": {
         "get": {
            "tags": [
               "municipality"
            ],
            "summary": "[BETA] Wildcard search.",
            "operationId": "MunicipalityQuery_query",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "query",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string",
                     "default": "id, name, number"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseMunicipality"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/municipality": {
         "get": {
            "tags": [
               "municipality"
            ],
            "summary": "Get municipalities.",
            "operationId": "Municipality_search",
            "parameters": [
               {
                  "name": "includePayrollTaxZones",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean",
                     "default": true
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseMunicipality"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/order/{id}": {
         "get": {
            "tags": [
               "order"
            ],
            "summary": "Get order by ID.",
            "operationId": "Order_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperOrder"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "order"
            ],
            "summary": "Update order.",
            "operationId": "Order_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "updateLinesAndGroups",
                  "in": "query",
                  "description": "Should order lines and order groups be saved and not included lines/groups be removed? Only applies if non null list of order lines or order groups is set.",
                  "schema": {
                     "type": "boolean",
                     "default": false
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/Order"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperOrder"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "order"
            ],
            "summary": "Delete order.",
            "operationId": "Order_delete",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/order": {
         "get": {
            "tags": [
               "order"
            ],
            "summary": "Find orders corresponding with sent data.",
            "operationId": "Order_search",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "number",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "customerId",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "orderDateFrom",
                  "in": "query",
                  "description": "From and including",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "orderDateTo",
                  "in": "query",
                  "description": "To and excluding",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "isClosed",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "isSubscription",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseOrder"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "order"
            ],
            "summary": "Create order.",
            "operationId": "Order_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/Order"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperOrder"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/order/{id}/:attach": {
         "put": {
            "tags": [
               "order"
            ],
            "summary": "Attach document to specified order ID.",
            "operationId": "OrderAttach_attach",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "multipart/form-data": {
                     "schema": {
                        "required": [
                           "file"
                        ],
                        "properties": {
                           "file": {
                              "type": "string",
                              "description": "The file",
                              "format": "binary"
                           }
                        }
                     }
                  }
               },
               "required": true
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperDocumentArchive"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/order/list": {
         "post": {
            "tags": [
               "order"
            ],
            "summary": "[BETA] Create multiple Orders with OrderLines. Max 100 at a time.",
            "operationId": "OrderList_postList",
            "requestBody": {
               "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/Order"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseOrder"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/order/{id}/:invoice": {
         "put": {
            "tags": [
               "order"
            ],
            "summary": "Create new invoice from order.",
            "operationId": "OrderInvoice_invoice",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of order to invoice.",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "invoiceDate",
                  "in": "query",
                  "description": "The invoice date",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "sendToCustomer",
                  "in": "query",
                  "description": "Send invoice to customer",
                  "schema": {
                     "type": "boolean",
                     "default": true
                  }
               },
               {
                  "name": "sendType",
                  "in": "query",
                  "description": "Send type used for sending the invoice",
                  "schema": {
                     "type": "string",
                     "enum": [
                        "EMAIL",
                        "EHF",
                        "AVTALEGIRO",
                        "EFAKTURA",
                        "VIPPS",
                        "PAPER",
                        "MANUAL"
                     ]
                  }
               },
               {
                  "name": "paymentTypeId",
                  "in": "query",
                  "description": "Payment type to register prepayment of the invoice. paymentTypeId and paidAmount are optional, but both must be provided if the invoice has already been paid. The payment type must be related to an account with the same currency as the invoice.",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "paidAmount",
                  "in": "query",
                  "description": "Paid amount to register prepayment of the invoice, in invoice currency. paymentTypeId and paidAmount are optional, but both must be provided if the invoice has already been paid. This amount is in the invoice currency.",
                  "schema": {
                     "type": "number"
                  }
               },
               {
                  "name": "paidAmountAccountCurrency",
                  "in": "query",
                  "description": "Amount paid in payment type currency",
                  "schema": {
                     "type": "number"
                  }
               },
               {
                  "name": "paymentTypeIdRestAmount",
                  "in": "query",
                  "description": "Payment type of rest amount. It is possible to have two prepaid payments when invoicing. If paymentTypeIdRestAmount > 0, this second payment will be calculated as invoice amount - paidAmount",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "paidAmountAccountCurrencyRest",
                  "in": "query",
                  "description": "Amount rest in payment type currency",
                  "schema": {
                     "type": "number"
                  }
               },
               {
                  "name": "createOnAccount",
                  "in": "query",
                  "description": "Create on account(a konto)",
                  "schema": {
                     "type": "string",
                     "enum": [
                        "NONE",
                        "WITH_VAT",
                        "WITHOUT_VAT"
                     ]
                  }
               },
               {
                  "name": "amountOnAccount",
                  "in": "query",
                  "description": "Amount on account",
                  "schema": {
                     "type": "number",
                     "default": 0
                  }
               },
               {
                  "name": "onAccountComment",
                  "in": "query",
                  "description": "On account comment",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "createBackorder",
                  "in": "query",
                  "description": "Create a backorder for this order, available only for pilot users",
                  "schema": {
                     "type": "boolean",
                     "default": false
                  }
               },
               {
                  "name": "invoiceIdIfIsCreditNote",
                  "in": "query",
                  "description": "Id of the invoice a credit note refers to",
                  "schema": {
                     "type": "integer",
                     "format": "int32",
                     "default": 0
                  }
               },
               {
                  "name": "overrideEmailAddress",
                  "in": "query",
                  "description": "Will override email address if sendType = EMAIL",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperInvoice"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/order/:invoiceMultipleOrders": {
         "put": {
            "tags": [
               "order"
            ],
            "summary": "[BETA] Charges a single customer invoice from multiple orders. The orders must be to the same customer, currency, due date, receiver email, attn. and smsNotificationNumber",
            "operationId": "OrderInvoiceMultipleOrders_invoiceMultipleOrders",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "List of Order IDs - to the same customer, separated by comma.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "invoiceDate",
                  "in": "query",
                  "description": "The invoice date",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "sendToCustomer",
                  "in": "query",
                  "description": "Send invoice to customer",
                  "schema": {
                     "type": "boolean",
                     "default": true
                  }
               },
               {
                  "name": "createBackorders",
                  "in": "query",
                  "description": "Create a backorder for all any orders that delivers less than ordered amount",
                  "schema": {
                     "type": "boolean",
                     "default": false
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperInvoice"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/order/{id}/:approveSubscriptionInvoice": {
         "put": {
            "tags": [
               "order"
            ],
            "summary": "To create a subscription invoice, first create a order with the subscription enabled, then approve it with this method. This approves the order for subscription invoicing.",
            "operationId": "OrderApproveSubscriptionInvoice_approveSubscriptionInvoice",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of order to approve for subscription invoicing.",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "invoiceDate",
                  "in": "query",
                  "description": "The approval date for the subscription.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperInvoice"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/order/{id}/:unApproveSubscriptionInvoice": {
         "put": {
            "tags": [
               "order"
            ],
            "summary": "Unapproves the order for subscription invoicing.",
            "operationId": "OrderUnApproveSubscriptionInvoice_unApproveSubscriptionInvoice",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of order to unapprove for subscription invoicing.",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/order/orderGroup/{id}": {
         "get": {
            "tags": [
               "order/orderGroup"
            ],
            "summary": "Get orderGroup by ID. A orderGroup is a way to group orderLines, and add comments and subtotals",
            "operationId": "OrderOrderGroup_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperOrderGroup"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "delete": {
            "tags": [
               "order/orderGroup"
            ],
            "summary": "Delete orderGroup by ID.",
            "operationId": "OrderOrderGroup_delete",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/order/orderGroup": {
         "get": {
            "tags": [
               "order/orderGroup"
            ],
            "summary": "Find orderGroups corresponding with sent data.",
            "operationId": "OrderOrderGroup_search",
            "parameters": [
               {
                  "name": "ids",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "orderIds",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseOrderGroup"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "order/orderGroup"
            ],
            "summary": "[Beta] Put orderGroup.",
            "operationId": "OrderOrderGroup_put",
            "parameters": [
               {
                  "name": "OrderLineIds",
                  "in": "query",
                  "description": "Deprecated. Put order lines in the dto instead.",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "removeExistingOrderLines",
                  "in": "query",
                  "description": "Deprecated. Should existing orderLines be removed from this orderGroup. This will always happen if orderLineIds is not empty.",
                  "schema": {
                     "type": "boolean",
                     "default": false
                  }
               }
            ],
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/OrderGroup"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperOrderGroup"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "post": {
            "tags": [
               "order/orderGroup"
            ],
            "summary": "[Beta] Post orderGroup.",
            "operationId": "OrderOrderGroup_post",
            "parameters": [
               {
                  "name": "orderLineIds",
                  "in": "query",
                  "description": "Deprecated. Put order lines in the dto instead.",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/OrderGroup"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperOrderGroup"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/order/orderline/{id}": {
         "get": {
            "tags": [
               "order/orderline"
            ],
            "summary": "Get order line by ID.",
            "operationId": "OrderOrderline_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperOrderLine"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "order/orderline"
            ],
            "summary": "[BETA] Put order line",
            "operationId": "OrderOrderline_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/OrderLine"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperOrderLine"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "order/orderline"
            ],
            "summary": "[BETA] Delete order line by ID.",
            "operationId": "OrderOrderline_delete",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/order/orderline": {
         "post": {
            "tags": [
               "order/orderline"
            ],
            "summary": "Create order line. When creating several order lines, use /list for better performance.",
            "operationId": "OrderOrderline_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/OrderLine"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperOrderLine"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/order/orderline/list": {
         "post": {
            "tags": [
               "order/orderline"
            ],
            "summary": "Create multiple order lines.",
            "operationId": "OrderOrderlineList_postList",
            "requestBody": {
               "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/OrderLine"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseOrderLine"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/product/external/{id}": {
         "get": {
            "tags": [
               "product/external"
            ],
            "summary": "[BETA] Get external product by ID.",
            "operationId": "ProductExternal_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperExternalProduct"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/product/external": {
         "get": {
            "tags": [
               "product/external"
            ],
            "summary": "[BETA] Find external products corresponding with sent data. The sorting-field is not in use on this endpoint.",
            "operationId": "ProductExternal_search",
            "parameters": [
               {
                  "name": "name",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "wholesaler",
                  "in": "query",
                  "description": "Wholesaler",
                  "schema": {
                     "type": "string",
                     "enum": [
                        "AHLSELL",
                        "BROEDRENE_DAHL",
                        "ELEKTROSKANDIA",
                        "HEIDENREICH",
                        "ONNINEN",
                        "SONEPAR",
                        "SOLAR",
                        "BERGAARD_AMUNDSEN",
                        "BERGAARD_AMUNDSEN_STAVANGER",
                        "SORLANDET_ELEKTRO",
                        "ETMAN_DISTRIBUSJON",
                        "ETM_OST",
                        "CENIKA",
                        "EP_ENGROS",
                        "BETEK",
                        "DGROUP",
                        "FAGERHULT",
                        "GLAMOX",
                        "SCHNEIDER",
                        "STOKKAN",
                        "WURTH",
                        "ELEKTROIMPORTOEREN",
                        "THERMOFLOOR",
                        "LYSKOMPONENTER",
                        "NORDESIGN"
                     ]
                  }
               },
               {
                  "name": "organizationNumber",
                  "in": "query",
                  "description": "Wholesaler organization number. Mandatory if Wholesaler is not selected. If Wholesaler is selected, this field is ignored.",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "elNumber",
                  "in": "query",
                  "description": "List of valid el numbers",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "nrfNumber",
                  "in": "query",
                  "description": "List of valid nrf numbers",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "isInactive",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseExternalProduct"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/product/{id}": {
         "get": {
            "tags": [
               "product"
            ],
            "summary": "Get product by ID.",
            "operationId": "Product_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperProduct"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "product"
            ],
            "summary": "Update product.",
            "operationId": "Product_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/Product"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperProduct"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "product"
            ],
            "summary": "[BETA] Delete product.",
            "operationId": "Product_delete",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/product": {
         "get": {
            "tags": [
               "product"
            ],
            "summary": "Find products corresponding with sent data.",
            "operationId": "Product_search",
            "parameters": [
               {
                  "name": "number",
                  "in": "query",
                  "description": "DEPRECATED. List of product numbers (Integer only)",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "ids",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "productNumber",
                  "in": "query",
                  "description": "List of valid product numbers",
                  "style": "form",
                  "explode": true,
                  "schema": {
                     "type": "array",
                     "items": {
                        "type": "string"
                     }
                  }
               },
               {
                  "name": "name",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "ean",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "isInactive",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "isStockItem",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "isSupplierProduct",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "supplierId",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "currencyId",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "vatTypeId",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "productUnitId",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "departmentId",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "accountId",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "costExcludingVatCurrencyFrom",
                  "in": "query",
                  "description": "From and including",
                  "schema": {
                     "type": "number"
                  }
               },
               {
                  "name": "costExcludingVatCurrencyTo",
                  "in": "query",
                  "description": "To and excluding",
                  "schema": {
                     "type": "number"
                  }
               },
               {
                  "name": "priceExcludingVatCurrencyFrom",
                  "in": "query",
                  "description": "From and including",
                  "schema": {
                     "type": "number"
                  }
               },
               {
                  "name": "priceExcludingVatCurrencyTo",
                  "in": "query",
                  "description": "To and excluding",
                  "schema": {
                     "type": "number"
                  }
               },
               {
                  "name": "priceIncludingVatCurrencyFrom",
                  "in": "query",
                  "description": "From and including",
                  "schema": {
                     "type": "number"
                  }
               },
               {
                  "name": "priceIncludingVatCurrencyTo",
                  "in": "query",
                  "description": "To and excluding",
                  "schema": {
                     "type": "number"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseProduct"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "product"
            ],
            "summary": "Create new product.",
            "operationId": "Product_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/Product"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperProduct"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/product/list": {
         "put": {
            "tags": [
               "product"
            ],
            "summary": "[BETA] Update a list of products.",
            "operationId": "ProductList_putList",
            "requestBody": {
               "description": "JSON representing updates to objects. Should have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/Product"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseProduct"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "post": {
            "tags": [
               "product"
            ],
            "summary": "[BETA] Add multiple products.",
            "operationId": "ProductList_postList",
            "requestBody": {
               "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/Product"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseProduct"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/product/{id}/image": {
         "post": {
            "tags": [
               "product"
            ],
            "summary": "[BETA] Upload image to Product. Existing image on product will be replaced if exists",
            "operationId": "ProductImage_uploadImage",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Product ID to upload image to.",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "multipart/form-data": {
                     "schema": {
                        "required": [
                           "file"
                        ],
                        "properties": {
                           "file": {
                              "type": "string",
                              "description": "The file",
                              "format": "binary"
                           }
                        }
                     }
                  }
               },
               "required": true
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperProduct"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "delete": {
            "tags": [
               "product"
            ],
            "summary": "[BETA] Delete image.",
            "operationId": "ProductImage_deleteImage",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of Product containing the image to delete.",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/product/supplierProduct/{id}": {
         "get": {
            "tags": [
               "product/supplierProduct"
            ],
            "summary": "Get supplierProduct by ID.",
            "operationId": "ProductSupplierProduct_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperSupplierProduct"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "product/supplierProduct"
            ],
            "summary": "Update supplierProduct.",
            "operationId": "ProductSupplierProduct_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/SupplierProduct"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperSupplierProduct"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "product/supplierProduct"
            ],
            "summary": "[BETA] Delete supplierProduct.",
            "operationId": "ProductSupplierProduct_delete",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/product/supplierProduct": {
         "get": {
            "tags": [
               "product/supplierProduct"
            ],
            "summary": "Find products corresponding with sent data.",
            "operationId": "ProductSupplierProduct_search",
            "parameters": [
               {
                  "name": "productId",
                  "in": "query",
                  "description": "Id of product to find supplier products for.",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "vendorId",
                  "in": "query",
                  "description": "Id of vendor to find supplier products for.",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "query",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "isInactive",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "productGroupId",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string",
                     "default": "id, name, number"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseSupplierProduct"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "product/supplierProduct"
            ],
            "summary": "Create new supplierProduct.",
            "operationId": "ProductSupplierProduct_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/SupplierProduct"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperSupplierProduct"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/product/supplierProduct/list": {
         "put": {
            "tags": [
               "product/supplierProduct"
            ],
            "summary": "[BETA] Update a list of supplierProduct.",
            "operationId": "ProductSupplierProductList_putList",
            "requestBody": {
               "description": "JSON representing updates to objects. Should have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/SupplierProduct"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseSupplierProduct"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "post": {
            "tags": [
               "product/supplierProduct"
            ],
            "summary": "Create list of new supplierProduct.",
            "operationId": "ProductSupplierProductList_postList",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/SupplierProduct"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseSupplierProduct"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/product/discountGroup/{id}": {
         "get": {
            "tags": [
               "product/discountGroup"
            ],
            "summary": "Get discount group by ID.",
            "operationId": "ProductDiscountGroup_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperDiscountGroup"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/product/discountGroup": {
         "get": {
            "tags": [
               "product/discountGroup"
            ],
            "summary": "Find discount groups corresponding with sent data.",
            "operationId": "ProductDiscountGroup_search",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "name",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "number",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseDiscountGroup"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/product/inventoryLocation/{id}": {
         "get": {
            "tags": [
               "product/inventoryLocation"
            ],
            "summary": "Get inventory location by ID. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
            "operationId": "ProductInventoryLocation_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperProductInventoryLocation"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "product/inventoryLocation"
            ],
            "summary": "[BETA] Update product inventory location. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
            "operationId": "ProductInventoryLocation_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/ProductInventoryLocation"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperProductInventoryLocation"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "product/inventoryLocation"
            ],
            "summary": "[BETA] Delete product inventory location. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
            "operationId": "ProductInventoryLocation_delete",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/product/inventoryLocation": {
         "get": {
            "tags": [
               "product/inventoryLocation"
            ],
            "summary": "[BETA] Find inventory locations by product ID. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
            "operationId": "ProductInventoryLocation_search",
            "parameters": [
               {
                  "name": "productId",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "inventoryId",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "isMainLocation",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseProductInventoryLocation"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "product/inventoryLocation"
            ],
            "summary": "[BETA] Create new product inventory location. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
            "operationId": "ProductInventoryLocation_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/ProductInventoryLocation"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperProductInventoryLocation"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/product/inventoryLocation/list": {
         "put": {
            "tags": [
               "product/inventoryLocation"
            ],
            "summary": "[BETA] Update multiple product inventory locations. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
            "operationId": "ProductInventoryLocationList_putList",
            "requestBody": {
               "description": "JSON representing updates to objects. Should have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/ProductInventoryLocation"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseProductInventoryLocation"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "post": {
            "tags": [
               "product/inventoryLocation"
            ],
            "summary": "[BETA] Add multiple product inventory locations. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
            "operationId": "ProductInventoryLocationList_postList",
            "requestBody": {
               "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/ProductInventoryLocation"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseProductInventoryLocation"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/product/logisticsSettings": {
         "get": {
            "tags": [
               "product/logisticsSettings"
            ],
            "summary": "[BETA] Get logistics settings of logged in company.",
            "operationId": "ProductLogisticsSettings_get",
            "parameters": [
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperLogisticsSettings"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "product/logisticsSettings"
            ],
            "summary": "[BETA] Update logistics settings of logged in company.",
            "operationId": "ProductLogisticsSettings_put",
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/LogisticsSettings"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperLogisticsSettings"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/product/group/{id}": {
         "get": {
            "tags": [
               "product/group"
            ],
            "summary": "[BETA] Find product group by ID.",
            "operationId": "ProductGroup_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperProductGroup"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "product/group"
            ],
            "summary": "[BETA] Update product group.",
            "operationId": "ProductGroup_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/ProductGroup"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperProductGroup"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "product/group"
            ],
            "summary": "[BETA] Delete product group.",
            "operationId": "ProductGroup_delete",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/product/group/query": {
         "get": {
            "tags": [
               "product/group"
            ],
            "summary": "[BETA] Wildcard search.",
            "operationId": "ProductGroupQuery_query",
            "parameters": [
               {
                  "name": "query",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "name",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string",
                     "default": "id, name"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseProductGroup"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/product/group": {
         "get": {
            "tags": [
               "product/group"
            ],
            "summary": "[BETA] Find product group with sent data",
            "operationId": "ProductGroup_search",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "name",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "query",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseProductGroup"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "product/group"
            ],
            "summary": "[BETA] Create new product group.",
            "operationId": "ProductGroup_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/ProductGroup"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperProductGroup"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/product/group/list": {
         "put": {
            "tags": [
               "product/group"
            ],
            "summary": "[BETA] Update a list of product groups.",
            "operationId": "ProductGroupList_putList",
            "requestBody": {
               "description": "JSON representing updates to objects. Should have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/ProductGroup"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseProductGroup"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "post": {
            "tags": [
               "product/group"
            ],
            "summary": "[BETA] Add multiple products groups.",
            "operationId": "ProductGroupList_postList",
            "requestBody": {
               "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/ProductGroup"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseProductGroup"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "product/group"
            ],
            "summary": "[BETA] Delete multiple product groups.",
            "operationId": "ProductGroupList_deleteByIds",
            "parameters": [
               {
                  "name": "ids",
                  "in": "query",
                  "description": "ID of the elements",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/product/groupRelation/{id}": {
         "get": {
            "tags": [
               "product/groupRelation"
            ],
            "summary": "[BETA] Find product group relation by ID.",
            "operationId": "ProductGroupRelation_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperProductGroupRelation"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "delete": {
            "tags": [
               "product/groupRelation"
            ],
            "summary": "[BETA] Delete product group relation.",
            "operationId": "ProductGroupRelation_delete",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/product/groupRelation": {
         "get": {
            "tags": [
               "product/groupRelation"
            ],
            "summary": "[BETA] Find product group relation with sent data.",
            "operationId": "ProductGroupRelation_search",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "productId",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "productGroupId",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseProductGroupRelation"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "product/groupRelation"
            ],
            "summary": "[BETA] Create new product group relation.",
            "operationId": "ProductGroupRelation_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/ProductGroupRelation"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperProductGroupRelation"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/product/groupRelation/list": {
         "post": {
            "tags": [
               "product/groupRelation"
            ],
            "summary": "[BETA] Add multiple products group relations.",
            "operationId": "ProductGroupRelationList_postList",
            "requestBody": {
               "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/ProductGroupRelation"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseProductGroupRelation"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "product/groupRelation"
            ],
            "summary": "[BETA] Delete multiple product group relations.",
            "operationId": "ProductGroupRelationList_deleteByIds",
            "parameters": [
               {
                  "name": "ids",
                  "in": "query",
                  "description": "ID of the elements",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/product/productPrice": {
         "get": {
            "tags": [
               "product/productPrice"
            ],
            "summary": "[BETA] Find prices for a product. Only available for users that have activated the Logistics/Logistics Plus Beta-program in 'Our customer account'.",
            "operationId": "ProductProductPrice_search",
            "parameters": [
               {
                  "name": "productId",
                  "in": "query",
                  "description": "Equals",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fromDate",
                  "in": "query",
                  "description": "From and including",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "toDate",
                  "in": "query",
                  "description": "To and excluding",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "showOnlyLastPrice",
                  "in": "query",
                  "description": "If showOnlyLastPrice is true, fromDate and toDate are ignored and only last price of the product is send back.",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseProductPrice"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/product/unit/{id}": {
         "get": {
            "tags": [
               "product/unit"
            ],
            "summary": "Get product unit by ID.",
            "operationId": "ProductUnit_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperProductUnit"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "product/unit"
            ],
            "summary": "[BETA] Update product unit.",
            "operationId": "ProductUnit_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/ProductUnit"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperProductUnit"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "product/unit"
            ],
            "summary": "[BETA] Delete product unit by ID.",
            "operationId": "ProductUnit_delete",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/product/unit/query": {
         "get": {
            "tags": [
               "product/unit"
            ],
            "summary": "[BETA] Wildcard search.",
            "operationId": "ProductUnitQuery_query",
            "parameters": [
               {
                  "name": "query",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "format": "int32",
                     "default": 25
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string",
                     "default": "id, name"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseProductUnit"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/product/unit": {
         "get": {
            "tags": [
               "product/unit"
            ],
            "summary": "Find product units corresponding with sent data.",
            "operationId": "ProductUnit_search",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "name",
                  "in": "query",
                  "description": "Names",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "nameShort",
                  "in": "query",
                  "description": "Short names",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "commonCode",
                  "in": "query",
                  "description": "Common codes",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseProductUnit"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "product/unit"
            ],
            "summary": "[BETA] Create new product unit.",
            "operationId": "ProductUnit_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/ProductUnit"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperProductUnit"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/product/unit/list": {
         "put": {
            "tags": [
               "product/unit"
            ],
            "summary": "[BETA] Update list of product units.",
            "operationId": "ProductUnitList_putList",
            "requestBody": {
               "description": "JSON representing updates to objects. Should have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/ProductUnit"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseProductUnit"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "post": {
            "tags": [
               "product/unit"
            ],
            "summary": "[BETA] Create multiple product units.",
            "operationId": "ProductUnitList_postList",
            "requestBody": {
               "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/ProductUnit"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseProductUnit"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/product/unit/master/{id}": {
         "get": {
            "tags": [
               "product/unit/master"
            ],
            "summary": "[BETA] Get product unit master by ID.",
            "operationId": "ProductUnitMaster_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperProductUnitMaster"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/product/unit/master": {
         "get": {
            "tags": [
               "product/unit/master"
            ],
            "summary": "[BETA] Find product units master corresponding with sent data.",
            "operationId": "ProductUnitMaster_search",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "name",
                  "in": "query",
                  "description": "Names",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "nameShort",
                  "in": "query",
                  "description": "Short names",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "commonCode",
                  "in": "query",
                  "description": "Common codes",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "peppolName",
                  "in": "query",
                  "description": "Peppol names",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "peppolSymbol",
                  "in": "query",
                  "description": "Peppol symbols",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "isInactive",
                  "in": "query",
                  "description": "Inactive units",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "format": "int32",
                     "default": 2400
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseProductUnitMaster"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/project/{id}": {
         "get": {
            "tags": [
               "project"
            ],
            "summary": "Find project by ID.",
            "operationId": "Project_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperProject"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "project"
            ],
            "summary": "[BETA] Update project.",
            "operationId": "Project_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/Project"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperProject"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "project"
            ],
            "summary": "[BETA] Delete project.",
            "operationId": "Project_delete",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/project": {
         "get": {
            "tags": [
               "project"
            ],
            "summary": "Find projects corresponding with sent data.",
            "operationId": "Project_search",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "name",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "number",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "isOffer",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "projectManagerId",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "employeeInProjectId",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "departmentId",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "startDateFrom",
                  "in": "query",
                  "description": "From and including",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "startDateTo",
                  "in": "query",
                  "description": "To and excluding",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "endDateFrom",
                  "in": "query",
                  "description": "From and including",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "endDateTo",
                  "in": "query",
                  "description": "To and excluding",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "isClosed",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "isFixedPrice",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "customerId",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "externalAccountsNumber",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "includeRecentlyClosed",
                  "in": "query",
                  "description": "If isClosed is false, include projects that have been closed within the last 3 months. Equals",
                  "schema": {
                     "type": "boolean",
                     "default": false
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseProject"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "project"
            ],
            "summary": "Add new project.",
            "operationId": "Project_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/Project"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperProject"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/project/list": {
         "put": {
            "tags": [
               "project"
            ],
            "summary": "[BETA] Update multiple projects.",
            "operationId": "ProjectList_putList",
            "requestBody": {
               "description": "JSON representing updates to objects. Should have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/Project"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseProject"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "post": {
            "tags": [
               "project"
            ],
            "summary": "[BETA] Register new projects. Multiple projects for different users can be sent in the same request.",
            "operationId": "ProjectList_postList",
            "requestBody": {
               "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/Project"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseProject"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "project"
            ],
            "summary": "[BETA] Delete projects.",
            "operationId": "ProjectList_deleteByIds",
            "parameters": [
               {
                  "name": "ids",
                  "in": "query",
                  "description": "ID of the elements",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/project/>forTimeSheet": {
         "get": {
            "tags": [
               "project"
            ],
            "summary": "Find projects applicable for time sheet registration on a specific day.",
            "operationId": "ProjectForTimeSheet_getForTimeSheet",
            "parameters": [
               {
                  "name": "includeProjectOffers",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean",
                     "default": false
                  }
               },
               {
                  "name": "employeeId",
                  "in": "query",
                  "description": "Employee ID. Defaults to ID of token owner.",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "date",
                  "in": "query",
                  "description": "yyyy-MM-dd. Defaults to today.",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseProject"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/project/import": {
         "post": {
            "tags": [
               "project/import"
            ],
            "summary": "Upload project import file.",
            "operationId": "ProjectImport_importProjectStatement",
            "parameters": [
               {
                  "name": "fileFormat",
                  "in": "query",
                  "description": "File format",
                  "required": true,
                  "schema": {
                     "type": "string",
                     "enum": [
                        "XLS",
                        "CSV"
                     ]
                  }
               },
               {
                  "name": "encoding",
                  "in": "query",
                  "description": "Encoding",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "delimiter",
                  "in": "query",
                  "description": "Delimiter",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "ignoreFirstRow",
                  "in": "query",
                  "description": "Ignore first row",
                  "schema": {
                     "type": "boolean"
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "multipart/form-data": {
                     "schema": {
                        "required": [
                           "file"
                        ],
                        "properties": {
                           "file": {
                              "type": "string",
                              "description": "The project import file",
                              "format": "binary"
                           }
                        }
                     }
                  }
               },
               "required": true
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseProject"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/project/category/{id}": {
         "get": {
            "tags": [
               "project/category"
            ],
            "summary": "Find project category by ID.",
            "operationId": "ProjectCategory_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperProjectCategory"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "project/category"
            ],
            "summary": "Update project category.",
            "operationId": "ProjectCategory_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/ProjectCategory"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperProjectCategory"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/project/category": {
         "get": {
            "tags": [
               "project/category"
            ],
            "summary": "Find project categories corresponding with sent data.",
            "operationId": "ProjectCategory_search",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "name",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "number",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "description",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseProjectCategory"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "project/category"
            ],
            "summary": "Add new project category.",
            "operationId": "ProjectCategory_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/ProjectCategory"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperProjectCategory"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/project/orderline/{id}": {
         "get": {
            "tags": [
               "project/orderline"
            ],
            "summary": "[BETA] Get order line by ID.",
            "operationId": "ProjectOrderline_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperProjectOrderLine"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "project/orderline"
            ],
            "summary": "[BETA] Update project orderline.",
            "operationId": "ProjectOrderline_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/ProjectOrderLine"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperProjectOrderLine"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "project/orderline"
            ],
            "summary": "Delete order line by ID.",
            "operationId": "ProjectOrderline_delete",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/project/orderline": {
         "get": {
            "tags": [
               "project/orderline"
            ],
            "summary": "[BETA] Find all order lines for project.",
            "operationId": "ProjectOrderline_search",
            "parameters": [
               {
                  "name": "projectId",
                  "in": "query",
                  "description": "Equals",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseProjectOrderLine"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "project/orderline"
            ],
            "summary": "[BETA] Create order line. When creating several order lines, use /list for better performance.",
            "operationId": "ProjectOrderline_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/ProjectOrderLine"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperProjectOrderLine"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/project/orderline/list": {
         "post": {
            "tags": [
               "project/orderline"
            ],
            "summary": "[BETA] Create multiple order lines.",
            "operationId": "ProjectOrderlineList_postList",
            "requestBody": {
               "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/ProjectOrderLine"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseProjectOrderLine"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/project/participant/{id}": {
         "get": {
            "tags": [
               "project/participant"
            ],
            "summary": "[BETA] Find project participant by ID.",
            "operationId": "ProjectParticipant_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperProjectParticipant"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "project/participant"
            ],
            "summary": "[BETA] Update project participant.",
            "operationId": "ProjectParticipant_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/ProjectParticipant"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperProjectParticipant"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/project/participant": {
         "post": {
            "tags": [
               "project/participant"
            ],
            "summary": "[BETA] Add new project participant.",
            "operationId": "ProjectParticipant_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/ProjectParticipant"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperProjectParticipant"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/project/participant/list": {
         "post": {
            "tags": [
               "project/participant"
            ],
            "summary": "[BETA] Add new project participant. Multiple project participants can be sent in the same request.",
            "operationId": "ProjectParticipantList_postList",
            "requestBody": {
               "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/ProjectParticipant"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseProjectParticipant"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "project/participant"
            ],
            "summary": "[BETA] Delete project participants.",
            "operationId": "ProjectParticipantList_deleteByIds",
            "parameters": [
               {
                  "name": "ids",
                  "in": "query",
                  "description": "ID of the elements",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/project/{id}/period/invoicingReserve": {
         "get": {
            "tags": [
               "project/period"
            ],
            "summary": "Find invoicing reserve by project period.",
            "operationId": "ProjectPeriodInvoicingReserve_invoicingReserve",
            "parameters": [
               {
                  "name": "dateFrom",
                  "in": "query",
                  "description": "Format is yyyy-MM-dd (from and incl.).",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "dateTo",
                  "in": "query",
                  "description": "Format is yyyy-MM-dd (to and excl.).",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperProjectPeriodInvoicingReserve"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/project/{id}/period/invoiced": {
         "get": {
            "tags": [
               "project/period"
            ],
            "summary": "Find invoiced info by project period.",
            "operationId": "ProjectPeriodInvoiced_invoiced",
            "parameters": [
               {
                  "name": "dateFrom",
                  "in": "query",
                  "description": "Format is yyyy-MM-dd (from and incl.).",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "dateTo",
                  "in": "query",
                  "description": "Format is yyyy-MM-dd (to and excl.).",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperProjectPeriodInvoiced"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/project/{id}/period/overallStatus": {
         "get": {
            "tags": [
               "project/period"
            ],
            "summary": "Find overall status by project period.",
            "operationId": "ProjectPeriodOverallStatus_overallStatus",
            "parameters": [
               {
                  "name": "dateFrom",
                  "in": "query",
                  "description": "Format is yyyy-MM-dd (from and incl.).",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "dateTo",
                  "in": "query",
                  "description": "Format is yyyy-MM-dd (to and excl.).",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperProjectPeriodOverallStatus"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/project/{id}/period/monthlyStatus": {
         "get": {
            "tags": [
               "project/period"
            ],
            "summary": "Find overall status by project period.",
            "operationId": "ProjectPeriodMonthlyStatus_monthlyStatus",
            "parameters": [
               {
                  "name": "dateFrom",
                  "in": "query",
                  "description": "Format is yyyy-MM-dd (from and incl.).",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "dateTo",
                  "in": "query",
                  "description": "Format is yyyy-MM-dd (to and excl.).",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseProjectPeriodMonthlyStatus"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/project/{id}/period/hourlistReport": {
         "get": {
            "tags": [
               "project/period"
            ],
            "summary": "Find hourlist report by project period.",
            "operationId": "ProjectPeriodHourlistReport_hourlistReport",
            "parameters": [
               {
                  "name": "dateFrom",
                  "in": "query",
                  "description": "Format is yyyy-MM-dd (from and incl.).",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "dateTo",
                  "in": "query",
                  "description": "Format is yyyy-MM-dd (to and excl.).",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperProjectPeriodHourlyReport"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/project/{id}/period/budgetStatus": {
         "get": {
            "tags": [
               "project/period"
            ],
            "summary": "Get the budget status for the project period",
            "operationId": "ProjectPeriodBudgetStatus_getBudgetStatus",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperProjectBudgetStatus"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/project/projectActivity/{id}": {
         "get": {
            "tags": [
               "project/projectActivity"
            ],
            "summary": "Find project activity by id",
            "operationId": "ProjectProjectActivity_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperProjectActivity"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "delete": {
            "tags": [
               "project/projectActivity"
            ],
            "summary": "Delete project activity",
            "operationId": "ProjectProjectActivity_delete",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/project/projectActivity": {
         "post": {
            "tags": [
               "project/projectActivity"
            ],
            "summary": "Add project activity.",
            "operationId": "ProjectProjectActivity_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/ProjectActivity"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperProjectActivity"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/project/projectActivity/list": {
         "delete": {
            "tags": [
               "project/projectActivity"
            ],
            "summary": "Delete project activities",
            "operationId": "ProjectProjectActivityList_deleteByIds",
            "parameters": [
               {
                  "name": "ids",
                  "in": "query",
                  "description": "ID of the elements",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/project/controlForm/{id}": {
         "get": {
            "tags": [
               "project/controlForm"
            ],
            "summary": "[BETA] Get project control form by ID.",
            "operationId": "ProjectControlForm_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperProjectControlForm"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/project/controlForm": {
         "get": {
            "tags": [
               "project/controlForm"
            ],
            "summary": "[BETA] Get project control forms by project ID.",
            "operationId": "ProjectControlForm_search",
            "parameters": [
               {
                  "name": "projectId",
                  "in": "query",
                  "description": "Project ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseProjectControlForm"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/project/controlFormType/{id}": {
         "get": {
            "tags": [
               "project/controlFormType"
            ],
            "summary": "[BETA] Get project control form type by ID.",
            "operationId": "ProjectControlFormType_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperProjectControlFormType"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/project/controlFormType": {
         "get": {
            "tags": [
               "project/controlFormType"
            ],
            "summary": "[BETA] Get project control form types",
            "operationId": "ProjectControlFormType_search",
            "parameters": [
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseProjectControlFormType"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/project/hourlyRates/{id}": {
         "get": {
            "tags": [
               "project/hourlyRates"
            ],
            "summary": "Find project hourly rate by ID.",
            "operationId": "ProjectHourlyRates_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperProjectHourlyRate"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "project/hourlyRates"
            ],
            "summary": "Update a project hourly rate.",
            "operationId": "ProjectHourlyRates_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/ProjectHourlyRate"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperProjectHourlyRate"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "project/hourlyRates"
            ],
            "summary": "Delete Project Hourly Rate ",
            "operationId": "ProjectHourlyRates_delete",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/project/hourlyRates": {
         "get": {
            "tags": [
               "project/hourlyRates"
            ],
            "summary": "Find project hourly rates corresponding with sent data.",
            "operationId": "ProjectHourlyRates_search",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "projectId",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "type",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string",
                     "enum": [
                        "TYPE_PREDEFINED_HOURLY_RATES",
                        "TYPE_PROJECT_SPECIFIC_HOURLY_RATES",
                        "TYPE_FIXED_HOURLY_RATE"
                     ]
                  }
               },
               {
                  "name": "startDateFrom",
                  "in": "query",
                  "description": "From and including",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "startDateTo",
                  "in": "query",
                  "description": "To and excluding",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "showInProjectOrder",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseProjectHourlyRate"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "project/hourlyRates"
            ],
            "summary": "Create a project hourly rate. ",
            "operationId": "ProjectHourlyRates_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/ProjectHourlyRate"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperProjectHourlyRate"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/project/hourlyRates/updateOrAddHourRates": {
         "put": {
            "tags": [
               "project/hourlyRates"
            ],
            "summary": "Update or add the same project hourly rate from project overview.",
            "operationId": "ProjectHourlyRatesUpdateOrAddHourRates_updateOrAddHourRates",
            "parameters": [
               {
                  "name": "ids",
                  "in": "query",
                  "description": "ID of the elements",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "description": "JSON representing updates to objects. Should have ID and version set.",
               "content": {
                  "*/*": {
                     "schema": {
                        "$ref": "#/components/schemas/HourlyRate"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseProjectHourlyRate"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/project/hourlyRates/deleteByProjectIds": {
         "delete": {
            "tags": [
               "project/hourlyRates"
            ],
            "summary": "Delete project hourly rates by project id.",
            "operationId": "ProjectHourlyRatesDeleteByProjectIds_deleteByProjectIds",
            "parameters": [
               {
                  "name": "ids",
                  "in": "query",
                  "description": "ID of the elements",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "date",
                  "in": "query",
                  "description": "yyyy-MM-dd. Defaults to today.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseProject"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/project/hourlyRates/list": {
         "put": {
            "tags": [
               "project/hourlyRates"
            ],
            "summary": "Update multiple project hourly rates.",
            "operationId": "ProjectHourlyRatesList_putList",
            "requestBody": {
               "description": "JSON representing updates to objects. Should have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/ProjectHourlyRate"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseProjectHourlyRate"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "post": {
            "tags": [
               "project/hourlyRates"
            ],
            "summary": "Create multiple project hourly rates.",
            "operationId": "ProjectHourlyRatesList_postList",
            "requestBody": {
               "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/ProjectHourlyRate"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseProjectHourlyRate"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "project/hourlyRates"
            ],
            "summary": "Delete project hourly rates.",
            "operationId": "ProjectHourlyRatesList_deleteByIds",
            "parameters": [
               {
                  "name": "ids",
                  "in": "query",
                  "description": "ID of the elements",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/project/hourlyRates/projectSpecificRates/{id}": {
         "get": {
            "tags": [
               "project/hourlyRates/projectSpecificRates"
            ],
            "summary": "Find project specific rate by ID.",
            "operationId": "ProjectHourlyRatesProjectSpecificRates_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperProjectSpecificRate"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "project/hourlyRates/projectSpecificRates"
            ],
            "summary": "Update a project specific rate.",
            "operationId": "ProjectHourlyRatesProjectSpecificRates_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/ProjectSpecificRate"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperProjectSpecificRate"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "project/hourlyRates/projectSpecificRates"
            ],
            "summary": "Delete project specific rate ",
            "operationId": "ProjectHourlyRatesProjectSpecificRates_delete",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/project/hourlyRates/projectSpecificRates": {
         "get": {
            "tags": [
               "project/hourlyRates/projectSpecificRates"
            ],
            "summary": "Find project specific rates corresponding with sent data.",
            "operationId": "ProjectHourlyRatesProjectSpecificRates_search",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "projectHourlyRateId",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "employeeId",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "activityId",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseProjectSpecificRate"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "project/hourlyRates/projectSpecificRates"
            ],
            "summary": "Create new project specific rate. ",
            "operationId": "ProjectHourlyRatesProjectSpecificRates_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/ProjectSpecificRate"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperProjectSpecificRate"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/project/hourlyRates/projectSpecificRates/list": {
         "put": {
            "tags": [
               "project/hourlyRates/projectSpecificRates"
            ],
            "summary": "Update multiple project specific rates.",
            "operationId": "ProjectHourlyRatesProjectSpecificRatesList_putList",
            "requestBody": {
               "description": "JSON representing updates to objects. Should have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/ProjectSpecificRate"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseProjectSpecificRate"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "post": {
            "tags": [
               "project/hourlyRates/projectSpecificRates"
            ],
            "summary": "Create multiple new project specific rates.",
            "operationId": "ProjectHourlyRatesProjectSpecificRatesList_postList",
            "requestBody": {
               "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/ProjectSpecificRate"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseProjectSpecificRate"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "project/hourlyRates/projectSpecificRates"
            ],
            "summary": "Delete project specific rates.",
            "operationId": "ProjectHourlyRatesProjectSpecificRatesList_deleteByIds",
            "parameters": [
               {
                  "name": "ids",
                  "in": "query",
                  "description": "ID of the elements",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/project/resourcePlanBudget": {
         "get": {
            "tags": [
               "project/resourceplan"
            ],
            "summary": "Get resource plan entries in the specified period.",
            "operationId": "ProjectResourcePlanBudget_get",
            "parameters": [
               {
                  "name": "projectId",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "periodStart",
                  "in": "query",
                  "description": "From and including",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "periodEnd",
                  "in": "query",
                  "description": "To and excluding",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "periodType",
                  "in": "query",
                  "description": "Equals",
                  "required": true,
                  "schema": {
                     "type": "string",
                     "enum": [
                        "HOUR",
                        "DAY",
                        "WEEK",
                        "MONTH"
                     ]
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperResourcePlanBudget"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/project/settings": {
         "get": {
            "tags": [
               "project/settings"
            ],
            "summary": "Get project settings of logged in company.",
            "operationId": "ProjectSettings_get",
            "parameters": [
               {
                  "name": "useNkode",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean",
                     "default": false
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperProjectSettings"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "project/settings"
            ],
            "summary": "Update project settings for company",
            "operationId": "ProjectSettings_put",
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/ProjectSettings"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperProjectSettings"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/project/task": {
         "get": {
            "tags": [
               "project/task"
            ],
            "summary": "Find all tasks for project.",
            "operationId": "ProjectTask_search",
            "parameters": [
               {
                  "name": "projectId",
                  "in": "query",
                  "description": "Equals",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseTask"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/project/template/{id}": {
         "get": {
            "tags": [
               "project/template"
            ],
            "summary": "Get project template by ID.",
            "operationId": "ProjectTemplate_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string",
                     "default": "*"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperProjectTemplate"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/crm/prospect/{id}": {
         "get": {
            "tags": [
               "crm/prospect"
            ],
            "summary": "Get prospect by ID.",
            "operationId": "CrmProspect_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperProspect"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/crm/prospect": {
         "get": {
            "tags": [
               "crm/prospect"
            ],
            "summary": "Find prospects corresponding with sent data.",
            "operationId": "CrmProspect_search",
            "parameters": [
               {
                  "name": "name",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "description",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "createdDateFrom",
                  "in": "query",
                  "description": "From and including",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "createdDateTo",
                  "in": "query",
                  "description": "To and excluding",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "customerId",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "salesEmployeeId",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "isClosed",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "closedReason",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "closedDateFrom",
                  "in": "query",
                  "description": "From and including",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "closedDateTo",
                  "in": "query",
                  "description": "To and excluding",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "competitor",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "prospectType",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "projectId",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "projectOfferId",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseProspect"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/pickupPoint/{id}": {
         "get": {
            "tags": [
               "pickupPoint"
            ],
            "summary": "[BETA] Find pickup point by ID.",
            "operationId": "PickupPoint_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperPickupPoint"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/pickupPoint": {
         "get": {
            "tags": [
               "pickupPoint"
            ],
            "summary": "[BETA] Search pickup points.",
            "operationId": "PickupPoint_search",
            "parameters": [
               {
                  "name": "supplierId",
                  "in": "query",
                  "description": "Valid ids.",
                  "style": "form",
                  "explode": true,
                  "schema": {
                     "type": "array",
                     "items": {
                        "type": "integer",
                        "format": "int32"
                     }
                  }
               },
               {
                  "name": "transportTypeId",
                  "in": "query",
                  "description": "Valid TransportType ids.",
                  "style": "form",
                  "explode": true,
                  "schema": {
                     "type": "array",
                     "items": {
                        "type": "integer",
                        "format": "int32"
                     }
                  }
               },
               {
                  "name": "code",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "name",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponsePickupPoint"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/purchaseOrder/{id}": {
         "get": {
            "tags": [
               "purchaseOrder"
            ],
            "summary": " [BETA] Find purchase order by ID.",
            "operationId": "PurchaseOrder_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperPurchaseOrder"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "purchaseOrder"
            ],
            "summary": " [BETA] Update purchase order.",
            "operationId": "PurchaseOrder_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/PurchaseOrder"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperPurchaseOrder"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "purchaseOrder"
            ],
            "summary": " [BETA] Delete purchase order.",
            "operationId": "PurchaseOrder_delete",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/purchaseOrder": {
         "get": {
            "tags": [
               "purchaseOrder"
            ],
            "summary": "[BETA] Find purchase orders with send data",
            "operationId": "PurchaseOrder_search",
            "parameters": [
               {
                  "name": "number",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "deliveryDateFrom",
                  "in": "query",
                  "description": "Format is yyyy-MM-dd (from and incl.).",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "deliveryDateTo",
                  "in": "query",
                  "description": "Format is yyyy-MM-dd (to and incl.).",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "creationDateFrom",
                  "in": "query",
                  "description": "Format is yyyy-MM-dd (from and incl.).",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "creationDateTo",
                  "in": "query",
                  "description": "Format is yyyy-MM-dd (to and incl.).",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "id",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "supplierId",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "projectId",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "isClosed",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "withDeviationOnly",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean",
                     "default": false
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponsePurchaseOrder"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "purchaseOrder"
            ],
            "summary": "[BETA] Creates a new purchase order",
            "operationId": "PurchaseOrder_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/PurchaseOrder"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperPurchaseOrder"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/purchaseOrder/{id}/:send": {
         "put": {
            "tags": [
               "purchaseOrder"
            ],
            "summary": "[BETA] Send purchase order by id and sendType.",
            "operationId": "PurchaseOrderSend_send",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "sendType",
                  "in": "query",
                  "description": "Send type.DEFAULT will determine the send parameter based on the supplier type.If supplier is not wholesaler, receiverEmail from the PO will be used if it's specified.If receiverEmail empty it will take the vendor email.",
                  "schema": {
                     "type": "string",
                     "default": "DEFAULT",
                     "enum": [
                        "DEFAULT",
                        "EMAIL",
                        "FTP"
                     ]
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperPurchaseOrder"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/purchaseOrder/{id}/:sendByEmail": {
         "put": {
            "tags": [
               "purchaseOrder"
            ],
            "summary": "[BETA] Send purchase order by customisable email.",
            "operationId": "PurchaseOrderSendByEmail_sendByEmail",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/PurchaseOrderEmail"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperPurchaseOrder"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/purchaseOrder/{id}/attachment": {
         "post": {
            "tags": [
               "purchaseOrder"
            ],
            "summary": "[BETA] Upload attachment to Purchase Order.",
            "operationId": "PurchaseOrderAttachment_uploadAttachment",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Purchase Order ID to upload attachment to.",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string",
                     "default": "*"
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "multipart/form-data": {
                     "schema": {
                        "required": [
                           "file"
                        ],
                        "properties": {
                           "file": {
                              "type": "string",
                              "description": "The file",
                              "format": "binary"
                           }
                        }
                     }
                  }
               },
               "required": true
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperPurchaseOrder"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "delete": {
            "tags": [
               "purchaseOrder"
            ],
            "summary": "[BETA] Delete attachment.",
            "operationId": "PurchaseOrderAttachment_deleteAttachment",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of purchase order containing the attachment to delete.",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/purchaseOrder/{id}/attachment/list": {
         "post": {
            "tags": [
               "purchaseOrder"
            ],
            "summary": "Upload multiple attachments to Purchase Order.",
            "operationId": "PurchaseOrderAttachmentList_uploadAttachments",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Purchase Order ID to upload attachment to.",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Multipart files",
               "content": {
                  "multipart/form-data": {
                     "schema": {
                        "$ref": "#/components/schemas/FormDataMultiPart"
                     }
                  }
               },
               "required": true
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperPurchaseOrder"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/transportType/{id}": {
         "get": {
            "tags": [
               "transportType"
            ],
            "summary": " [BETA] Find transport type by ID.",
            "operationId": "TransportType_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperTransportType"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/transportType": {
         "get": {
            "tags": [
               "transportType"
            ],
            "summary": " [BETA] Search transport type.",
            "operationId": "TransportType_search",
            "parameters": [
               {
                  "name": "supplierId",
                  "in": "query",
                  "description": "List of valid suppliers ids.",
                  "style": "form",
                  "explode": true,
                  "schema": {
                     "type": "array",
                     "items": {
                        "type": "integer",
                        "format": "int32"
                     }
                  }
               },
               {
                  "name": "name",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseTransportType"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/purchaseOrder/deviation/{id}": {
         "get": {
            "tags": [
               "purchaseOrder/deviation"
            ],
            "summary": " [BETA] Get deviation by order line ID. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
            "operationId": "PurchaseOrderDeviation_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperDeviation"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "purchaseOrder/deviation"
            ],
            "summary": "Update deviation. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
            "operationId": "PurchaseOrderDeviation_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/Deviation"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperDeviation"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "purchaseOrder/deviation"
            ],
            "summary": "[BETA] Delete goods receipt by purchase order ID. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
            "operationId": "PurchaseOrderDeviation_delete",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/purchaseOrder/deviation": {
         "get": {
            "tags": [
               "purchaseOrder/deviation"
            ],
            "summary": "[BETA] Find handled deviations for purchase order. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
            "operationId": "PurchaseOrderDeviation_search",
            "parameters": [
               {
                  "name": "purchaseOrderId",
                  "in": "query",
                  "description": "Equals",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseDeviation"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "purchaseOrder/deviation"
            ],
            "summary": "[BETA] Register deviation on goods receipt. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
            "operationId": "PurchaseOrderDeviation_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/Deviation"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperDeviation"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/purchaseOrder/deviation/list": {
         "put": {
            "tags": [
               "purchaseOrder/deviation"
            ],
            "summary": "[BETA] Update multiple deviations. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
            "operationId": "PurchaseOrderDeviationList_putList",
            "requestBody": {
               "description": "JSON representing updates to objects. Should have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/Deviation"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseDeviation"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "post": {
            "tags": [
               "purchaseOrder/deviation"
            ],
            "summary": "[BETA] Register multiple deviations. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
            "operationId": "PurchaseOrderDeviationList_postList",
            "requestBody": {
               "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/Deviation"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseDeviation"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/purchaseOrder/deviation/{id}/:approve": {
         "put": {
            "tags": [
               "purchaseOrder/deviation"
            ],
            "summary": "[BETA] Approve deviations. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
            "operationId": "PurchaseOrderDeviationApprove_approve",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Purchase Order ID.",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperPurchaseOrder"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/purchaseOrder/deviation/{id}/:deliver": {
         "put": {
            "tags": [
               "purchaseOrder/deviation"
            ],
            "summary": "[BETA] Send deviations to approval. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
            "operationId": "PurchaseOrderDeviationDeliver_deliver",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Purchase Order ID.",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperPurchaseOrder"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/purchaseOrder/deviation/{id}/:undeliver": {
         "put": {
            "tags": [
               "purchaseOrder/deviation"
            ],
            "summary": "[BETA] Undeliver the deviations. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
            "operationId": "PurchaseOrderDeviationUndeliver_undeliver",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Purchase Order ID.",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperPurchaseOrder"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/purchaseOrder/goodsReceipt/{id}": {
         "get": {
            "tags": [
               "purchaseOrder/goodsReceipt"
            ],
            "summary": "[BETA] Get goods receipt by purchase order ID. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
            "operationId": "PurchaseOrderGoodsReceipt_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperGoodsReceipt"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "purchaseOrder/goodsReceipt"
            ],
            "summary": "[BETA] Update goods receipt. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
            "operationId": "PurchaseOrderGoodsReceipt_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Goods Receipt ID.",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string",
                     "default": "*"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/GoodsReceipt"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperGoodsReceipt"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "purchaseOrder/goodsReceipt"
            ],
            "summary": "[BETA] Delete goods receipt by ID. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
            "operationId": "PurchaseOrderGoodsReceipt_delete",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/purchaseOrder/goodsReceipt": {
         "get": {
            "tags": [
               "purchaseOrder/goodsReceipt"
            ],
            "summary": "[BETA] Get goods receipt. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
            "operationId": "PurchaseOrderGoodsReceipt_search",
            "parameters": [
               {
                  "name": "receivedDateFrom",
                  "in": "query",
                  "description": "Format is yyyy-MM-dd (from and incl.).",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "receivedDateTo",
                  "in": "query",
                  "description": "Format is yyyy-MM-dd (to and incl.).",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "status",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string",
                     "enum": [
                        "STATUS_OPEN",
                        "STATUS_CONFIRMED"
                     ]
                  }
               },
               {
                  "name": "withoutPurchase",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean",
                     "default": false
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseGoodsReceipt"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "purchaseOrder/goodsReceipt"
            ],
            "summary": "[BETA] Register goods receipt without an existing purchase order. When registration of several goods receipt, use /list for better performance. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
            "operationId": "PurchaseOrderGoodsReceipt_post",
            "parameters": [
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string",
                     "default": "*"
                  }
               }
            ],
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/GoodsReceipt"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperGoodsReceipt"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/purchaseOrder/goodsReceipt/list": {
         "post": {
            "tags": [
               "purchaseOrder/goodsReceipt"
            ],
            "summary": "[BETA] Register multiple goods receipt without an existing purchase order. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
            "operationId": "PurchaseOrderGoodsReceiptList_postList",
            "parameters": [
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string",
                     "default": "*"
                  }
               }
            ],
            "requestBody": {
               "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/GoodsReceipt"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseGoodsReceipt"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "purchaseOrder/goodsReceipt"
            ],
            "summary": "[BETA] Delete multiple goods receipt by ID. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
            "operationId": "PurchaseOrderGoodsReceiptList_deleteByIds",
            "parameters": [
               {
                  "name": "ids",
                  "in": "query",
                  "description": "ID of the elements",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/purchaseOrder/goodsReceipt/{id}/:registerGoodsReceipt": {
         "put": {
            "tags": [
               "purchaseOrder/goodsReceipt"
            ],
            "summary": "[BETA] Register goods receipt. Quantity received on the products is set to the same as quantity ordered. To update the quantity received, use PUT /purchaseOrder/goodsReceiptLine/{id}. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
            "operationId": "PurchaseOrderGoodsReceiptRegisterGoodsReceipt_registerGoodsReceipt",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Purchase Order ID.",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "registrationDate",
                  "in": "query",
                  "description": "yyyy-MM-dd. Defaults to today.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "inventoryId",
                  "in": "query",
                  "description": "ID of inventory. Main inventory is set as default",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "comment",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string",
                     "default": "*"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperGoodsReceipt"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/purchaseOrder/goodsReceipt/{id}/:confirm": {
         "put": {
            "tags": [
               "purchaseOrder/goodsReceipt"
            ],
            "summary": "[BETA] Confirm goods receipt. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
            "operationId": "PurchaseOrderGoodsReceiptConfirm_confirm",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Purchase Order ID.",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "createRestOrder",
                  "in": "query",
                  "description": "Create restorder if quantity received is less than ordered",
                  "schema": {
                     "type": "boolean",
                     "default": false
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string",
                     "default": "*"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperPurchaseOrder"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/purchaseOrder/goodsReceipt/{id}/:receiveAndConfirm": {
         "put": {
            "tags": [
               "purchaseOrder/goodsReceipt"
            ],
            "summary": "[BETA]  Receive all ordered products and approve goods receipt. Only available for users that have activated the Logistics/Logistics Plus Beta-program in 'Our customer account'",
            "operationId": "PurchaseOrderGoodsReceiptReceiveAndConfirm_receiveAndConfirm",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Purchase Order ID.",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "receivedDate",
                  "in": "query",
                  "description": "The approval date for the subscription.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "inventoryId",
                  "in": "query",
                  "description": "ID of inventory. Main inventory is set as default",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string",
                     "default": "*"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperPurchaseOrder"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/purchaseOrder/goodsReceiptLine/{id}": {
         "get": {
            "tags": [
               "purchaseOrder/goodsReceiptLine"
            ],
            "summary": "[BETA] Get goods receipt line by purchase order line ID. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
            "operationId": "PurchaseOrderGoodsReceiptLine_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperGoodsReceiptLine"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "purchaseOrder/goodsReceiptLine"
            ],
            "summary": "[BETA] Update a goods receipt line on a goods receipt. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
            "operationId": "PurchaseOrderGoodsReceiptLine_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Goods receipt Line ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/GoodsReceiptLine"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperGoodsReceiptLine"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/purchaseOrder/goodsReceiptLine": {
         "get": {
            "tags": [
               "purchaseOrder/goodsReceiptLine"
            ],
            "summary": "[BETA] Find goods receipt lines for purchase order. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
            "operationId": "PurchaseOrderGoodsReceiptLine_search",
            "parameters": [
               {
                  "name": "purchaseOrderId",
                  "in": "query",
                  "description": "Equals",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseGoodsReceiptLine"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "purchaseOrder/goodsReceiptLine"
            ],
            "summary": "[BETA] Register new goods receipt; new product on an existing purchase order. When registration of several goods receipt, use /list for better performance. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
            "operationId": "PurchaseOrderGoodsReceiptLine_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/GoodsReceiptLine"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperGoodsReceiptLine"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/purchaseOrder/goodsReceiptLine/list": {
         "put": {
            "tags": [
               "purchaseOrder/goodsReceiptLine"
            ],
            "summary": "[BETA] Update goods receipt lines on a goods receipt. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
            "operationId": "PurchaseOrderGoodsReceiptLineList_putList",
            "requestBody": {
               "description": "JSON representing updates to objects. Should have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/GoodsReceiptLine"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseGoodsReceiptLine"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "post": {
            "tags": [
               "purchaseOrder/goodsReceiptLine"
            ],
            "summary": "[BETA] Register multiple new goods receipt on an existing purchase order. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
            "operationId": "PurchaseOrderGoodsReceiptLineList_postList",
            "requestBody": {
               "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/GoodsReceiptLine"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseGoodsReceiptLine"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/purchaseOrder/purchaseOrderIncomingInvoiceRelation/{id}": {
         "get": {
            "tags": [
               "purchaseOrder/purchaseOrderIncomingInvoiceRelation"
            ],
            "summary": "[BETA] Find purchase order relation to voucher by ID. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
            "operationId": "PurchaseOrderPurchaseOrderIncomingInvoiceRelation_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperPurchaseOrderIncomingInvoiceRelation"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "delete": {
            "tags": [
               "purchaseOrder/purchaseOrderIncomingInvoiceRelation"
            ],
            "summary": "[BETA] Delete purchase order voucher relation. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
            "operationId": "PurchaseOrderPurchaseOrderIncomingInvoiceRelation_delete",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/purchaseOrder/purchaseOrderIncomingInvoiceRelation": {
         "get": {
            "tags": [
               "purchaseOrder/purchaseOrderIncomingInvoiceRelation"
            ],
            "summary": "[BETA] Find purchase order relation to voucher with sent data. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
            "operationId": "PurchaseOrderPurchaseOrderIncomingInvoiceRelation_search",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "orderOutId",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "voucherId",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponsePurchaseOrderIncomingInvoiceRelation"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "purchaseOrder/purchaseOrderIncomingInvoiceRelation"
            ],
            "summary": "[BETA] Create new relation between purchase order and a voucher. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
            "operationId": "PurchaseOrderPurchaseOrderIncomingInvoiceRelation_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/PurchaseOrderIncomingInvoiceRelation"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperPurchaseOrderIncomingInvoiceRelation"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/purchaseOrder/purchaseOrderIncomingInvoiceRelation/list": {
         "post": {
            "tags": [
               "purchaseOrder/purchaseOrderIncomingInvoiceRelation"
            ],
            "summary": "[BETA] Create a new list of relations between purchase order and voucher. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
            "operationId": "PurchaseOrderPurchaseOrderIncomingInvoiceRelationList_postList",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/PurchaseOrderIncomingInvoiceRelation"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponsePurchaseOrderIncomingInvoiceRelation"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "purchaseOrder/purchaseOrderIncomingInvoiceRelation"
            ],
            "summary": "[BETA] Delete multiple purchase order voucher relations. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
            "operationId": "PurchaseOrderPurchaseOrderIncomingInvoiceRelationList_deleteByIds",
            "parameters": [
               {
                  "name": "ids",
                  "in": "query",
                  "description": "ID of the elements",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/purchaseOrder/orderline/{id}": {
         "get": {
            "tags": [
               "purchaseOrder/orderline"
            ],
            "summary": " [BETA] Find purchase order line by ID.",
            "operationId": "PurchaseOrderOrderline_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperPurchaseOrderline"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "purchaseOrder/orderline"
            ],
            "summary": " [BETA] Updates purchase order line",
            "operationId": "PurchaseOrderOrderline_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/PurchaseOrderline"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperPurchaseOrderline"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "purchaseOrder/orderline"
            ],
            "summary": " [BETA] Delete purchase order line.",
            "operationId": "PurchaseOrderOrderline_delete",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/purchaseOrder/orderline": {
         "post": {
            "tags": [
               "purchaseOrder/orderline"
            ],
            "summary": " [BETA] Creates purchase order line.",
            "operationId": "PurchaseOrderOrderline_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/PurchaseOrderline"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperPurchaseOrderline"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/purchaseOrder/orderline/list": {
         "put": {
            "tags": [
               "purchaseOrder/orderline"
            ],
            "summary": "[BETA] Update a list of purchase order lines.",
            "operationId": "PurchaseOrderOrderlineList_putList",
            "requestBody": {
               "description": "JSON representing updates to objects. Should have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/PurchaseOrderline"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponsePurchaseOrderline"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "post": {
            "tags": [
               "purchaseOrder/orderline"
            ],
            "summary": "Create list of new purchase order lines.",
            "operationId": "PurchaseOrderOrderlineList_postList",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/PurchaseOrderline"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponsePurchaseOrderline"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/reminder/{id}": {
         "get": {
            "tags": [
               "reminder"
            ],
            "summary": "Get reminder by ID.",
            "operationId": "Reminder_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperReminder"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/reminder": {
         "get": {
            "tags": [
               "reminder"
            ],
            "summary": "Find reminders corresponding with sent data.",
            "operationId": "Reminder_search",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "dateFrom",
                  "in": "query",
                  "description": "From and including",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "dateTo",
                  "in": "query",
                  "description": "To and excluding",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "termOfPaymentTo",
                  "in": "query",
                  "description": "To and excluding",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "termOfPaymentFrom",
                  "in": "query",
                  "description": "From and including",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "invoiceId",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "customerId",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseReminder"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/internal/resourcePlan2/permissions/modal/{jobId}": {
         "get": {
            "tags": [
               "internalresourcePlan2permissions"
            ],
            "summary": "Gets information about user permissions when editing a job",
            "operationId": "InternalResourcePlan2PermissionsModal_getModal",
            "parameters": [
               {
                  "name": "jobId",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperRP2ModalPermissionsDTO"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/resultbudget": {
         "get": {
            "tags": [
               "resultbudget"
            ],
            "summary": "Find result budgets corresponding with sent data. Either specify the ids of the departments, projects, products or employees to return result budgets for, or use the boolean parameters includeAll***ResultBudgets to get all results budgets.",
            "operationId": "Resultbudget_search",
            "parameters": [
               {
                  "name": "departmentIds",
                  "in": "query",
                  "description": "List of department ids to return result budgets for",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "projectIds",
                  "in": "query",
                  "description": "List of project ids to return result budgets for",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "productIds",
                  "in": "query",
                  "description": "List of product ids to return result budgets for",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "employeeIds",
                  "in": "query",
                  "description": "List of employee ids to return result budgets for",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "year",
                  "in": "query",
                  "description": "Must be between 1900-2100. Defaults to current year.",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "includeAllDepartmentResultBudgets",
                  "in": "query",
                  "description": "Include all department result budgets for active departments",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "includeAllProjectResultBudgets",
                  "in": "query",
                  "description": "Include all project result budgets for active projects",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "includeAllProductResultBudgets",
                  "in": "query",
                  "description": "Include all product result budgets for active products",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "includeAllEmployeeResultBudgets",
                  "in": "query",
                  "description": "Include all employee result budgets for active employees",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseResultBudget"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/resultbudget/company": {
         "get": {
            "tags": [
               "resultbudget"
            ],
            "summary": "Get result budget for company",
            "operationId": "ResultbudgetCompany_getCompanyResultBudget",
            "parameters": [
               {
                  "name": "year",
                  "in": "query",
                  "description": "Must be between 1900-2100. Defaults to current year.",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseResultBudget"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/resultbudget/department/{id}": {
         "get": {
            "tags": [
               "resultbudget"
            ],
            "summary": "Get result budget associated with a departmentId",
            "operationId": "ResultbudgetDepartment_getDepartmentResultBudget",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "year",
                  "in": "query",
                  "description": "Must be between 1900-2100. Defaults to current year.",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseResultBudget"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/resultbudget/project/{id}": {
         "get": {
            "tags": [
               "resultbudget"
            ],
            "summary": "Get result budget associated with a projectId",
            "operationId": "ResultbudgetProject_getProjectResultBudget",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "year",
                  "in": "query",
                  "description": "Must be between 1900-2100. Defaults to current year.",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseResultBudget"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/resultbudget/product/{id}": {
         "get": {
            "tags": [
               "resultbudget"
            ],
            "summary": "Get result budget associated with a productId",
            "operationId": "ResultbudgetProduct_getProductResultBudget",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "year",
                  "in": "query",
                  "description": "Must be between 1900-2100. Defaults to current year.",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseResultBudget"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/resultbudget/employee/{id}": {
         "get": {
            "tags": [
               "resultbudget"
            ],
            "summary": "Get result budget associated with an employeeId",
            "operationId": "ResultbudgetEmployee_getEmployeeResultBudget",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "year",
                  "in": "query",
                  "description": "Must be between 1900-2100. Defaults to current year.",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseResultBudget"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/saft/importSAFT": {
         "post": {
            "tags": [
               "saft"
            ],
            "summary": "[BETA] Import SAF-T. Send XML file as multipart form.",
            "operationId": "SaftImportSAFT_importSAFT",
            "requestBody": {
               "content": {
                  "multipart/form-data": {
                     "schema": {
                        "required": [
                           "createCustomerIB",
                           "createMissingAccounts",
                           "createVendorIB",
                           "importCustomerVendors",
                           "importDepartments",
                           "importProjects",
                           "importStartBalanceFromClosing",
                           "importStartBalanceFromOpening",
                           "importVouchers",
                           "mappingFile",
                           "onlyActiveAccounts",
                           "onlyActiveCustomers",
                           "overrideVoucherDateOnDiscrepancy",
                           "overwriteCustomersContacts",
                           "saftFile",
                           "tripletexGeneratesCustomerNumbers",
                           "updateAccountNames",
                           "updateStartBalance"
                        ],
                        "properties": {
                           "saftFile": {
                              "type": "string",
                              "description": "The SAF-T file (XML)",
                              "format": "binary"
                           },
                           "mappingFile": {
                              "type": "string",
                              "description": "Mapping of chart of accounts (Excel). See https://tripletex.no/resources/examples/saft_account_mapping.xls",
                              "format": "binary"
                           },
                           "importCustomerVendors": {
                              "type": "boolean",
                              "description": "Create customers and suppliers"
                           },
                           "createMissingAccounts": {
                              "type": "boolean",
                              "description": "Create new accounts"
                           },
                           "importStartBalanceFromOpening": {
                              "type": "boolean",
                              "description": "Create an opening balance from the import file's starting balance."
                           },
                           "importStartBalanceFromClosing": {
                              "type": "boolean",
                              "description": "Create an opening balance from the import file's outgoing balance."
                           },
                           "importVouchers": {
                              "type": "boolean",
                              "description": "Create vouchers"
                           },
                           "importDepartments": {
                              "type": "boolean",
                              "description": "Create departments"
                           },
                           "importProjects": {
                              "type": "boolean",
                              "description": "Create projects"
                           },
                           "tripletexGeneratesCustomerNumbers": {
                              "type": "boolean",
                              "description": "Let Tripletex create customer and supplier numbers and ignore the numbers in the import file."
                           },
                           "createCustomerIB": {
                              "type": "boolean",
                              "description": "Create an opening balance on accounts receivable from customers"
                           },
                           "updateAccountNames": {
                              "type": "boolean",
                              "description": "Overwrite existing names on accounts"
                           },
                           "createVendorIB": {
                              "type": "boolean",
                              "description": "Create an opening balance on accounts payable"
                           },
                           "overrideVoucherDateOnDiscrepancy": {
                              "type": "boolean",
                              "description": "Overwrite transaction date on period discrepancies."
                           },
                           "overwriteCustomersContacts": {
                              "type": "boolean",
                              "description": "Overwrite existing customers/contacts"
                           },
                           "onlyActiveCustomers": {
                              "type": "boolean",
                              "description": "Only active customers"
                           },
                           "onlyActiveAccounts": {
                              "type": "boolean",
                              "description": "Only active accounts"
                           },
                           "updateStartBalance": {
                              "type": "boolean",
                              "description": "Update the opening balance of main ledger accounts from the import file by import before the opening balance."
                           }
                        }
                     }
                  }
               },
               "required": true
            },
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/salary/type/{id}": {
         "get": {
            "tags": [
               "salary/type"
            ],
            "summary": "Find salary type by ID.",
            "operationId": "SalaryType_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperSalaryType"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/salary/type": {
         "get": {
            "tags": [
               "salary/type"
            ],
            "summary": "Find salary type corresponding with sent data.",
            "operationId": "SalaryType_search",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "number",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "name",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "description",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "showInTimesheet",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "isInactive",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "employeeIds",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseSalaryType"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/salary/compilation": {
         "get": {
            "tags": [
               "salary/compilation"
            ],
            "summary": "Find salary compilation by employee.",
            "operationId": "SalaryCompilation_get",
            "parameters": [
               {
                  "name": "employeeId",
                  "in": "query",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "year",
                  "in": "query",
                  "description": "Must be between 1900-2100. Defaults to previous year.",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperSalaryCompilation"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/salary/payslip/{id}": {
         "get": {
            "tags": [
               "salary/payslip"
            ],
            "summary": "Find payslip by ID.",
            "operationId": "SalaryPayslip_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperPayslip"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/salary/payslip": {
         "get": {
            "tags": [
               "salary/payslip"
            ],
            "summary": "Find payslips corresponding with sent data.",
            "operationId": "SalaryPayslip_search",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "employeeId",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "wageTransactionId",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "activityId",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "yearFrom",
                  "in": "query",
                  "description": "From and including",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "yearTo",
                  "in": "query",
                  "description": "To and excluding",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "monthFrom",
                  "in": "query",
                  "description": "From and including",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "monthTo",
                  "in": "query",
                  "description": "To and excluding",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "voucherDateFrom",
                  "in": "query",
                  "description": "From and including",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "voucherDateTo",
                  "in": "query",
                  "description": "To and excluding",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "comment",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponsePayslip"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/salary/settings": {
         "get": {
            "tags": [
               "salary/settings"
            ],
            "summary": "Get salary settings of logged in company.",
            "operationId": "SalarySettings_get",
            "parameters": [
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperSalarySettings"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "salary/settings"
            ],
            "summary": "Update settings of logged in company.",
            "operationId": "SalarySettings_put",
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/SalarySettings"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperSalarySettings"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/salary/settings/holiday/{id}": {
         "put": {
            "tags": [
               "salary/settings/holiday"
            ],
            "summary": "Update a holiday setting of current logged in company.",
            "operationId": "SalarySettingsHoliday_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/CompanyHoliday"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperCompanyHoliday"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/salary/settings/holiday": {
         "get": {
            "tags": [
               "salary/settings/holiday"
            ],
            "summary": "Find holiday settings of current logged in company.",
            "operationId": "SalarySettingsHoliday_search",
            "parameters": [
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseCompanyHoliday"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "salary/settings/holiday"
            ],
            "summary": "Create a holiday setting of current logged in company.",
            "operationId": "SalarySettingsHoliday_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/CompanyHoliday"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperCompanyHoliday"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/salary/settings/holiday/list": {
         "put": {
            "tags": [
               "salary/settings/holiday"
            ],
            "summary": "Update multiple holiday settings of current logged in company.",
            "operationId": "SalarySettingsHolidayList_putList",
            "requestBody": {
               "description": "JSON representing updates to objects. Should have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/CompanyHoliday"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseCompanyHoliday"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "post": {
            "tags": [
               "salary/settings/holiday"
            ],
            "summary": "Create multiple holiday settings of current logged in company.",
            "operationId": "SalarySettingsHolidayList_postList",
            "requestBody": {
               "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/CompanyHoliday"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseCompanyHoliday"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "salary/settings/holiday"
            ],
            "summary": "Delete multiple holiday settings of current logged in company.",
            "operationId": "SalarySettingsHolidayList_deleteByIds",
            "parameters": [
               {
                  "name": "ids",
                  "in": "query",
                  "description": "ID of the elements",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/salary/settings/pensionScheme/{id}": {
         "get": {
            "tags": [
               "salary/settings/pensionScheme"
            ],
            "summary": "Get Pension Scheme for a specific ID",
            "operationId": "SalarySettingsPensionScheme_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperPensionScheme"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "salary/settings/pensionScheme"
            ],
            "summary": "Update a Pension Scheme",
            "operationId": "SalarySettingsPensionScheme_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "*/*": {
                     "schema": {
                        "$ref": "#/components/schemas/PensionScheme"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperPensionScheme"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "salary/settings/pensionScheme"
            ],
            "summary": "Delete a Pension Scheme",
            "operationId": "SalarySettingsPensionScheme_delete",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/salary/settings/pensionScheme": {
         "get": {
            "tags": [
               "salary/settings/pensionScheme"
            ],
            "summary": "Find pension schemes.",
            "operationId": "SalarySettingsPensionScheme_search",
            "parameters": [
               {
                  "name": "number",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponsePensionScheme"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "salary/settings/pensionScheme"
            ],
            "summary": "Create a Pension Scheme.",
            "operationId": "SalarySettingsPensionScheme_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "*/*": {
                     "schema": {
                        "$ref": "#/components/schemas/PensionScheme"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperPensionScheme"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/salary/settings/pensionScheme/list": {
         "put": {
            "tags": [
               "salary/settings/pensionScheme"
            ],
            "summary": "Update multiple Pension Schemes.",
            "operationId": "SalarySettingsPensionSchemeList_putList",
            "requestBody": {
               "description": "JSON representing updates to objects. Should have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/PensionScheme"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponsePensionScheme"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "post": {
            "tags": [
               "salary/settings/pensionScheme"
            ],
            "summary": "Create multiple Pension Schemes.",
            "operationId": "SalarySettingsPensionSchemeList_postList",
            "requestBody": {
               "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/PensionScheme"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponsePensionScheme"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "salary/settings/pensionScheme"
            ],
            "summary": "Delete multiple Pension Schemes.",
            "operationId": "SalarySettingsPensionSchemeList_deleteByIds",
            "parameters": [
               {
                  "name": "ids",
                  "in": "query",
                  "description": "ID of the elements",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/salary/settings/standardTime/{id}": {
         "get": {
            "tags": [
               "salary/settings/standardTime"
            ],
            "summary": "Find standard time by ID.",
            "operationId": "SalarySettingsStandardTime_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperCompanyStandardTime"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "salary/settings/standardTime"
            ],
            "summary": "Update standard time. ",
            "operationId": "SalarySettingsStandardTime_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/CompanyStandardTime"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperCompanyStandardTime"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/salary/settings/standardTime": {
         "get": {
            "tags": [
               "salary/settings/standardTime"
            ],
            "summary": "Get all standard times.",
            "operationId": "SalarySettingsStandardTime_search",
            "parameters": [
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseCompanyStandardTime"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "salary/settings/standardTime"
            ],
            "summary": "Create standard time.",
            "operationId": "SalarySettingsStandardTime_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/CompanyStandardTime"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperCompanyStandardTime"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/salary/settings/standardTime/byDate": {
         "get": {
            "tags": [
               "salary/settings/standardTime"
            ],
            "summary": "Find standard time by date",
            "operationId": "SalarySettingsStandardTimeByDate_getByDate",
            "parameters": [
               {
                  "name": "date",
                  "in": "query",
                  "description": "yyyy-MM-dd. Defaults to today.",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperCompanyStandardTime"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/salary/transaction/{id}": {
         "get": {
            "tags": [
               "salary/transaction"
            ],
            "summary": "Find salary transaction by ID.",
            "operationId": "SalaryTransaction_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperSalaryTransaction"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "delete": {
            "tags": [
               "salary/transaction"
            ],
            "summary": "Delete salary transaction by ID.",
            "operationId": "SalaryTransaction_delete",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/salary/transaction": {
         "post": {
            "tags": [
               "salary/transaction"
            ],
            "summary": "Create a new salary transaction.",
            "operationId": "SalaryTransaction_post",
            "parameters": [
               {
                  "name": "generateTaxDeduction",
                  "in": "query",
                  "description": "Generate tax deduction",
                  "schema": {
                     "type": "boolean",
                     "default": false
                  }
               }
            ],
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/SalaryTransaction"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperSalaryTransaction"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/salary/transaction/{id}/attachment": {
         "post": {
            "tags": [
               "salary/transaction"
            ],
            "summary": "Upload an attachment to a salary transaction",
            "operationId": "SalaryTransactionAttachment_uploadAttachment",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Salary Transaction Id to upload attachment to.",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "multipart/form-data": {
                     "schema": {
                        "required": [
                           "file"
                        ],
                        "properties": {
                           "file": {
                              "type": "string",
                              "description": "The file",
                              "format": "binary"
                           }
                        }
                     }
                  }
               },
               "required": true
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperInteger"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/salary/transaction/{id}/attachment/list": {
         "post": {
            "tags": [
               "salary/transaction"
            ],
            "summary": "Upload multiple attachments to a salary transaction",
            "operationId": "SalaryTransactionAttachmentList_uploadAttachments",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Salary Transaction Id to upload attachments to.",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Multipart files",
               "content": {
                  "multipart/form-data": {
                     "schema": {
                        "$ref": "#/components/schemas/FormDataMultiPart"
                     }
                  }
               },
               "required": true
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperInteger"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/salary/transaction/{id}/deleteAttachment": {
         "put": {
            "tags": [
               "salary/transaction"
            ],
            "summary": "Delete attachment.",
            "operationId": "SalaryTransactionDeleteAttachment_deleteAttachment",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of transaction containing the attachment to delete.",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "sendToVoucherInbox",
                  "in": "query",
                  "description": "Should the attachment be sent to inbox rather than deleted?",
                  "schema": {
                     "type": "boolean",
                     "default": false
                  }
               },
               {
                  "name": "split",
                  "in": "query",
                  "description": "If sendToInbox is true, should the attachment be split into one voucher per page?",
                  "schema": {
                     "type": "boolean",
                     "default": false
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/supplier/{id}": {
         "get": {
            "tags": [
               "supplier"
            ],
            "summary": "Get supplier by ID.",
            "operationId": "Supplier_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperSupplier"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "supplier"
            ],
            "summary": "Update supplier. ",
            "operationId": "Supplier_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/Supplier"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperSupplier"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "supplier"
            ],
            "summary": "[BETA] Delete supplier by ID",
            "operationId": "Supplier_delete",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/supplier": {
         "get": {
            "tags": [
               "supplier"
            ],
            "summary": "Find suppliers corresponding with sent data.",
            "operationId": "Supplier_search",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "supplierNumber",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "organizationNumber",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "email",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "invoiceEmail",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "isInactive",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean",
                     "default": false
                  }
               },
               {
                  "name": "accountManagerId",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "changedSince",
                  "in": "query",
                  "description": "Only return elements that have changed since this date and time",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "isWholesaler",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "showProducts",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseSupplier"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "supplier"
            ],
            "summary": "Create supplier. Related supplier addresses may also be created.",
            "operationId": "Supplier_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/Supplier"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperSupplier"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/supplier/list": {
         "put": {
            "tags": [
               "supplier"
            ],
            "summary": "[BETA] Update multiple suppliers. Addresses can also be updated.",
            "operationId": "SupplierList_putList",
            "requestBody": {
               "description": "JSON representing updates to objects. Should have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/Supplier"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseSupplier"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "post": {
            "tags": [
               "supplier"
            ],
            "summary": "[BETA] Create multiple suppliers. Related supplier addresses may also be created.",
            "operationId": "SupplierList_postList",
            "requestBody": {
               "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/Supplier"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseSupplier"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/supplierInvoice/{id}": {
         "get": {
            "tags": [
               "supplierInvoice"
            ],
            "summary": "Get supplierInvoice by ID.",
            "operationId": "SupplierInvoice_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperSupplierInvoice"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/supplierInvoice": {
         "get": {
            "tags": [
               "supplierInvoice"
            ],
            "summary": "Find supplierInvoices corresponding with sent data.",
            "operationId": "SupplierInvoice_search",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "invoiceDateFrom",
                  "in": "query",
                  "description": "From and including",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "invoiceDateTo",
                  "in": "query",
                  "description": "To and excluding",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "invoiceNumber",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "kid",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "voucherId",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "supplierId",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseSupplierInvoice"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/supplierInvoice/{invoiceId}/:approve": {
         "put": {
            "tags": [
               "supplierInvoice"
            ],
            "summary": "Approve supplier invoice.",
            "operationId": "SupplierInvoiceApprove_approve",
            "parameters": [
               {
                  "name": "invoiceId",
                  "in": "path",
                  "description": "ID of the elements",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "comment",
                  "in": "query",
                  "description": "comment",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperSupplierInvoice"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/supplierInvoice/forApproval": {
         "get": {
            "tags": [
               "supplierInvoice"
            ],
            "summary": "Get supplierInvoices for approval",
            "operationId": "SupplierInvoiceForApproval_getApprovalInvoices",
            "parameters": [
               {
                  "name": "searchText",
                  "in": "query",
                  "description": "Search for department, employee, project and more",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "showAll",
                  "in": "query",
                  "description": "Show all or just your own",
                  "schema": {
                     "type": "boolean",
                     "default": false
                  }
               },
               {
                  "name": "employeeId",
                  "in": "query",
                  "description": "Default is logged in employee",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseSupplierInvoice"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/supplierInvoice/voucher/{id}/postings": {
         "put": {
            "tags": [
               "supplierInvoice"
            ],
            "summary": "[BETA] Put debit postings.",
            "operationId": "SupplierInvoiceVoucherPostings_putPostings",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Voucher id",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "sendToLedger",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean",
                     "default": false
                  }
               },
               {
                  "name": "voucherDate",
                  "in": "query",
                  "description": "If set, the date of the voucher and the supplier invoice will be changed to this date. If empty, date will not be changed",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "description": "Postings",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/OrderLinePostingDTO"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperSupplierInvoice"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/supplierInvoice/:approve": {
         "put": {
            "tags": [
               "supplierInvoice"
            ],
            "summary": "Approve supplier invoices.",
            "operationId": "SupplierInvoiceApprove_approveMany",
            "parameters": [
               {
                  "name": "invoiceIds",
                  "in": "query",
                  "description": "ID of the elements",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "comment",
                  "in": "query",
                  "description": "comment",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseSupplierInvoice"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/supplierInvoice/:addRecipient": {
         "put": {
            "tags": [
               "supplierInvoice"
            ],
            "summary": "Add recipient.",
            "operationId": "SupplierInvoiceAddRecipient_addRecipientToMany",
            "parameters": [
               {
                  "name": "employeeId",
                  "in": "query",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "invoiceIds",
                  "in": "query",
                  "description": "ID of the elements",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "comment",
                  "in": "query",
                  "description": "comment",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseSupplierInvoice"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/supplierInvoice/{invoiceId}/:addRecipient": {
         "put": {
            "tags": [
               "supplierInvoice"
            ],
            "summary": "Add recipient to supplier invoices.",
            "operationId": "SupplierInvoiceAddRecipient_addRecipient",
            "parameters": [
               {
                  "name": "invoiceId",
                  "in": "path",
                  "description": "Invoice ID.",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "employeeId",
                  "in": "query",
                  "description": "ID of the elements",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "comment",
                  "in": "query",
                  "description": "comment",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperSupplierInvoice"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/supplierInvoice/:reject": {
         "put": {
            "tags": [
               "supplierInvoice"
            ],
            "summary": "reject supplier invoices.",
            "operationId": "SupplierInvoiceReject_rejectMany",
            "parameters": [
               {
                  "name": "comment",
                  "in": "query",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "invoiceIds",
                  "in": "query",
                  "description": "ID of the elements",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseSupplierInvoice"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/supplierInvoice/{invoiceId}/:changeDimension": {
         "put": {
            "tags": [
               "supplierInvoice"
            ],
            "summary": "Change dimension on a supplier invoice.",
            "operationId": "SupplierInvoiceChangeDimension_changeDimensionMany",
            "parameters": [
               {
                  "name": "invoiceId",
                  "in": "path",
                  "description": "Invoice ID.",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "debitPostingIds",
                  "in": "query",
                  "description": "ID of the elements",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "dimension",
                  "in": "query",
                  "description": "Dimension",
                  "required": true,
                  "schema": {
                     "type": "string",
                     "enum": [
                        "PROJECT",
                        "DEPARTMENT",
                        "EMPLOYEE",
                        "PRODUCT"
                     ]
                  }
               },
               {
                  "name": "dimensionId",
                  "in": "query",
                  "description": "DimensionID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperSupplierInvoice"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/supplierInvoice/{invoiceId}/:addPayment": {
         "post": {
            "tags": [
               "supplierInvoice"
            ],
            "summary": "Register payment, paymentType == 0 finds the last paymentType for this vendor",
            "operationId": "SupplierInvoiceAddPayment_addPayment",
            "parameters": [
               {
                  "name": "invoiceId",
                  "in": "path",
                  "description": "Invoice ID.",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "paymentType",
                  "in": "query",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "amount",
                  "in": "query",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "kidOrReceiverReference",
                  "in": "query",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "bban",
                  "in": "query",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "paymentDate",
                  "in": "query",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "useDefaultPaymentType",
                  "in": "query",
                  "description": "Set paymentType to last type for vendor, autopay, nets or first available other type",
                  "schema": {
                     "type": "boolean",
                     "default": false
                  }
               },
               {
                  "name": "partialPayment",
                  "in": "query",
                  "description": "Set to true to allow multiple payments registered.",
                  "schema": {
                     "type": "boolean",
                     "default": false
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperSupplierInvoice"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/supplierInvoice/{invoiceId}/:reject": {
         "put": {
            "tags": [
               "supplierInvoice"
            ],
            "summary": "reject supplier invoice.",
            "operationId": "SupplierInvoiceReject_reject",
            "parameters": [
               {
                  "name": "invoiceId",
                  "in": "path",
                  "description": "Invoice ID.",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "comment",
                  "in": "query",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperSupplierInvoice"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/voucherApprovalListElement/{id}": {
         "get": {
            "tags": [
               "voucherApprovalListElement"
            ],
            "summary": "Get by ID.",
            "operationId": "VoucherApprovalListElement_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperVoucherApprovalListElement"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/timesheet/allocated/{id}": {
         "get": {
            "tags": [
               "timesheet/allocated"
            ],
            "summary": "Find allocated hour entry by ID.",
            "operationId": "TimesheetAllocated_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperTimesheetAllocated"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "timesheet/allocated"
            ],
            "summary": "Update allocated hour entry by ID. Note: Allocated hour entry object fields which are present but not set, or set to 0, will be nulled. Only holiday/vacation hours can receive comments. A notification will be sent to the entry's employee if the entry's comment has changed.",
            "operationId": "TimesheetAllocated_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/TimesheetAllocated"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperTimesheetAllocated"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "timesheet/allocated"
            ],
            "summary": "Delete allocated hour entry by ID.",
            "operationId": "TimesheetAllocated_delete",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "version",
                  "in": "query",
                  "description": "Number of current version",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/timesheet/allocated": {
         "get": {
            "tags": [
               "timesheet/allocated"
            ],
            "summary": "Find allocated hour entries corresponding with sent data.",
            "operationId": "TimesheetAllocated_search",
            "parameters": [
               {
                  "name": "ids",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "employeeIds",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "projectIds",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "activityIds",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "dateFrom",
                  "in": "query",
                  "description": "From and including",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "dateTo",
                  "in": "query",
                  "description": "To and excluding",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseTimesheetAllocated"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "timesheet/allocated"
            ],
            "summary": "Add new allocated hour entry. Only one entry per employee/date/activity/project combination is supported. Only holiday/vacation hours can receive comments. A notification will be sent to the entry's employee if the entry has a comment.",
            "operationId": "TimesheetAllocated_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/TimesheetAllocated"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperTimesheetAllocated"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/timesheet/allocated/list": {
         "put": {
            "tags": [
               "timesheet/allocated"
            ],
            "summary": "Update allocated hour entry. Multiple objects for different users can be sent in the same request. Note: Allocated hour entry object fields which are present but not set, or set to 0, will be nulled. Only holiday/vacation hours can receive comments. Notifications will be sent to the entries' employees if the entries' comments have changed.",
            "operationId": "TimesheetAllocatedList_putList",
            "requestBody": {
               "description": "List of allocated hour entry objects to update. Should have ID set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/TimesheetAllocated"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseTimesheetAllocated"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "post": {
            "tags": [
               "timesheet/allocated"
            ],
            "summary": "Add new allocated hour entry. Multiple objects for several users can be sent in the same request. Only holiday/vacation hours can receive comments. Notifications will be sent to the entries' employees if the entries have comments.",
            "operationId": "TimesheetAllocatedList_postList",
            "requestBody": {
               "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/TimesheetAllocated"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseTimesheetAllocated"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/timesheet/allocated/{id}/:approve": {
         "put": {
            "tags": [
               "timesheet/allocated"
            ],
            "summary": "Only for allocated hours on the company's internal holiday/vacation activity. Mark the allocated hour entry as approved. The hours will be copied to the time sheet. A notification will be sent to the entry's employee if the entry's approval status or comment has changed.",
            "operationId": "TimesheetAllocatedApprove_approve",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "managerComment",
                  "in": "query",
                  "description": "Comment to be added to the approved hour entry.",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperTimesheetAllocated"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/timesheet/allocated/{id}/:unapprove": {
         "put": {
            "tags": [
               "timesheet/allocated"
            ],
            "summary": "Only for allocated hours on the company's internal holiday/vacation activity. Mark the allocated hour entry as unapproved. A notification will be sent to the entry's employee if the entry's approval status or comment has changed.",
            "operationId": "TimesheetAllocatedUnapprove_unapprove",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "managerComment",
                  "in": "query",
                  "description": "Comment to be added to the unapproved hour entry.",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperTimesheetAllocated"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/timesheet/allocated/:approveList": {
         "put": {
            "tags": [
               "timesheet/allocated"
            ],
            "summary": "Only for allocated hours on the company's internal holiday/vacation activity. Mark the allocated hour entry/entries as approved. The hours will be copied to the time sheet. Notifications will be sent to the entries' employees if the entries' approval statuses or comments have changed. If IDs are provided, the other args are ignored.",
            "operationId": "TimesheetAllocatedApproveList_approveList",
            "parameters": [
               {
                  "name": "ids",
                  "in": "query",
                  "description": "List of allocated hour entry IDs.",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "employeeIds",
                  "in": "query",
                  "description": "List of IDs. Defaults to ID of token owner.",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "dateFrom",
                  "in": "query",
                  "description": "From and including",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "dateTo",
                  "in": "query",
                  "description": "To and excluding",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "managerComment",
                  "in": "query",
                  "description": "Comment to be added to all approved hour entries.",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseTimesheetAllocated"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/timesheet/allocated/:unapproveList": {
         "put": {
            "tags": [
               "timesheet/allocated"
            ],
            "summary": "Only for allocated hours on the company's internal holiday/vacation activity. Mark the allocated hour entry/entries as unapproved. Notifications will be sent to the entries' employees if the entries' approval statuses or comments have changed. If IDs are provided, the other args are ignored.",
            "operationId": "TimesheetAllocatedUnapproveList_unapproveList",
            "parameters": [
               {
                  "name": "ids",
                  "in": "query",
                  "description": "List of allocated hour entry IDs.",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "employeeIds",
                  "in": "query",
                  "description": "List of IDs. Defaults to ID of token owner.",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "dateFrom",
                  "in": "query",
                  "description": "From and including",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "dateTo",
                  "in": "query",
                  "description": "To and excluding",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "managerComment",
                  "in": "query",
                  "description": "Comment to be added to all unapproved hour entries.",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseTimesheetAllocated"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/timesheet/companyHoliday/{id}": {
         "get": {
            "tags": [
               "timesheet/companyHoliday"
            ],
            "summary": "[BETA] Get company holiday by its ID",
            "operationId": "TimesheetCompanyHoliday_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperCompanyHolidays"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "timesheet/companyHoliday"
            ],
            "summary": "[BETA] Update a company holiday",
            "operationId": "TimesheetCompanyHoliday_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/CompanyHolidays"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperCompanyHolidays"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "timesheet/companyHoliday"
            ],
            "summary": "[BETA] Delete a company holiday",
            "operationId": "TimesheetCompanyHoliday_delete",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/timesheet/companyHoliday": {
         "get": {
            "tags": [
               "timesheet/companyHoliday"
            ],
            "summary": "[BETA] Search for company holidays by id or year.",
            "operationId": "TimesheetCompanyHoliday_search",
            "parameters": [
               {
                  "name": "ids",
                  "in": "query",
                  "description": "ID of the elements",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "years",
                  "in": "query",
                  "description": "A year `2020` for instance",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseCompanyHolidays"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "timesheet/companyHoliday"
            ],
            "summary": "[BETA] Create a company holiday",
            "operationId": "TimesheetCompanyHoliday_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/CompanyHolidays"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperCompanyHolidays"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/timesheet/entry/{id}": {
         "get": {
            "tags": [
               "timesheet/entry"
            ],
            "summary": "Find timesheet entry by ID.",
            "operationId": "TimesheetEntry_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperTimesheetEntry"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "timesheet/entry"
            ],
            "summary": "Update timesheet entry by ID. Note: Timesheet entry object fields which are present but not set, or set to 0, will be nulled.",
            "operationId": "TimesheetEntry_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/TimesheetEntry"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperTimesheetEntry"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "timesheet/entry"
            ],
            "summary": "Delete timesheet entry by ID.",
            "operationId": "TimesheetEntry_delete",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "version",
                  "in": "query",
                  "description": "Number of current version",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/timesheet/entry": {
         "get": {
            "tags": [
               "timesheet/entry"
            ],
            "summary": "Find timesheet entry corresponding with sent data.",
            "operationId": "TimesheetEntry_search",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "employeeId",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "projectId",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "activityId",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "dateFrom",
                  "in": "query",
                  "description": "From and including",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "dateTo",
                  "in": "query",
                  "description": "To and excluding",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "comment",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/TimesheetEntrySearchResponse"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "timesheet/entry"
            ],
            "summary": "Add new timesheet entry. Only one entry per employee/date/activity/project combination is supported.",
            "operationId": "TimesheetEntry_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/TimesheetEntry"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperTimesheetEntry"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/timesheet/entry/>recentProjects": {
         "get": {
            "tags": [
               "timesheet/entry"
            ],
            "summary": "Find projects with recent activities (timesheet entry registered).",
            "operationId": "TimesheetEntryRecentProjects_getRecentProjects",
            "parameters": [
               {
                  "name": "employeeId",
                  "in": "query",
                  "description": "ID of employee with recent project hours Defaults to ID of token owner.",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseProject"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/timesheet/entry/>recentActivities": {
         "get": {
            "tags": [
               "timesheet/entry"
            ],
            "summary": "Find recently used timesheet activities.",
            "operationId": "TimesheetEntryRecentActivities_getRecentActivities",
            "parameters": [
               {
                  "name": "employeeId",
                  "in": "query",
                  "description": "ID of employee to find activities for. Defaults to ID of token owner.",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "projectId",
                  "in": "query",
                  "description": "ID of project to find activities for",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseActivity"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/timesheet/entry/list": {
         "put": {
            "tags": [
               "timesheet/entry"
            ],
            "summary": "Update timesheet entry. Multiple objects for different users can be sent in the same request.",
            "operationId": "TimesheetEntryList_putList",
            "requestBody": {
               "description": "List of timesheet entry objects to update",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/TimesheetEntry"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseTimesheetEntry"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "post": {
            "tags": [
               "timesheet/entry"
            ],
            "summary": "Add new timesheet entry. Multiple objects for several users can be sent in the same request.",
            "operationId": "TimesheetEntryList_postList",
            "requestBody": {
               "description": "List of timesheet entry objects",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/TimesheetEntry"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseTimesheetEntry"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/timesheet/entry/>totalHours": {
         "get": {
            "tags": [
               "timesheet/entry"
            ],
            "summary": "Find total hours registered on an employee in a specific period.",
            "operationId": "TimesheetEntryTotalHours_getTotalHours",
            "parameters": [
               {
                  "name": "employeeId",
                  "in": "query",
                  "description": "ID of employee to find hours for. Defaults to ID of token owner.",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "startDate",
                  "in": "query",
                  "description": "Format is yyyy-MM-dd (from and incl.). Defaults to today.",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "endDate",
                  "in": "query",
                  "description": "Format is yyyy-MM-dd (to and excl.). Defaults to tomorrow.",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperBigDecimal"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/timesheet/month/{id}": {
         "get": {
            "tags": [
               "timesheet/month"
            ],
            "summary": "Find monthly status entry by ID.",
            "operationId": "TimesheetMonth_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperMonthlyStatus"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/timesheet/month/:complete": {
         "put": {
            "tags": [
               "timesheet/month"
            ],
            "summary": "complete month(s).  If id is provided the other args are ignored",
            "operationId": "TimesheetMonthComplete_complete",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "Element ID",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "employeeIds",
                  "in": "query",
                  "description": "List of IDs. Defaults to ID of token owner.",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "monthYear",
                  "in": "query",
                  "description": "2020-01",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseMonthlyStatus"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/timesheet/month/:reopen": {
         "put": {
            "tags": [
               "timesheet/month"
            ],
            "summary": "reopen month(s).  If id is provided the other args are ignored",
            "operationId": "TimesheetMonthReopen_reopen",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "Element ID",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "employeeIds",
                  "in": "query",
                  "description": "List of IDs. Defaults to ID of token owner.",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "monthYear",
                  "in": "query",
                  "description": "2020-01",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseMonthlyStatus"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/timesheet/month/:approve": {
         "put": {
            "tags": [
               "timesheet/month"
            ],
            "summary": "approve month(s).  If id is provided the other args are ignored",
            "operationId": "TimesheetMonthApprove_approve",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "Element ID",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "employeeIds",
                  "in": "query",
                  "description": "List of IDs. Defaults to ID of token owner.",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "monthYear",
                  "in": "query",
                  "description": "2020-01",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "approvedUntilDate",
                  "in": "query",
                  "description": "yyyy-MM-dd. Defaults to today.. Defaults to end of month",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseMonthlyStatus"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/timesheet/month/:unapprove": {
         "put": {
            "tags": [
               "timesheet/month"
            ],
            "summary": "unapprove month(s).  If id is provided the other args are ignored",
            "operationId": "TimesheetMonthUnapprove_unapprove",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "Element ID",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "employeeIds",
                  "in": "query",
                  "description": "List of IDs. Defaults to ID of token owner.",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "monthYear",
                  "in": "query",
                  "description": "2020-01",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseMonthlyStatus"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/timesheet/month/byMonthNumber": {
         "get": {
            "tags": [
               "timesheet/month"
            ],
            "summary": "Find monthly status for given month.",
            "operationId": "TimesheetMonthByMonthNumber_getByMonthNumber",
            "parameters": [
               {
                  "name": "employeeIds",
                  "in": "query",
                  "description": "List of IDs. Defaults to ID of token owner.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "monthYear",
                  "in": "query",
                  "description": "2020-01",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseMonthlyStatus"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/timesheet/salaryProjectTypeSpecification/{id}": {
         "get": {
            "tags": [
               "timesheet/salaryProjectTypeSpecification"
            ],
            "summary": "[BETA] Get timesheet ProjectSalaryType Specification for a specific ID (PILOT USERS ONLY)",
            "operationId": "TimesheetSalaryProjectTypeSpecification_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperTimesheetProjectSalaryTypeSpecification"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "timesheet/salaryProjectTypeSpecification"
            ],
            "summary": "[BETA] Update a timesheet ProjectSalaryType Specification (PILOT USERS ONLY)",
            "operationId": "TimesheetSalaryProjectTypeSpecification_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "*/*": {
                     "schema": {
                        "$ref": "#/components/schemas/TimesheetProjectSalaryTypeSpecification"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperTimesheetProjectSalaryTypeSpecification"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "timesheet/salaryProjectTypeSpecification"
            ],
            "summary": "[BETA] Delete a timesheet SalaryType Specification (PILOT USERS ONLY)",
            "operationId": "TimesheetSalaryProjectTypeSpecification_delete",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/timesheet/salaryProjectTypeSpecification": {
         "get": {
            "tags": [
               "timesheet/salaryProjectTypeSpecification"
            ],
            "summary": "[BETA] Get list of timesheet ProjectSalaryType Specifications (PILOT USERS ONLY)",
            "operationId": "TimesheetSalaryProjectTypeSpecification_search",
            "parameters": [
               {
                  "name": "dateFrom",
                  "in": "query",
                  "description": "From and including",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "dateTo",
                  "in": "query",
                  "description": "To and excluding",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "employeeId",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "projectId",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseTimesheetProjectSalaryTypeSpecification"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "timesheet/salaryProjectTypeSpecification"
            ],
            "summary": "[BETA] Create a timesheet ProjectSalaryType Specification. (PILOT USERS ONLY)",
            "operationId": "TimesheetSalaryProjectTypeSpecification_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "*/*": {
                     "schema": {
                        "$ref": "#/components/schemas/TimesheetProjectSalaryTypeSpecification"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperTimesheetProjectSalaryTypeSpecification"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/timesheet/salaryTypeSpecification/{id}": {
         "get": {
            "tags": [
               "timesheet/salaryTypeSpecification"
            ],
            "summary": "[BETA] Get timesheet SalaryType Specification for a specific ID",
            "operationId": "TimesheetSalaryTypeSpecification_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperTimesheetSalaryTypeSpecification"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "timesheet/salaryTypeSpecification"
            ],
            "summary": "[BETA] Update a timesheet SalaryType Specification",
            "operationId": "TimesheetSalaryTypeSpecification_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "*/*": {
                     "schema": {
                        "$ref": "#/components/schemas/TimesheetSalaryTypeSpecification"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperTimesheetSalaryTypeSpecification"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "timesheet/salaryTypeSpecification"
            ],
            "summary": "[BETA] Delete a timesheet SalaryType Specification",
            "operationId": "TimesheetSalaryTypeSpecification_delete",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/timesheet/salaryTypeSpecification": {
         "get": {
            "tags": [
               "timesheet/salaryTypeSpecification"
            ],
            "summary": "[BETA] Get list of timesheet SalaryType Specifications",
            "operationId": "TimesheetSalaryTypeSpecification_search",
            "parameters": [
               {
                  "name": "dateFrom",
                  "in": "query",
                  "description": "From and including",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "dateTo",
                  "in": "query",
                  "description": "To and excluding",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "employeeId",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseTimesheetSalaryTypeSpecification"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "timesheet/salaryTypeSpecification"
            ],
            "summary": "[BETA] Create a timesheet SalaryType Specification. Only one entry per employee/date/SalaryType",
            "operationId": "TimesheetSalaryTypeSpecification_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "*/*": {
                     "schema": {
                        "$ref": "#/components/schemas/TimesheetSalaryTypeSpecification"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperTimesheetSalaryTypeSpecification"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/timesheet/settings": {
         "get": {
            "tags": [
               "timesheet/settings"
            ],
            "summary": "[BETA] Get timesheet settings of logged in company.",
            "operationId": "TimesheetSettings_get",
            "parameters": [
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperTimesheetSettings"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/timesheet/timeClock/{id}": {
         "get": {
            "tags": [
               "timesheet/timeClock"
            ],
            "summary": "Find time clock entry by ID.",
            "operationId": "TimesheetTimeClock_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperTimeClock"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "timesheet/timeClock"
            ],
            "summary": "Update time clock by ID.",
            "operationId": "TimesheetTimeClock_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/TimeClock"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperTimeClock"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/timesheet/timeClock/:start": {
         "put": {
            "tags": [
               "timesheet/timeClock"
            ],
            "summary": "Start time clock.",
            "operationId": "TimesheetTimeClockStart_start",
            "parameters": [
               {
                  "name": "employeeId",
                  "in": "query",
                  "description": "Employee ID. Defaults to ID of token owner.",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "projectId",
                  "in": "query",
                  "description": "Project ID",
                  "schema": {
                     "type": "integer",
                     "format": "int32",
                     "default": 0
                  }
               },
               {
                  "name": "activityId",
                  "in": "query",
                  "description": "Activity ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "date",
                  "in": "query",
                  "description": "Optional. Default is today’s date",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "lunchBreakDuration",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "minimum": 0,
                     "type": "number"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperTimeClock"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/timesheet/timeClock/{id}/:stop": {
         "put": {
            "tags": [
               "timesheet/timeClock"
            ],
            "summary": "Stop time clock.",
            "operationId": "TimesheetTimeClockStop_stop",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "version",
                  "in": "query",
                  "description": "Number of current version",
                  "schema": {
                     "type": "integer",
                     "format": "int32",
                     "default": 0
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/timesheet/timeClock": {
         "get": {
            "tags": [
               "timesheet/timeClock"
            ],
            "summary": "Find time clock entries corresponding with sent data.",
            "operationId": "TimesheetTimeClock_search",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "employeeId",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "projectId",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "activityId",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "dateFrom",
                  "in": "query",
                  "description": "From and including",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "dateTo",
                  "in": "query",
                  "description": "To and excluding",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "hourId",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "isRunning",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseTimeClock"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/timesheet/timeClock/present": {
         "get": {
            "tags": [
               "timesheet/timeClock"
            ],
            "summary": "Find a user’s present running time clock.",
            "operationId": "TimesheetTimeClockPresent_getPresent",
            "parameters": [
               {
                  "name": "employeeId",
                  "in": "query",
                  "description": "Employee ID. Defaults to ID of token owner.",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperTimeClock"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/timesheet/week": {
         "get": {
            "tags": [
               "timesheet/week"
            ],
            "summary": "Find weekly status By ID, week/year combination, employeeId. or an approver",
            "operationId": "TimesheetWeek_search",
            "parameters": [
               {
                  "name": "ids",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "employeeIds",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "weekYear",
                  "in": "query",
                  "description": "ISO-8601 week-year",
                  "schema": {
                     "type": "string"
                  },
                  "example": "2018-12"
               },
               {
                  "name": "approvedBy",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseWeek"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/timesheet/week/:complete": {
         "put": {
            "tags": [
               "timesheet/week"
            ],
            "summary": "Complete week. By ID or (ISO-8601 week and employeeId combination).",
            "operationId": "TimesheetWeekComplete_complete",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "employeeId",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "weekYear",
                  "in": "query",
                  "description": "ISO-8601 week-year",
                  "schema": {
                     "type": "string"
                  },
                  "example": "2018-12"
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperWeek"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/timesheet/week/:reopen": {
         "put": {
            "tags": [
               "timesheet/week"
            ],
            "summary": "Reopen week. By ID or (ISO-8601 week and employeeId combination).",
            "operationId": "TimesheetWeekReopen_reopen",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "employeeId",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "weekYear",
                  "in": "query",
                  "description": "ISO-8601 week-year",
                  "schema": {
                     "type": "string"
                  },
                  "example": "2018-12"
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperWeek"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/timesheet/week/:approve": {
         "put": {
            "tags": [
               "timesheet/week"
            ],
            "summary": "Approve week. By ID or (ISO-8601 week and employeeId combination).",
            "operationId": "TimesheetWeekApprove_approve",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "employeeId",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "weekYear",
                  "in": "query",
                  "description": "ISO-8601 week-year",
                  "schema": {
                     "type": "string"
                  },
                  "example": "2018-12"
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperWeek"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/timesheet/week/:unapprove": {
         "put": {
            "tags": [
               "timesheet/week"
            ],
            "summary": "Unapprove week. By ID or (ISO-8601 week and employeeId combination).",
            "operationId": "TimesheetWeekUnapprove_unapprove",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "employeeId",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "weekYear",
                  "in": "query",
                  "description": "ISO-8601 week-year",
                  "schema": {
                     "type": "string"
                  },
                  "example": "2018-12"
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperWeek"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/travelExpense/accommodationAllowance/{id}": {
         "get": {
            "tags": [
               "travelExpense/accommodationAllowance"
            ],
            "summary": "Get travel accommodation allowance by ID.",
            "operationId": "TravelExpenseAccommodationAllowance_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperAccommodationAllowance"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "travelExpense/accommodationAllowance"
            ],
            "summary": "Update accommodation allowance.",
            "operationId": "TravelExpenseAccommodationAllowance_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/AccommodationAllowance"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperAccommodationAllowance"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "travelExpense/accommodationAllowance"
            ],
            "summary": "Delete accommodation allowance.",
            "operationId": "TravelExpenseAccommodationAllowance_delete",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/travelExpense/accommodationAllowance": {
         "get": {
            "tags": [
               "travelExpense/accommodationAllowance"
            ],
            "summary": "Find accommodation allowances corresponding with sent data.",
            "operationId": "TravelExpenseAccommodationAllowance_search",
            "parameters": [
               {
                  "name": "travelExpenseId",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "rateTypeId",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "rateCategoryId",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "rateFrom",
                  "in": "query",
                  "description": "From and including",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "rateTo",
                  "in": "query",
                  "description": "To and excluding",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "countFrom",
                  "in": "query",
                  "description": "From and including",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "countTo",
                  "in": "query",
                  "description": "To and excluding",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "amountFrom",
                  "in": "query",
                  "description": "From and including",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "amountTo",
                  "in": "query",
                  "description": "To and excluding",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "location",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "address",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseAccommodationAllowance"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "travelExpense/accommodationAllowance"
            ],
            "summary": "Create accommodation allowance.",
            "operationId": "TravelExpenseAccommodationAllowance_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/AccommodationAllowance"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperAccommodationAllowance"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/travelExpense/cost/{id}": {
         "get": {
            "tags": [
               "travelExpense/cost"
            ],
            "summary": "Get cost by ID.",
            "operationId": "TravelExpenseCost_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperCost"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "travelExpense/cost"
            ],
            "summary": "Update cost.",
            "operationId": "TravelExpenseCost_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/Cost"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperCost"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "travelExpense/cost"
            ],
            "summary": "Delete cost.",
            "operationId": "TravelExpenseCost_delete",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/travelExpense/cost": {
         "get": {
            "tags": [
               "travelExpense/cost"
            ],
            "summary": "Find costs corresponding with sent data.",
            "operationId": "TravelExpenseCost_search",
            "parameters": [
               {
                  "name": "travelExpenseId",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "vatTypeId",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "currencyId",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "rateFrom",
                  "in": "query",
                  "description": "From and including",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "rateTo",
                  "in": "query",
                  "description": "To and excluding",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "countFrom",
                  "in": "query",
                  "description": "From and including",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "countTo",
                  "in": "query",
                  "description": "To and excluding",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "amountFrom",
                  "in": "query",
                  "description": "From and including",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "amountTo",
                  "in": "query",
                  "description": "To and excluding",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "location",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "address",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseCost"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "travelExpense/cost"
            ],
            "summary": "Create cost.",
            "operationId": "TravelExpenseCost_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/Cost"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperCost"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/travelExpense/cost/list": {
         "put": {
            "tags": [
               "travelExpense/cost"
            ],
            "summary": "Update costs.",
            "operationId": "TravelExpenseCostList_putList",
            "requestBody": {
               "description": "JSON representing updates to objects. Should have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/Cost"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseCost"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/travelExpense/costParticipant/{id}": {
         "get": {
            "tags": [
               "travelExpense/costParticipant"
            ],
            "summary": "Get cost participant by ID.",
            "operationId": "TravelExpenseCostParticipant_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperTravelExpenseParticipant"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "delete": {
            "tags": [
               "travelExpense/costParticipant"
            ],
            "summary": "Delete cost participant.",
            "operationId": "TravelExpenseCostParticipant_delete",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/travelExpense/costParticipant": {
         "post": {
            "tags": [
               "travelExpense/costParticipant"
            ],
            "summary": "Create participant on cost.",
            "operationId": "TravelExpenseCostParticipant_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/TravelExpenseParticipant"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperTravelExpenseParticipant"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/travelExpense/costParticipant/list": {
         "post": {
            "tags": [
               "travelExpense/costParticipant"
            ],
            "summary": "Create participants on cost.",
            "operationId": "TravelExpenseCostParticipantList_postList",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/TravelExpenseParticipant"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseTravelExpenseParticipant"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/travelExpense/costParticipant/{costId}/costParticipants": {
         "get": {
            "tags": [
               "travelExpense/costParticipant"
            ],
            "summary": "Get cost's participants by costId.",
            "operationId": "TravelExpenseCostParticipantCostParticipants_getCostParticipants",
            "parameters": [
               {
                  "name": "costId",
                  "in": "path",
                  "description": "ID of cost",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseTravelExpenseParticipant"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/travelExpense/costParticipant/createCostParticipantAdvanced": {
         "post": {
            "tags": [
               "travelExpense/costParticipant"
            ],
            "summary": "Create participant on cost using explicit parameters",
            "operationId": "TravelExpenseCostParticipantCreateCostParticipantAdvanced_createCostParticipantAdvanced",
            "parameters": [
               {
                  "name": "displayName",
                  "in": "query",
                  "description": "The name of the participant",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "costId",
                  "in": "query",
                  "description": "ID of cost",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "employeeId",
                  "in": "query",
                  "description": "ID of the employee if it is participant. 0 is allowed if the participant is not an employee",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperTravelExpenseParticipant"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/travelExpense/drivingStop/{id}": {
         "get": {
            "tags": [
               "travelExpense/drivingStop"
            ],
            "summary": "Get driving stop by ID.",
            "operationId": "TravelExpenseDrivingStop_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperDrivingStop"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "delete": {
            "tags": [
               "travelExpense/drivingStop"
            ],
            "summary": "Delete mileage allowance stops.",
            "operationId": "TravelExpenseDrivingStop_delete",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/travelExpense/drivingStop": {
         "post": {
            "tags": [
               "travelExpense/drivingStop"
            ],
            "summary": "Create mileage allowance driving stop.",
            "operationId": "TravelExpenseDrivingStop_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/DrivingStop"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperDrivingStop"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/travelExpense/mileageAllowance/{id}": {
         "get": {
            "tags": [
               "travelExpense/mileageAllowance"
            ],
            "summary": "Get mileage allowance by ID.",
            "operationId": "TravelExpenseMileageAllowance_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperMileageAllowance"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "travelExpense/mileageAllowance"
            ],
            "summary": "Update mileage allowance.",
            "operationId": "TravelExpenseMileageAllowance_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/MileageAllowance"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperMileageAllowance"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "travelExpense/mileageAllowance"
            ],
            "summary": "Delete mileage allowance.",
            "operationId": "TravelExpenseMileageAllowance_delete",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/travelExpense/mileageAllowance": {
         "get": {
            "tags": [
               "travelExpense/mileageAllowance"
            ],
            "summary": "Find mileage allowances corresponding with sent data.",
            "operationId": "TravelExpenseMileageAllowance_search",
            "parameters": [
               {
                  "name": "travelExpenseId",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "rateTypeId",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "rateCategoryId",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "kmFrom",
                  "in": "query",
                  "description": "From and including",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "kmTo",
                  "in": "query",
                  "description": "To and excluding",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "rateFrom",
                  "in": "query",
                  "description": "From and including",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "rateTo",
                  "in": "query",
                  "description": "To and excluding",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "amountFrom",
                  "in": "query",
                  "description": "From and including",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "amountTo",
                  "in": "query",
                  "description": "To and excluding",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "departureLocation",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "destination",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "dateFrom",
                  "in": "query",
                  "description": "From and including",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "dateTo",
                  "in": "query",
                  "description": "To and excluding",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "isCompanyCar",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseMileageAllowance"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "travelExpense/mileageAllowance"
            ],
            "summary": "Create mileage allowance.",
            "operationId": "TravelExpenseMileageAllowance_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/MileageAllowance"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperMileageAllowance"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/travelExpense/passenger/{id}": {
         "get": {
            "tags": [
               "travelExpense/passenger"
            ],
            "summary": "Get passenger by ID.",
            "operationId": "TravelExpensePassenger_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperPassenger"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "travelExpense/passenger"
            ],
            "summary": "Update passenger.",
            "operationId": "TravelExpensePassenger_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/Passenger"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperPassenger"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "travelExpense/passenger"
            ],
            "summary": "Delete passenger.",
            "operationId": "TravelExpensePassenger_delete",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/travelExpense/passenger": {
         "get": {
            "tags": [
               "travelExpense/passenger"
            ],
            "summary": "Find passengers corresponding with sent data.",
            "operationId": "TravelExpensePassenger_search",
            "parameters": [
               {
                  "name": "mileageAllowance",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "name",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponsePassenger"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "travelExpense/passenger"
            ],
            "summary": "Create passenger.",
            "operationId": "TravelExpensePassenger_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/Passenger"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperPassenger"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/travelExpense/passenger/list": {
         "post": {
            "tags": [
               "travelExpense/passenger"
            ],
            "summary": "Create passengers.",
            "operationId": "TravelExpensePassengerList_postList",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/Passenger"
                        }
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponsePassenger"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/travelExpense/perDiemCompensation/{id}": {
         "get": {
            "tags": [
               "travelExpense/perDiemCompensation"
            ],
            "summary": "Get per diem compensation by ID.",
            "operationId": "TravelExpensePerDiemCompensation_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperPerDiemCompensation"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "travelExpense/perDiemCompensation"
            ],
            "summary": "Update per diem compensation.",
            "operationId": "TravelExpensePerDiemCompensation_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/PerDiemCompensation"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperPerDiemCompensation"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "travelExpense/perDiemCompensation"
            ],
            "summary": "Delete per diem compensation.",
            "operationId": "TravelExpensePerDiemCompensation_delete",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/travelExpense/perDiemCompensation": {
         "get": {
            "tags": [
               "travelExpense/perDiemCompensation"
            ],
            "summary": "Find per diem compensations corresponding with sent data.",
            "operationId": "TravelExpensePerDiemCompensation_search",
            "parameters": [
               {
                  "name": "travelExpenseId",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "rateTypeId",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "rateCategoryId",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "overnightAccommodation",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string",
                     "enum": [
                        "NONE",
                        "HOTEL",
                        "BOARDING_HOUSE_WITHOUT_COOKING",
                        "BOARDING_HOUSE_WITH_COOKING"
                     ]
                  }
               },
               {
                  "name": "countFrom",
                  "in": "query",
                  "description": "From and including",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "countTo",
                  "in": "query",
                  "description": "To and excluding",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "rateFrom",
                  "in": "query",
                  "description": "From and including",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "rateTo",
                  "in": "query",
                  "description": "To and excluding",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "amountFrom",
                  "in": "query",
                  "description": "From and including",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "amountTo",
                  "in": "query",
                  "description": "To and excluding",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "location",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "address",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "isDeductionForBreakfast",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "isLunchDeduction",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "isDinnerDeduction",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponsePerDiemCompensation"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "travelExpense/perDiemCompensation"
            ],
            "summary": "Create per diem compensation.",
            "operationId": "TravelExpensePerDiemCompensation_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/PerDiemCompensation"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperPerDiemCompensation"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/travelExpense/{id}": {
         "get": {
            "tags": [
               "travelExpense"
            ],
            "summary": "Get travel expense by ID.",
            "operationId": "TravelExpense_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperTravelExpense"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "put": {
            "tags": [
               "travelExpense"
            ],
            "summary": "Update travel expense.",
            "operationId": "TravelExpense_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/TravelExpense"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperTravelExpense"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         },
         "delete": {
            "tags": [
               "travelExpense"
            ],
            "summary": "Delete travel expense.",
            "operationId": "TravelExpense_delete",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/travelExpense/:copy": {
         "put": {
            "tags": [
               "travelExpense"
            ],
            "summary": "Copy travel expense.",
            "operationId": "TravelExpenseCopy_copy",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperTravelExpense"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/travelExpense": {
         "get": {
            "tags": [
               "travelExpense"
            ],
            "summary": "Find travel expenses corresponding with sent data.",
            "operationId": "TravelExpense_search",
            "parameters": [
               {
                  "name": "employeeId",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "departmentId",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "projectId",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "projectManagerId",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "departureDateFrom",
                  "in": "query",
                  "description": "From and including",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "returnDateTo",
                  "in": "query",
                  "description": "To and excluding",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "state",
                  "in": "query",
                  "description": "category",
                  "schema": {
                     "type": "string",
                     "default": "ALL",
                     "enum": [
                        "ALL",
                        "OPEN",
                        "APPROVED",
                        "SALARY_PAID",
                        "DELIVERED",
                        "REJECTED"
                     ]
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseTravelExpense"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "travelExpense"
            ],
            "summary": "Create travel expense.",
            "operationId": "TravelExpense_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/TravelExpense"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperTravelExpense"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/travelExpense/:approve": {
         "put": {
            "tags": [
               "travelExpense"
            ],
            "summary": "Approve travel expenses.",
            "operationId": "TravelExpenseApprove_approve",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "ID of the elements",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseTravelExpense"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/travelExpense/:unapprove": {
         "put": {
            "tags": [
               "travelExpense"
            ],
            "summary": "Unapprove travel expenses.",
            "operationId": "TravelExpenseUnapprove_unapprove",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "ID of the elements",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseTravelExpense"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/travelExpense/{travelExpenseId}/attachment": {
         "post": {
            "tags": [
               "travelExpense"
            ],
            "summary": "Upload attachment to travel expense.",
            "operationId": "TravelExpenseAttachment_uploadAttachment",
            "parameters": [
               {
                  "name": "travelExpenseId",
                  "in": "path",
                  "description": "Travel Expense ID to upload attachment to.",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "createNewCost",
                  "in": "query",
                  "description": "Create new cost row when you add the attachment",
                  "schema": {
                     "type": "boolean",
                     "default": false
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "multipart/form-data": {
                     "schema": {
                        "required": [
                           "file"
                        ],
                        "properties": {
                           "file": {
                              "type": "string",
                              "description": "The file",
                              "format": "binary"
                           }
                        }
                     }
                  }
               },
               "required": true
            },
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "delete": {
            "tags": [
               "travelExpense"
            ],
            "summary": "Delete attachment.",
            "operationId": "TravelExpenseAttachment_deleteAttachment",
            "parameters": [
               {
                  "name": "travelExpenseId",
                  "in": "path",
                  "description": "ID of attachment containing the attachment to delete.",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "version",
                  "in": "query",
                  "description": "Version of voucher containing the attachment to delete.",
                  "schema": {
                     "minimum": 0,
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "sendToInbox",
                  "in": "query",
                  "description": "Should the attachment be sent to inbox rather than deleted?",
                  "schema": {
                     "type": "boolean",
                     "default": false
                  }
               },
               {
                  "name": "split",
                  "in": "query",
                  "description": "If sendToInbox is true, should the attachment be split into one voucher per page?",
                  "schema": {
                     "type": "boolean",
                     "default": false
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/travelExpense/{travelExpenseId}/attachment/list": {
         "post": {
            "tags": [
               "travelExpense"
            ],
            "summary": "Upload multiple attachments to travel expense.",
            "operationId": "TravelExpenseAttachmentList_uploadAttachments",
            "parameters": [
               {
                  "name": "travelExpenseId",
                  "in": "path",
                  "description": "Travel Expense ID to upload attachment to.",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "createNewCost",
                  "in": "query",
                  "description": "Create new cost row when you add the attachment",
                  "schema": {
                     "type": "boolean",
                     "default": false
                  }
               }
            ],
            "requestBody": {
               "description": "Multipart files",
               "content": {
                  "multipart/form-data": {
                     "schema": {
                        "$ref": "#/components/schemas/FormDataMultiPart"
                     }
                  }
               },
               "required": true
            },
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/travelExpense/:deliver": {
         "put": {
            "tags": [
               "travelExpense"
            ],
            "summary": "Deliver travel expenses.",
            "operationId": "TravelExpenseDeliver_deliver",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "ID of the elements",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseTravelExpense"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/travelExpense/:undeliver": {
         "put": {
            "tags": [
               "travelExpense"
            ],
            "summary": "Undeliver travel expenses.",
            "operationId": "TravelExpenseUndeliver_undeliver",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "ID of the elements",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "description": "Partial object describing what should be updated",
               "content": {
                  "*/*": {
                     "schema": {
                        "$ref": "#/components/schemas/TravelExpense"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseTravelExpense"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/travelExpense/:createVouchers": {
         "put": {
            "tags": [
               "travelExpense"
            ],
            "summary": "Create vouchers",
            "operationId": "TravelExpenseCreateVouchers_createVouchers",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "ID of the elements",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "date",
                  "in": "query",
                  "description": "yyyy-MM-dd. Defaults to today.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseTravelExpense"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/travelExpense/rate/{id}": {
         "get": {
            "tags": [
               "travelExpense/rate"
            ],
            "summary": "Get travel expense rate by ID.",
            "operationId": "TravelExpenseRate_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperTravelExpenseRate"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/travelExpense/rate": {
         "get": {
            "tags": [
               "travelExpense/rate"
            ],
            "summary": "Find rates corresponding with sent data.",
            "operationId": "TravelExpenseRate_search",
            "parameters": [
               {
                  "name": "rateCategoryId",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "type",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string",
                     "enum": [
                        "PER_DIEM",
                        "ACCOMMODATION_ALLOWANCE",
                        "MILEAGE_ALLOWANCE"
                     ]
                  }
               },
               {
                  "name": "isValidDayTrip",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "isValidAccommodation",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "isValidDomestic",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "isValidForeignTravel",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "requiresZone",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "requiresOvernightAccommodation",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "dateFrom",
                  "in": "query",
                  "description": "From and including",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "dateTo",
                  "in": "query",
                  "description": "To and excluding",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseTravelExpenseRate"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/travelExpense/rateCategory/{id}": {
         "get": {
            "tags": [
               "travelExpense/rateCategory"
            ],
            "summary": "Get travel expense rate category by ID.",
            "operationId": "TravelExpenseRateCategory_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperTravelExpenseRateCategory"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/travelExpense/rateCategory": {
         "get": {
            "tags": [
               "travelExpense/rateCategory"
            ],
            "summary": "Find rate categories corresponding with sent data.",
            "operationId": "TravelExpenseRateCategory_search",
            "parameters": [
               {
                  "name": "type",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string",
                     "enum": [
                        "PER_DIEM",
                        "ACCOMMODATION_ALLOWANCE",
                        "MILEAGE_ALLOWANCE"
                     ]
                  }
               },
               {
                  "name": "name",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "travelReportRateCategoryGroupId",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "ameldingWageCode",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "wageCodeNumber",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "isValidDayTrip",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "isValidAccommodation",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "isValidDomestic",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "requiresZone",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "isRequiresOvernightAccommodation",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "dateFrom",
                  "in": "query",
                  "description": "From and including",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "dateTo",
                  "in": "query",
                  "description": "To and excluding",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseTravelExpenseRateCategory"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/travelExpense/rateCategoryGroup/{id}": {
         "get": {
            "tags": [
               "travelExpense/rateCategoryGroup"
            ],
            "summary": "Get travel report rate category group by ID.",
            "operationId": "TravelExpenseRateCategoryGroup_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperTravelExpenseRateCategoryGroup"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/travelExpense/rateCategoryGroup": {
         "get": {
            "tags": [
               "travelExpense/rateCategoryGroup"
            ],
            "summary": "Find rate categoriy groups corresponding with sent data.",
            "operationId": "TravelExpenseRateCategoryGroup_search",
            "parameters": [
               {
                  "name": "name",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "isForeignTravel",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "dateFrom",
                  "in": "query",
                  "description": "From and including",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "dateTo",
                  "in": "query",
                  "description": "To and excluding",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseTravelExpenseRateCategoryGroup"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/travelExpense/costCategory/{id}": {
         "get": {
            "tags": [
               "travelExpense/costCategory"
            ],
            "summary": "Get cost category by ID.",
            "operationId": "TravelExpenseCostCategory_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperTravelCostCategory"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/travelExpense/costCategory": {
         "get": {
            "tags": [
               "travelExpense/costCategory"
            ],
            "summary": "Find cost category corresponding with sent data.",
            "operationId": "TravelExpenseCostCategory_search",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "description",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "isInactive",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "showOnEmployeeExpenses",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseTravelCostCategory"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/travelExpense/paymentType/{id}": {
         "get": {
            "tags": [
               "travelExpense/paymentType"
            ],
            "summary": "Get payment type by ID.",
            "operationId": "TravelExpensePaymentType_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperTravelPaymentType"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/travelExpense/paymentType": {
         "get": {
            "tags": [
               "travelExpense/paymentType"
            ],
            "summary": "Find payment type corresponding with sent data.",
            "operationId": "TravelExpensePaymentType_search",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "description",
                  "in": "query",
                  "description": "Containing",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "isInactive",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "showOnEmployeeExpenses",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseTravelPaymentType"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/travelExpense/settings": {
         "get": {
            "tags": [
               "travelExpense/settings"
            ],
            "summary": "Get travel expense settings of logged in company.",
            "operationId": "TravelExpenseSettings_get",
            "parameters": [
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperTravelExpenseSettings"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/travelExpense/zone/{id}": {
         "get": {
            "tags": [
               "travelExpensezone"
            ],
            "summary": "Get travel expense zone by ID.",
            "operationId": "TravelExpenseZone_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperTravelExpenseZone"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/travelExpense/zone": {
         "get": {
            "tags": [
               "travelExpensezone"
            ],
            "summary": "Find travel expense zones corresponding with sent data.",
            "operationId": "TravelExpenseZone_search",
            "parameters": [
               {
                  "name": "id",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "code",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "isDisabled",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseTravelExpenseZone"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/vatReturns/comment": {
         "get": {
            "tags": [
               "vatReturnscomment"
            ],
            "summary": "[BETA] - Get all structured comments related to a given vatCode",
            "operationId": "VatReturnsComment_query",
            "parameters": [
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseVatReturnsVatCodeComment"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/vatReturns/comment/>all": {
         "get": {
            "tags": [
               "vatReturnscomment"
            ],
            "summary": "[BETA] - Get all structured comments available",
            "operationId": "VatReturnsCommentAll_all",
            "parameters": [
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseVatReturnsComment"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/voucherMessage": {
         "get": {
            "tags": [
               "voucherMessage"
            ],
            "summary": "[BETA] Find voucherMessage (or a comment) put on a voucher by inputting voucher ids",
            "operationId": "VoucherMessage_search",
            "parameters": [
               {
                  "name": "voucherIds",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseVoucherMessage"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "voucherMessage"
            ],
            "summary": "[BETA] Post new voucherMessage.",
            "operationId": "VoucherMessage_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/VoucherMessage"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperVoucherMessage"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/voucherStatus/{id}": {
         "get": {
            "tags": [
               "voucherStatus"
            ],
            "summary": "Get voucherStatus by ID.",
            "operationId": "VoucherStatus_get",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Element ID",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperVoucherStatus"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/voucherStatus": {
         "get": {
            "tags": [
               "voucherStatus"
            ],
            "summary": "Find voucherStatus corresponding with sent data. The voucherStatus is used to coordinate integration processes. Requires setup done by Tripletex, currently supports debt collection.",
            "operationId": "VoucherStatus_search",
            "parameters": [
               {
                  "name": "ids",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "voucherIds",
                  "in": "query",
                  "description": "List of IDs",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "status",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string",
                     "enum": [
                        "WAITING",
                        "DONE",
                        "SKIPPED",
                        "ERROR",
                        "NONE",
                        "PROCESSING",
                        "RECLAIMED"
                     ]
                  }
               },
               {
                  "name": "type",
                  "in": "query",
                  "description": "Equals",
                  "schema": {
                     "type": "string",
                     "enum": [
                        "TRIPLETEX",
                        "SUPPLIERINVOICE_EXTERNAL",
                        "DEBT_COLLECTION"
                     ]
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "From index",
                  "schema": {
                     "type": "integer",
                     "default": 0
                  }
               },
               {
                  "name": "count",
                  "in": "query",
                  "description": "Number of elements to return",
                  "schema": {
                     "type": "integer",
                     "default": 1000
                  }
               },
               {
                  "name": "sorting",
                  "in": "query",
                  "description": "Sorting pattern",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ListResponseVoucherStatus"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "voucherStatus"
            ],
            "summary": "Post new voucherStatus.",
            "operationId": "VoucherStatus_post",
            "requestBody": {
               "description": "JSON representing the new object to be created. Should not have ID and version set.",
               "content": {
                  "application/json; charset=utf-8": {
                     "schema": {
                        "$ref": "#/components/schemas/VoucherStatus"
                     }
                  }
               },
               "required": false
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperVoucherStatus"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ],
            "x-codegen-request-body-name": "body"
         }
      },
      "/internal/favorites": {
         "get": {
            "tags": [
               "favorites/internal"
            ],
            "summary": "Get favorite menu",
            "operationId": "InternalFavorites_get",
            "parameters": [
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperFavoriteMenu"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "post": {
            "tags": [
               "favorites/internal"
            ],
            "summary": "Add new favorite",
            "operationId": "InternalFavorites_post",
            "requestBody": {
               "content": {
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "properties": {
                           "pageUrl": {
                              "type": "string",
                              "description": "Equals"
                           },
                           "name": {
                              "type": "string",
                              "description": "Equals"
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "200": {
                  "description": "successfully created",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperInteger"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/internal/favorites/{id}": {
         "put": {
            "tags": [
               "favorites/internal"
            ],
            "summary": "Update a favorite",
            "operationId": "InternalFavorites_put",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Equals",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "required": [
                           "name"
                        ],
                        "properties": {
                           "name": {
                              "type": "string",
                              "description": "Equals"
                           },
                           "rank": {
                              "type": "integer",
                              "description": "Equals",
                              "format": "int32"
                           }
                        }
                     }
                  }
               },
               "required": true
            },
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         },
         "delete": {
            "tags": [
               "favorites/internal"
            ],
            "summary": "Delete a favorite",
            "operationId": "InternalFavorites_delete",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Equals",
                  "required": true,
                  "schema": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            ],
            "responses": {
               "default": {
                  "description": "successful operation",
                  "content": {}
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      },
      "/internal/segmentation": {
         "get": {
            "tags": [
               "segmentation/internal"
            ],
            "summary": "Get segmentation data",
            "operationId": "InternalSegmentation_get",
            "parameters": [
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Fields filter pattern",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "successful operation",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ResponseWrapperSegmentationData"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "tokenAuthScheme": []
               }
            ]
         }
      }
   },
   "components": {
      "securitySchemes": {
         "tokenAuthScheme": {
            "type": "http",
            "description": "Basic AUTH where username is company/customer id for proxy use (or 0 for default), password should be set to the session token",
            "scheme": "basic"
         }
      },
      "schemas": {
         "Change": {
            "type": "object",
            "properties": {
               "employeeId": {
                  "type": "integer",
                  "format": "int32"
               },
               "timestamp": {
                  "type": "string",
                  "format": "date-time"
               },
               "changeType": {
                  "type": "string",
                  "enum": [
                     "CREATE",
                     "UPDATE",
                     "DELETE",
                     "LOCKED",
                     "REOPENED",
                     "DO_NOT_SHOW"
                  ]
               }
            }
         },
         "Activity": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "name": {
                  "maxLength": 255,
                  "type": "string"
               },
               "number": {
                  "maxLength": 100,
                  "type": "string"
               },
               "description": {
                  "type": "string"
               },
               "activityType": {
                  "type": "string",
                  "description": "PROJECT_SPECIFIC_ACTIVITY are made via project/projectactivity, as they must be part of a project.",
                  "enum": [
                     "GENERAL_ACTIVITY",
                     "PROJECT_GENERAL_ACTIVITY",
                     "PROJECT_SPECIFIC_ACTIVITY",
                     "TASK"
                  ]
               },
               "isProjectActivity": {
                  "type": "boolean",
                  "description": "Manipulate these with ActivityType",
                  "readOnly": true
               },
               "isGeneral": {
                  "type": "boolean",
                  "description": "Manipulate these with ActivityType",
                  "readOnly": true
               },
               "isTask": {
                  "type": "boolean",
                  "description": "Manipulate these with ActivityType",
                  "readOnly": true
               },
               "isDisabled": {
                  "type": "boolean",
                  "readOnly": true
               },
               "isChargeable": {
                  "type": "boolean"
               },
               "rate": {
                  "type": "number"
               },
               "costPercentage": {
                  "type": "number"
               },
               "displayName": {
                  "type": "string"
               }
            }
         },
         "ResponseWrapperActivity": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/Activity"
               }
            }
         },
         "ListResponseActivity": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Activity"
                  }
               }
            }
         },
         "Country": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "name": {
                  "type": "string",
                  "readOnly": true
               },
               "displayName": {
                  "type": "string",
                  "readOnly": true
               },
               "isoAlpha2Code": {
                  "type": "string",
                  "description": "The ISO 3166-1 Alpha2 code of the country (2 letters). https://en.wikipedia.org/wiki/ISO_3166-1",
                  "readOnly": true
               },
               "isoAlpha3Code": {
                  "type": "string",
                  "description": "The ISO 3166-1 Alpha3 code of the country (3 letters). https://en.wikipedia.org/wiki/ISO_3166-1",
                  "readOnly": true
               },
               "isoNumericCode": {
                  "type": "string",
                  "description": "The ISO 3166-1 numeric code of the country (3 digits). https://en.wikipedia.org/wiki/ISO_3166-1",
                  "readOnly": true
               }
            }
         },
         "DeliveryAddress": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "addressLine1": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
               },
               "addressLine2": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
               },
               "postalCode": {
                  "maxLength": 100,
                  "minLength": 0,
                  "type": "string"
               },
               "city": {
                  "maxLength": 100,
                  "minLength": 0,
                  "type": "string"
               },
               "country": {
                  "$ref": "#/components/schemas/Country"
               },
               "displayName": {
                  "type": "string",
                  "readOnly": true
               },
               "displayNameInklMatrikkel": {
                  "type": "string",
                  "readOnly": true
               },
               "knr": {
                  "minimum": 0,
                  "type": "integer",
                  "format": "int32"
               },
               "gnr": {
                  "minimum": 0,
                  "type": "integer",
                  "format": "int32"
               },
               "bnr": {
                  "minimum": 0,
                  "type": "integer",
                  "format": "int32"
               },
               "fnr": {
                  "minimum": 0,
                  "type": "integer",
                  "format": "int32"
               },
               "snr": {
                  "minimum": 0,
                  "type": "integer",
                  "format": "int32"
               },
               "unitNumber": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
               },
               "name": {
                  "maxLength": 100,
                  "type": "string"
               }
            }
         },
         "ResponseWrapperDeliveryAddress": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/DeliveryAddress"
               }
            }
         },
         "ListResponseDeliveryAddress": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/DeliveryAddress"
                  }
               }
            }
         },
         "VatType": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "name": {
                  "maxLength": 255,
                  "type": "string"
               },
               "number": {
                  "maxLength": 10,
                  "type": "string"
               },
               "displayName": {
                  "type": "string"
               },
               "percentage": {
                  "type": "number"
               },
               "deductionPercentage": {
                  "type": "number",
                  "description": "Percentage of the VAT amount that is deducted. Always 100% for all predefined VAT types, but can be lower for custom types for relative VAT."
               },
               "parentType": {
                  "$ref": "#/components/schemas/VatType"
               }
            }
         },
         "Currency": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "code": {
                  "type": "string"
               },
               "description": {
                  "type": "string"
               },
               "factor": {
                  "maximum": 100,
                  "minimum": 1,
                  "type": "integer",
                  "format": "int32"
               },
               "displayName": {
                  "type": "string"
               },
               "isDisabled": {
                  "type": "boolean"
               }
            }
         },
         "InternationalId": {
            "type": "object",
            "properties": {
               "intAmeldingType": {
                  "type": "string",
                  "description": "Define the employee's International Identificator.<br>PASSPORT_NO<br>NATIONAL_INSURANCE_NO<br>TAX_IDENTIFICATION_NO<br>VALUE_ADDED_TAX_IDENTIFICATION_NO",
                  "enum": [
                     "PASSPORT_NO",
                     "NATIONAL_INSURANCE_NO",
                     "TAX_IDENTIFICATION_NO",
                     "VALUE_ADDED_TAX_IDENTIFICATION_NO"
                  ]
               },
               "country": {
                  "$ref": "#/components/schemas/Country"
               },
               "number": {
                  "maxLength": 100,
                  "type": "string"
               }
            }
         },
         "Address": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "addressLine1": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
               },
               "addressLine2": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
               },
               "postalCode": {
                  "maxLength": 100,
                  "minLength": 0,
                  "type": "string"
               },
               "city": {
                  "maxLength": 100,
                  "minLength": 0,
                  "type": "string"
               },
               "country": {
                  "$ref": "#/components/schemas/Country"
               },
               "displayName": {
                  "type": "string",
                  "readOnly": true
               },
               "displayNameInklMatrikkel": {
                  "type": "string",
                  "readOnly": true
               },
               "knr": {
                  "minimum": 0,
                  "type": "integer",
                  "format": "int32"
               },
               "gnr": {
                  "minimum": 0,
                  "type": "integer",
                  "format": "int32"
               },
               "bnr": {
                  "minimum": 0,
                  "type": "integer",
                  "format": "int32"
               },
               "fnr": {
                  "minimum": 0,
                  "type": "integer",
                  "format": "int32"
               },
               "snr": {
                  "minimum": 0,
                  "type": "integer",
                  "format": "int32"
               },
               "unitNumber": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
               }
            }
         },
         "Department": {
            "required": [
               "name"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "name": {
                  "maxLength": 255,
                  "minLength": 1,
                  "type": "string"
               },
               "departmentNumber": {
                  "maxLength": 100,
                  "minLength": 0,
                  "type": "string"
               },
               "departmentManager": {
                  "$ref": "#/components/schemas/Employee"
               },
               "displayName": {
                  "type": "string",
                  "readOnly": true
               },
               "isInactive": {
                  "type": "boolean"
               }
            }
         },
         "Employee": {
            "required": [
               "firstName",
               "lastName"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "firstName": {
                  "maxLength": 100,
                  "minLength": 1,
                  "type": "string"
               },
               "lastName": {
                  "maxLength": 100,
                  "minLength": 1,
                  "type": "string"
               },
               "displayName": {
                  "type": "string",
                  "readOnly": true
               },
               "employeeNumber": {
                  "maxLength": 100,
                  "minLength": 0,
                  "type": "string"
               },
               "dateOfBirth": {
                  "type": "string"
               },
               "email": {
                  "maxLength": 100,
                  "type": "string",
                  "format": "email"
               },
               "phoneNumberMobileCountry": {
                  "$ref": "#/components/schemas/Country"
               },
               "phoneNumberMobile": {
                  "maxLength": 100,
                  "type": "string"
               },
               "phoneNumberHome": {
                  "maxLength": 100,
                  "type": "string"
               },
               "phoneNumberWork": {
                  "maxLength": 100,
                  "type": "string"
               },
               "nationalIdentityNumber": {
                  "maxLength": 100,
                  "type": "string"
               },
               "dnumber": {
                  "maxLength": 11,
                  "type": "string"
               },
               "internationalId": {
                  "$ref": "#/components/schemas/InternationalId"
               },
               "bankAccountNumber": {
                  "maxLength": 100,
                  "type": "string"
               },
               "iban": {
                  "type": "string",
                  "description": "IBAN field"
               },
               "bic": {
                  "type": "string",
                  "description": "Bic (swift) field"
               },
               "creditorBankCountryId": {
                  "type": "integer",
                  "description": "Country of creditor bank field",
                  "format": "int32"
               },
               "usesAbroadPayment": {
                  "type": "boolean",
                  "description": "UsesAbroadPayment field. Determines if we should use domestic or abroad remittance. To be able to use abroad remittance, one has to: 1: have Autopay 2: have valid combination of the fields Iban, Bic (swift) and Country of creditor bank. "
               },
               "userType": {
                  "type": "string",
                  "description": "Define the employee's user type.<br>STANDARD: Reduced access. Users with limited system entitlements.<br>EXTENDED: Users can be given all system entitlements.<br>NO_ACCESS: User with no log on access.<br>Users with access to Tripletex must confirm the email address.",
                  "enum": [
                     "STANDARD",
                     "EXTENDED",
                     "NO_ACCESS"
                  ]
               },
               "allowInformationRegistration": {
                  "type": "boolean",
                  "description": "Determines if salary information can be registered on the user including hours, travel expenses and employee expenses. The user may also be selected as a project member on projects.",
                  "readOnly": true
               },
               "isContact": {
                  "type": "boolean",
                  "readOnly": true
               },
               "comments": {
                  "type": "string"
               },
               "address": {
                  "$ref": "#/components/schemas/Address"
               },
               "department": {
                  "$ref": "#/components/schemas/Department"
               },
               "employments": {
                  "type": "array",
                  "description": "Employments tied to the employee",
                  "items": {
                     "$ref": "#/components/schemas/Employment"
                  }
               },
               "holidayAllowanceEarned": {
                  "$ref": "#/components/schemas/HolidayAllowanceEarned"
               },
               "employeeCategory": {
                  "$ref": "#/components/schemas/EmployeeCategory"
               },
               "isAuthProjectOverviewURL": {
                  "type": "boolean",
                  "readOnly": true
               },
               "pictureId": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "companyId": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               }
            }
         },
         "Municipality": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "number": {
                  "type": "string",
                  "readOnly": true
               },
               "name": {
                  "type": "string",
                  "readOnly": true
               },
               "county": {
                  "type": "string",
                  "readOnly": true
               },
               "payrollTaxZone": {
                  "type": "string",
                  "readOnly": true
               },
               "displayName": {
                  "type": "string",
                  "readOnly": true
               }
            }
         },
         "Division": {
            "required": [
               "name"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "name": {
                  "maxLength": 255,
                  "minLength": 1,
                  "type": "string"
               },
               "startDate": {
                  "type": "string"
               },
               "endDate": {
                  "type": "string"
               },
               "organizationNumber": {
                  "maxLength": 100,
                  "type": "string"
               },
               "municipalityDate": {
                  "type": "string"
               },
               "municipality": {
                  "$ref": "#/components/schemas/Municipality"
               }
            }
         },
         "Employment": {
            "required": [
               "startDate"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "employee": {
                  "$ref": "#/components/schemas/Employee"
               },
               "employmentId": {
                  "maxLength": 255,
                  "type": "string",
                  "description": "Existing employment ID used by the current accounting system"
               },
               "startDate": {
                  "type": "string"
               },
               "endDate": {
                  "type": "string"
               },
               "employmentEndReason": {
                  "type": "string",
                  "description": "Define the employment end reason.",
                  "enum": [
                     "EMPLOYMENT_END_EXPIRED",
                     "EMPLOYMENT_END_EMPLOYEE",
                     "EMPLOYMENT_END_EMPLOYER",
                     "EMPLOYMENT_END_WRONGLY_REPORTED",
                     "EMPLOYMENT_END_SYSTEM_OR_ACCOUNTANT_CHANGE",
                     "EMPLOYMENT_END_INTERNAL_CHANGE"
                  ]
               },
               "division": {
                  "$ref": "#/components/schemas/Division"
               },
               "lastSalaryChangeDate": {
                  "type": "string"
               },
               "noEmploymentRelationship": {
                  "type": "boolean",
                  "description": "Activate pensions and other benefits with no employment relationship."
               },
               "isMainEmployer": {
                  "type": "boolean",
                  "description": "Determines if company is main employer for the employee. Default value is true.<br />Some values will be default set if not sent upon creation of employment: <br/> If isMainEmployer is NOT sent and tax deduction code loennFraHovedarbeidsgiver is sent, isMainEmployer will be set to true. <br /> If isMainEmployer is NOT sent and tax deduction code loennFraBiarbeidsgiver is sent, isMainEmployer will be set to false. <br /> If true and deduction code is NOT sent, value of tax deduction code will be set to loennFraHovedarbeidsgiver. <br /> If false and deduction code is NOT sent, value of tax deduction code will be set to loennFraBiarbeidsgiver. <br /> For other types of Tax Deduction Codes, isMainEmployer does not influence anything."
               },
               "taxDeductionCode": {
                  "type": "string",
                  "description": "EMPTY - represents that a tax deduction code is not set on the employment. It is illegal to set the field to this value.  <br /> Default value of this field is loennFraHovedarbeidsgiver or loennFraBiarbeidsgiver depending on boolean isMainEmployer",
                  "enum": [
                     "loennFraHovedarbeidsgiver",
                     "loennFraBiarbeidsgiver",
                     "pensjon",
                     "loennTilUtenrikstjenestemann",
                     "loennKunTrygdeavgiftTilUtenlandskBorger",
                     "loennKunTrygdeavgiftTilUtenlandskBorgerSomGrensegjenger",
                     "introduksjonsstoenad",
                     "ufoereytelserFraAndre",
                     "EMPTY"
                  ]
               },
               "employmentDetails": {
                  "type": "array",
                  "description": "Employment types tied to the employment",
                  "items": {
                     "$ref": "#/components/schemas/EmploymentDetails"
                  }
               }
            }
         },
         "MaritimeEmployment": {
            "type": "object",
            "properties": {
               "shipRegister": {
                  "type": "string",
                  "description": "Define the ship register. NIS: Norwegian International Ship Register, NOR: Norwegian Ordinary Ship Register, FOREIGN: Foreign Ship Register. ",
                  "enum": [
                     "NIS",
                     "NOR",
                     "FOREIGN"
                  ]
               },
               "shipType": {
                  "type": "string",
                  "description": "Define the ship type.",
                  "enum": [
                     "OTHER",
                     "DRILLING_PLATFORM",
                     "TOURIST"
                  ]
               },
               "tradeArea": {
                  "type": "string",
                  "description": "Define the trade area.",
                  "enum": [
                     "DOMESTIC",
                     "FOREIGN"
                  ]
               }
            }
         },
         "OccupationCode": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "nameNO": {
                  "type": "string"
               },
               "code": {
                  "type": "string"
               }
            }
         },
         "EmploymentDetails": {
            "required": [
               "percentageOfFullTimeEquivalent"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "employment": {
                  "$ref": "#/components/schemas/Employment"
               },
               "date": {
                  "type": "string"
               },
               "employmentType": {
                  "type": "string",
                  "description": "Define the employment type.",
                  "enum": [
                     "ORDINARY",
                     "MARITIME",
                     "FREELANCE",
                     "NOT_CHOSEN"
                  ]
               },
               "employmentForm": {
                  "type": "string",
                  "description": "Define the employment form.",
                  "enum": [
                     "PERMANENT",
                     "TEMPORARY",
                     "NOT_CHOSEN"
                  ]
               },
               "maritimeEmployment": {
                  "$ref": "#/components/schemas/MaritimeEmployment"
               },
               "remunerationType": {
                  "type": "string",
                  "description": "Define the remuneration type.",
                  "enum": [
                     "MONTHLY_WAGE",
                     "HOURLY_WAGE",
                     "COMMISION_PERCENTAGE",
                     "FEE",
                     "NOT_CHOSEN",
                     "PIECEWORK_WAGE"
                  ]
               },
               "workingHoursScheme": {
                  "type": "string",
                  "description": "Define the working hours scheme type. If you enter a value for SHIFT WORK, you must also enter value for shiftDurationHours",
                  "enum": [
                     "NOT_SHIFT",
                     "ROUND_THE_CLOCK",
                     "SHIFT_365",
                     "OFFSHORE_336",
                     "CONTINUOUS",
                     "OTHER_SHIFT",
                     "NOT_CHOSEN"
                  ]
               },
               "shiftDurationHours": {
                  "type": "number"
               },
               "occupationCode": {
                  "$ref": "#/components/schemas/OccupationCode"
               },
               "percentageOfFullTimeEquivalent": {
                  "type": "number"
               },
               "annualSalary": {
                  "type": "number"
               },
               "hourlyWage": {
                  "type": "number"
               },
               "payrollTaxMunicipalityId": {
                  "$ref": "#/components/schemas/Municipality"
               }
            }
         },
         "HolidayAllowanceEarned": {
            "type": "object",
            "properties": {
               "year": {
                  "type": "integer",
                  "format": "int32"
               },
               "amount": {
                  "type": "number"
               },
               "basis": {
                  "type": "number"
               },
               "amountExtraHolidayWeek": {
                  "type": "number"
               }
            }
         },
         "EmployeeCategory": {
            "required": [
               "name"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "name": {
                  "maxLength": 255,
                  "minLength": 1,
                  "type": "string"
               },
               "number": {
                  "maxLength": 100,
                  "type": "string"
               },
               "description": {
                  "type": "string"
               }
            }
         },
         "Account": {
            "required": [
               "name",
               "number"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "number": {
                  "minimum": 0,
                  "type": "integer",
                  "format": "int32"
               },
               "name": {
                  "type": "string"
               },
               "description": {
                  "type": "string"
               },
               "type": {
                  "type": "string",
                  "readOnly": true,
                  "enum": [
                     "ASSETS",
                     "EQUITY",
                     "LIABILITIES",
                     "OPERATING_REVENUES",
                     "OPERATING_EXPENSES",
                     "INVESTMENT_INCOME",
                     "COST_OF_CAPITAL",
                     "TAX_ON_ORDINARY_ACTIVITIES",
                     "EXTRAORDINARY_INCOME",
                     "EXTRAORDINARY_COST",
                     "TAX_ON_EXTRAORDINARY_ACTIVITIES",
                     "ANNUAL_RESULT",
                     "TRANSFERS_AND_ALLOCATIONS"
                  ]
               },
               "legalVatTypes": {
                  "type": "array",
                  "description": "List of legal vat types for this account.",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/VatType"
                  }
               },
               "ledgerType": {
                  "type": "string",
                  "description": "Supported ledger types, default is GENERAL. Only available for customers with the module multiple ledgers.",
                  "enum": [
                     "GENERAL",
                     "CUSTOMER",
                     "VENDOR",
                     "EMPLOYEE",
                     "ASSET"
                  ]
               },
               "vatType": {
                  "$ref": "#/components/schemas/VatType"
               },
               "vatLocked": {
                  "type": "boolean",
                  "description": "True if all entries on this account must have the vat type given by vatType."
               },
               "currency": {
                  "$ref": "#/components/schemas/Currency"
               },
               "isCloseable": {
                  "type": "boolean",
                  "description": "True if it should be possible to close entries on this account and it is possible to filter on open entries."
               },
               "isApplicableForSupplierInvoice": {
                  "type": "boolean",
                  "description": "True if this account is applicable for supplier invoice registration."
               },
               "requireReconciliation": {
                  "type": "boolean",
                  "description": "True if this account must be reconciled before the accounting period closure."
               },
               "isInactive": {
                  "type": "boolean",
                  "description": "Inactive accounts will not show up in UI lists."
               },
               "isBankAccount": {
                  "type": "boolean"
               },
               "isInvoiceAccount": {
                  "type": "boolean"
               },
               "bankAccountNumber": {
                  "type": "string"
               },
               "bankAccountCountry": {
                  "$ref": "#/components/schemas/Country"
               },
               "bankName": {
                  "type": "string"
               },
               "bankAccountIBAN": {
                  "type": "string"
               },
               "bankAccountSWIFT": {
                  "type": "string"
               },
               "saftCode": {
                  "type": "string",
                  "description": "SAF-T code for account. It will be given a default value based on account number if empty."
               },
               "displayName": {
                  "type": "string"
               },
               "requiresDepartment": {
                  "type": "boolean",
                  "description": "Posting against this account requires department."
               },
               "requiresProject": {
                  "type": "boolean",
                  "description": "Posting against this account requires project."
               },
               "invoicingDepartment": {
                  "$ref": "#/components/schemas/Department"
               },
               "isPostingsExist": {
                  "type": "boolean"
               }
            }
         },
         "Asset": {
            "required": [
               "dateOfAcquisition",
               "description",
               "name"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "name": {
                  "maxLength": 255,
                  "minLength": 1,
                  "type": "string"
               },
               "description": {
                  "maxLength": 255,
                  "minLength": 1,
                  "type": "string"
               },
               "dateOfAcquisition": {
                  "type": "string"
               },
               "acquisitionCost": {
                  "type": "number",
                  "description": "Acquisition cost."
               },
               "account": {
                  "$ref": "#/components/schemas/Account"
               },
               "depreciationAccount": {
                  "$ref": "#/components/schemas/Account"
               },
               "incomingBalance": {
                  "type": "number",
                  "description": "Incoming balance for the asset."
               },
               "lifetime": {
                  "minimum": 0,
                  "type": "integer",
                  "description": "Lifetime in months for the asset.",
                  "format": "int32"
               },
               "depreciationMethod": {
                  "type": "string",
                  "description": "Depreciation method",
                  "enum": [
                     "MANUAL",
                     "STRAIGHT_LINE",
                     "TAX_RELATED",
                     "CUSTOMIZED_AMOUNT"
                  ]
               },
               "depreciationFrom": {
                  "type": "string"
               },
               "status": {
                  "type": "string",
                  "description": "Status",
                  "enum": [
                     "UNKNOWN",
                     "ACTIVE",
                     "SOLD",
                     "LOST",
                     "COMPLETED"
                  ]
               },
               "customMonthlyWriteOff": {
                  "type": "number"
               },
               "taxRelatedDepreciationPercentage": {
                  "type": "number"
               },
               "depreciationRemainingValue": {
                  "type": "number"
               },
               "hasHistoryFromExternalSystem": {
                  "type": "boolean"
               },
               "externalLastDepreciation": {
                  "type": "string"
               },
               "externalLastAccountedValue": {
                  "type": "number"
               },
               "externalAccumulatedDepreciation": {
                  "type": "number"
               }
            }
         },
         "ResponseWrapperAsset": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/Asset"
               }
            }
         },
         "ListResponseAsset": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Asset"
                  }
               }
            }
         },
         "ResponseWrapperBoolean": {
            "type": "object",
            "properties": {
               "value": {
                  "type": "boolean"
               }
            }
         },
         "TlxNumber": {
            "type": "object"
         },
         "ResponseWrapperTlxNumber": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/TlxNumber"
               }
            }
         },
         "AssetImport": {
            "required": [
               "description",
               "lifetime",
               "name"
            ],
            "type": "object",
            "properties": {
               "name": {
                  "type": "string"
               },
               "lifetime": {
                  "minimum": 0,
                  "type": "integer",
                  "format": "int32"
               },
               "dateOfAcquisition": {
                  "type": "string"
               },
               "description": {
                  "type": "string"
               },
               "acquisitionCost": {
                  "type": "number",
                  "description": "Acquisition cost."
               },
               "incomingBalance": {
                  "type": "number",
                  "description": "Incoming balance for the asset."
               },
               "externalAccumulatedDepreciation": {
                  "type": "number",
                  "description": "Accumulated depreciation for the asset."
               }
            }
         },
         "AssetAccountRow": {
            "type": "object",
            "properties": {
               "accountNumber": {
                  "type": "string",
                  "description": "Account number"
               },
               "accountName": {
                  "type": "string",
                  "description": "Account name"
               },
               "assets": {
                  "type": "array",
                  "description": "Assets",
                  "items": {
                     "$ref": "#/components/schemas/AssetImport"
                  }
               },
               "balanceDifference": {
                  "type": "number",
                  "description": "Balance difference. This is the sum amount on the account that is not connected to an asset after the import."
               }
            }
         },
         "ListResponseAssetAccountRow": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/AssetAccountRow"
                  }
               }
            }
         },
         "AuthConfigDTO": {
            "type": "object",
            "properties": {
               "loginUrl": {
                  "type": "string"
               },
               "logoutUrl": {
                  "type": "string"
               },
               "refreshSessionIframeUrl": {
                  "type": "string"
               },
               "checkSessionIframeUrl": {
                  "type": "string"
               }
            }
         },
         "ResponseWrapperAuthConfigDTO": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/AuthConfigDTO"
               }
            }
         },
         "BalanceSheetAccount": {
            "type": "object",
            "properties": {
               "account": {
                  "$ref": "#/components/schemas/Account"
               },
               "balanceIn": {
                  "type": "number",
                  "readOnly": true
               },
               "balanceChange": {
                  "type": "number",
                  "readOnly": true
               },
               "balanceOut": {
                  "type": "number",
                  "readOnly": true
               },
               "startDate": {
                  "type": "string",
                  "description": "The start date for this period - inclusive.",
                  "readOnly": true
               },
               "endDate": {
                  "type": "string",
                  "description": "The end date for this period - exclusive.",
                  "readOnly": true
               }
            }
         },
         "ListResponseBalanceSheetAccount": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/BalanceSheetAccount"
                  }
               }
            }
         },
         "AutoPaySupport": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "uploadNeeded": {
                  "type": "boolean"
               },
               "isEikaType": {
                  "type": "boolean"
               },
               "hasOrgNumber": {
                  "type": "boolean"
               },
               "isPsd2Type": {
                  "type": "boolean"
               },
               "hasApproveInOnlineBanking": {
                  "type": "boolean"
               },
               "requiredBankFieldIds": {
                  "type": "array",
                  "items": {
                     "type": "integer",
                     "format": "int32"
                  }
               }
            }
         },
         "Bank": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "name": {
                  "type": "string",
                  "description": "Bank name",
                  "readOnly": true
               },
               "bankStatementFileFormatSupport": {
                  "type": "array",
                  "description": "Bank statement file formats supported.",
                  "readOnly": true,
                  "items": {
                     "type": "string",
                     "enum": [
                        "DNB_CSV",
                        "EIKA_TELEPAY",
                        "SPAREBANK1_TELEPAY",
                        "VISMA_ACCOUNT_STATEMENT",
                        "HANDELSBANKEN_TELEPAY",
                        "SPAREBANKEN_VEST_TELEPAY",
                        "NORDEA_CSV",
                        "TRANSFERWISE",
                        "SPAREBANKEN_SOR_TELEPAY",
                        "SPAREBANKEN_OST_TELEPAY",
                        "DANSKE_BANK_CSV",
                        "CULTURA_BANK_TELEPAY",
                        "SBANKEN_PRIVAT_CSV",
                        "HAUGESUND_SPAREBANK_CSV",
                        "VISMA_ACCOUNT_STATEMENT_PSD2",
                        "SBANKEN_BEDRIFT_CSV",
                        "LANDKREDITT_TELEPAY",
                        "ZTL"
                     ]
                  }
               },
               "registerNumbers": {
                  "type": "array",
                  "description": "Register numbers belonging to bank.",
                  "readOnly": true,
                  "items": {
                     "type": "integer",
                     "format": "int32"
                  }
               },
               "displayName": {
                  "type": "string",
                  "description": "Bank name to comply with LoadableDropdown",
                  "readOnly": true
               },
               "autoPaySupport": {
                  "$ref": "#/components/schemas/AutoPaySupport"
               }
            }
         },
         "ResponseWrapperBank": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/Bank"
               }
            }
         },
         "ListResponseBank": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Bank"
                  }
               }
            }
         },
         "BankDashboardAdvice": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "adviceType": {
                  "type": "string",
                  "description": "The advice type.",
                  "enum": [
                     "SHORTEN_DUE_DATE_ON_OUTGOING_INVOICES_TO_CUSTOMERS",
                     "INCREASE_DUE_DATE_ON_INCOMING_INVOICES_FROM_VENDORS",
                     "APPLY_FOR_CASH_CREDIT_WITH_TRIPLETEX_APRILA"
                  ]
               },
               "isActive": {
                  "type": "boolean",
                  "description": "The advice is active."
               },
               "dateUpdated": {
                  "type": "string",
                  "description": "The date the advice was updated."
               },
               "isCancelled": {
                  "type": "boolean",
                  "description": "The advice has been cancelled."
               },
               "dateCancelled": {
                  "type": "string",
                  "description": "The date the advice has been cancelled by the user."
               }
            }
         },
         "ResponseWrapperBankDashboardAdvice": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/BankDashboardAdvice"
               }
            }
         },
         "ListResponseBankDashboardAdvice": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/BankDashboardAdvice"
                  }
               }
            }
         },
         "AccountingPeriod": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "name": {
                  "maxLength": 255,
                  "type": "string",
                  "readOnly": true
               },
               "number": {
                  "maximum": 11,
                  "minimum": 0,
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "start": {
                  "type": "string",
                  "readOnly": true
               },
               "end": {
                  "type": "string",
                  "readOnly": true
               },
               "isClosed": {
                  "type": "boolean",
                  "readOnly": true
               }
            }
         },
         "VoucherType": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "name": {
                  "maxLength": 100,
                  "type": "string"
               }
            }
         },
         "Voucher": {
            "required": [
               "date",
               "description",
               "postings"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "date": {
                  "type": "string"
               },
               "number": {
                  "minimum": 0,
                  "type": "integer",
                  "description": "System generated number that cannot be changed.",
                  "format": "int32",
                  "readOnly": true
               },
               "tempNumber": {
                  "minimum": 0,
                  "type": "integer",
                  "description": "Temporary voucher number.",
                  "format": "int32",
                  "readOnly": true
               },
               "year": {
                  "minimum": 0,
                  "type": "integer",
                  "description": "System generated number that cannot be changed.",
                  "format": "int32",
                  "readOnly": true
               },
               "description": {
                  "type": "string"
               },
               "voucherType": {
                  "$ref": "#/components/schemas/VoucherType"
               },
               "reverseVoucher": {
                  "$ref": "#/components/schemas/Voucher"
               },
               "postings": {
                  "type": "array",
                  "items": {
                     "$ref": "#/components/schemas/Posting"
                  }
               },
               "document": {
                  "$ref": "#/components/schemas/Document"
               },
               "attachment": {
                  "$ref": "#/components/schemas/Document"
               },
               "externalVoucherNumber": {
                  "type": "string",
                  "description": "External voucher number."
               },
               "ediDocument": {
                  "$ref": "#/components/schemas/Document"
               },
               "supplierVoucherType": {
                  "type": "string",
                  "description": "Supplier voucher type - simple and detailed.",
                  "enum": [
                     "TYPE_SUPPLIER_INVOICE_SIMPLE",
                     "TYPE_SUPPLIER_INVOICE_DETAILED"
                  ]
               }
            }
         },
         "CustomerCategory": {
            "required": [
               "name"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "name": {
                  "maxLength": 255,
                  "minLength": 1,
                  "type": "string"
               },
               "number": {
                  "maxLength": 100,
                  "type": "string"
               },
               "description": {
                  "type": "string"
               },
               "type": {
                  "minimum": 0,
                  "type": "integer",
                  "format": "int32"
               },
               "displayName": {
                  "type": "string"
               }
            }
         },
         "CompanyBankAccountPresentation": {
            "type": "object",
            "properties": {
               "iban": {
                  "type": "string",
                  "description": "Iban-number"
               },
               "bban": {
                  "type": "string",
                  "description": "Bban-number"
               },
               "bic": {
                  "type": "string",
                  "description": "BIC/SWIFT for this bankaccount"
               },
               "country": {
                  "$ref": "#/components/schemas/Country"
               },
               "provider": {
                  "type": "string",
                  "readOnly": true,
                  "enum": [
                     "NETS",
                     "AUTOPAY"
                  ]
               }
            }
         },
         "Customer": {
            "required": [
               "name"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "name": {
                  "maxLength": 255,
                  "type": "string"
               },
               "organizationNumber": {
                  "maxLength": 100,
                  "type": "string"
               },
               "supplierNumber": {
                  "minimum": 0,
                  "type": "integer",
                  "format": "int32"
               },
               "customerNumber": {
                  "minimum": 0,
                  "type": "integer",
                  "format": "int32"
               },
               "isSupplier": {
                  "type": "boolean",
                  "description": "Defines if the customer is also a supplier."
               },
               "isCustomer": {
                  "type": "boolean",
                  "readOnly": true
               },
               "isInactive": {
                  "type": "boolean",
                  "readOnly": true
               },
               "accountManager": {
                  "$ref": "#/components/schemas/Employee"
               },
               "email": {
                  "maxLength": 254,
                  "minLength": 0,
                  "type": "string",
                  "format": "email"
               },
               "invoiceEmail": {
                  "maxLength": 254,
                  "minLength": 0,
                  "type": "string"
               },
               "overdueNoticeEmail": {
                  "maxLength": 254,
                  "minLength": 0,
                  "type": "string",
                  "description": "The email address of the customer where the noticing emails are sent in case of an overdue",
                  "format": "email"
               },
               "bankAccounts": {
                  "type": "array",
                  "description": "[DEPRECATED] List of the bank account numbers for this customer. Norwegian bank account numbers only.",
                  "items": {
                     "type": "string"
                  }
               },
               "phoneNumber": {
                  "maxLength": 100,
                  "type": "string"
               },
               "phoneNumberMobile": {
                  "maxLength": 100,
                  "type": "string"
               },
               "description": {
                  "type": "string"
               },
               "language": {
                  "type": "string",
                  "enum": [
                     "NO",
                     "EN"
                  ]
               },
               "displayName": {
                  "type": "string"
               },
               "isPrivateIndividual": {
                  "type": "boolean"
               },
               "singleCustomerInvoice": {
                  "type": "boolean",
                  "description": "Enables various orders on one customer invoice."
               },
               "invoiceSendMethod": {
                  "type": "string",
                  "description": "Define the invoicing method for the customer.<br>EMAIL: Send invoices as email.<br>EHF: Send invoices as EHF.<br>EFAKTURA: Send invoices as EFAKTURA.<br>AVTALEGIRO: Send invoices as AVTALEGIRO.<br>VIPPS: Send invoices through VIPPS.<br>PAPER: Send invoices as paper invoice.<br>MANUAL: User will have to send invocie manually.<br>",
                  "enum": [
                     "EMAIL",
                     "EHF",
                     "EFAKTURA",
                     "AVTALEGIRO",
                     "VIPPS",
                     "PAPER",
                     "MANUAL"
                  ]
               },
               "emailAttachmentType": {
                  "type": "string",
                  "description": "Define the invoice attachment type for emailing to the customer.<br>LINK: Send invoice as link in email.<br>ATTACHMENT: Send invoice as attachment in email.<br>",
                  "enum": [
                     "LINK",
                     "ATTACHMENT"
                  ]
               },
               "postalAddress": {
                  "$ref": "#/components/schemas/Address"
               },
               "physicalAddress": {
                  "$ref": "#/components/schemas/Address"
               },
               "deliveryAddress": {
                  "$ref": "#/components/schemas/DeliveryAddress"
               },
               "category1": {
                  "$ref": "#/components/schemas/CustomerCategory"
               },
               "category2": {
                  "$ref": "#/components/schemas/CustomerCategory"
               },
               "category3": {
                  "$ref": "#/components/schemas/CustomerCategory"
               },
               "invoicesDueIn": {
                  "maximum": 10000,
                  "minimum": 0,
                  "type": "integer",
                  "description": "Number of days/months in which invoices created from this customer is due",
                  "format": "int32"
               },
               "invoicesDueInType": {
                  "type": "string",
                  "description": "Set the time unit of invoicesDueIn. The special case RECURRING_DAY_OF_MONTH enables the due date to be fixed to a specific day of the month, in this case the fixed due date will automatically be set as standard on all invoices created from this customer. Note that when RECURRING_DAY_OF_MONTH is set, the due date will be set to the last day of month if \"31\" is set in invoicesDueIn.",
                  "enum": [
                     "DAYS",
                     "MONTHS",
                     "RECURRING_DAY_OF_MONTH"
                  ]
               },
               "currency": {
                  "$ref": "#/components/schemas/Currency"
               },
               "bankAccountPresentation": {
                  "type": "array",
                  "description": "List of bankAccount for this customer",
                  "items": {
                     "$ref": "#/components/schemas/CompanyBankAccountPresentation"
                  }
               },
               "ledgerAccount": {
                  "$ref": "#/components/schemas/Account"
               },
               "isFactoring": {
                  "type": "boolean",
                  "description": "If true; send this customers invoices to factoring (if factoring is turned on in account)."
               },
               "invoiceSendSMSNotification": {
                  "type": "boolean",
                  "description": "Is sms-notification on/off"
               },
               "isAutomaticSoftReminderEnabled": {
                  "type": "boolean",
                  "description": "Has automatic soft reminders enabled for this customer."
               },
               "isAutomaticReminderEnabled": {
                  "type": "boolean",
                  "description": "Has automatic reminders enabled for this customer."
               },
               "isAutomaticNoticeOfDebtCollectionEnabled": {
                  "type": "boolean",
                  "description": "Has automatic notice of debt collection enabled for this customer."
               },
               "discountPercentage": {
                  "type": "number",
                  "description": "Default discount percentage for this customer."
               },
               "website": {
                  "maxLength": 255,
                  "type": "string"
               }
            }
         },
         "Supplier": {
            "required": [
               "name"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "name": {
                  "maxLength": 255,
                  "type": "string"
               },
               "organizationNumber": {
                  "maxLength": 100,
                  "type": "string"
               },
               "supplierNumber": {
                  "type": "integer",
                  "format": "int32"
               },
               "customerNumber": {
                  "type": "integer",
                  "format": "int32"
               },
               "isSupplier": {
                  "type": "boolean",
                  "readOnly": true
               },
               "isCustomer": {
                  "type": "boolean",
                  "description": "Determine if the supplier is also a customer"
               },
               "isInactive": {
                  "type": "boolean",
                  "readOnly": true
               },
               "email": {
                  "maxLength": 254,
                  "minLength": 0,
                  "type": "string",
                  "format": "email"
               },
               "bankAccounts": {
                  "type": "array",
                  "description": "[DEPRECATED] List of the bank account numbers for this supplier.  Norwegian bank account numbers only.",
                  "items": {
                     "type": "string"
                  }
               },
               "invoiceEmail": {
                  "maxLength": 254,
                  "minLength": 0,
                  "type": "string",
                  "format": "email"
               },
               "overdueNoticeEmail": {
                  "maxLength": 254,
                  "minLength": 0,
                  "type": "string",
                  "description": "The email address of the customer where the noticing emails are sent in case of an overdue",
                  "format": "email"
               },
               "phoneNumber": {
                  "maxLength": 100,
                  "type": "string"
               },
               "phoneNumberMobile": {
                  "maxLength": 100,
                  "type": "string"
               },
               "description": {
                  "type": "string"
               },
               "isPrivateIndividual": {
                  "type": "boolean"
               },
               "showProducts": {
                  "type": "boolean"
               },
               "accountManager": {
                  "$ref": "#/components/schemas/Employee"
               },
               "postalAddress": {
                  "$ref": "#/components/schemas/Address"
               },
               "physicalAddress": {
                  "$ref": "#/components/schemas/Address"
               },
               "deliveryAddress": {
                  "$ref": "#/components/schemas/DeliveryAddress"
               },
               "category1": {
                  "$ref": "#/components/schemas/CustomerCategory"
               },
               "category2": {
                  "$ref": "#/components/schemas/CustomerCategory"
               },
               "category3": {
                  "$ref": "#/components/schemas/CustomerCategory"
               },
               "bankAccountPresentation": {
                  "type": "array",
                  "description": "List of bankAccount for this supplier",
                  "items": {
                     "$ref": "#/components/schemas/CompanyBankAccountPresentation"
                  }
               },
               "currency": {
                  "$ref": "#/components/schemas/Currency"
               },
               "ledgerAccount": {
                  "$ref": "#/components/schemas/Account"
               },
               "isWholesaler": {
                  "type": "boolean",
                  "readOnly": true
               },
               "displayName": {
                  "type": "string",
                  "readOnly": true
               },
               "locale": {
                  "type": "string",
                  "readOnly": true
               },
               "website": {
                  "maxLength": 255,
                  "type": "string"
               }
            }
         },
         "Project": {
            "required": [
               "isInternal",
               "name",
               "projectManager",
               "startDate"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "name": {
                  "maxLength": 255,
                  "type": "string"
               },
               "number": {
                  "maxLength": 100,
                  "type": "string",
                  "description": "If NULL, a number is generated automatically."
               },
               "displayName": {
                  "type": "string",
                  "readOnly": true
               },
               "description": {
                  "type": "string"
               },
               "projectManager": {
                  "$ref": "#/components/schemas/Employee"
               },
               "department": {
                  "$ref": "#/components/schemas/Department"
               },
               "mainProject": {
                  "$ref": "#/components/schemas/Project"
               },
               "startDate": {
                  "type": "string"
               },
               "endDate": {
                  "type": "string"
               },
               "customer": {
                  "$ref": "#/components/schemas/Customer"
               },
               "isClosed": {
                  "type": "boolean"
               },
               "isReadyForInvoicing": {
                  "type": "boolean"
               },
               "isInternal": {
                  "type": "boolean"
               },
               "isOffer": {
                  "type": "boolean",
                  "readOnly": true
               },
               "isFixedPrice": {
                  "type": "boolean",
                  "description": "Project is fixed price if set to true, hourly rate if set to false."
               },
               "projectCategory": {
                  "$ref": "#/components/schemas/ProjectCategory"
               },
               "deliveryAddress": {
                  "$ref": "#/components/schemas/DeliveryAddress"
               },
               "displayNameFormat": {
                  "type": "string",
                  "description": "Defines project name presentation in overviews.",
                  "enum": [
                     "NAME_STANDARD",
                     "NAME_INCL_CUSTOMER_NAME",
                     "NAME_INCL_PARENT_NAME",
                     "NAME_INCL_PARENT_NUMBER",
                     "NAME_INCL_PARENT_NAME_AND_NUMBER"
                  ]
               },
               "reference": {
                  "maxLength": 255,
                  "type": "string"
               },
               "externalAccountsNumber": {
                  "maxLength": 100,
                  "type": "string"
               },
               "discountPercentage": {
                  "type": "number",
                  "description": "Project discount percentage.",
                  "readOnly": true
               },
               "vatType": {
                  "$ref": "#/components/schemas/VatType"
               },
               "fixedprice": {
                  "type": "number",
                  "description": "Fixed price amount, in the project's currency."
               },
               "contributionMarginPercent": {
                  "type": "number",
                  "readOnly": true
               },
               "numberOfSubProjects": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "numberOfProjectParticipants": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "orderLines": {
                  "type": "array",
                  "description": "Order lines tied to the order",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/ProjectOrderLine"
                  }
               },
               "currency": {
                  "$ref": "#/components/schemas/Currency"
               },
               "markUpOrderLines": {
                  "type": "number",
                  "description": "Set mark-up (%) for order lines."
               },
               "markUpFeesEarned": {
                  "type": "number",
                  "description": "Set mark-up (%) for fees earned."
               },
               "isPriceCeiling": {
                  "type": "boolean",
                  "description": "Set to true if an hourly rate project has a price ceiling."
               },
               "priceCeilingAmount": {
                  "type": "number",
                  "description": "Price ceiling amount, in the project's currency."
               },
               "projectHourlyRates": {
                  "type": "array",
                  "description": "Project Rate Types tied to the project.",
                  "items": {
                     "$ref": "#/components/schemas/ProjectHourlyRate"
                  }
               },
               "forParticipantsOnly": {
                  "type": "boolean",
                  "description": "Set to true if only project participants can register information on the project"
               },
               "participants": {
                  "type": "array",
                  "description": "Link to individual project participants.",
                  "items": {
                     "$ref": "#/components/schemas/ProjectParticipant"
                  }
               },
               "contact": {
                  "$ref": "#/components/schemas/Contact"
               },
               "attention": {
                  "$ref": "#/components/schemas/Contact"
               },
               "invoiceComment": {
                  "type": "string",
                  "description": "Comment for project invoices"
               },
               "invoicingPlan": {
                  "type": "array",
                  "description": "Invoicing plans tied to the project",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Invoice"
                  }
               },
               "preliminaryInvoice": {
                  "$ref": "#/components/schemas/Invoice"
               },
               "generalProjectActivitiesPerProjectOnly": {
                  "type": "boolean",
                  "description": "Set to true if a general project activity must be linked to project to allow time tracking."
               },
               "projectActivities": {
                  "type": "array",
                  "description": "Project Activities",
                  "items": {
                     "$ref": "#/components/schemas/ProjectActivity"
                  }
               },
               "hierarchyNameAndNumber": {
                  "type": "string",
                  "readOnly": true
               },
               "invoiceDueDate": {
                  "type": "integer",
                  "description": "invoice due date",
                  "format": "int32"
               },
               "invoiceDueDateType": {
                  "type": "string",
                  "description": "Set the time unit of invoiceDueDate. The special case RECURRING_DAY_OF_MONTH enables the due date to be fixed to a specific day of the month, in this case the fixed due date will automatically be set as standard on all invoices created from this project. Note that when RECURRING_DAY_OF_MONTH is set, the due date will be set to the last day of month if \"31\" is set in invoicesDueIn.",
                  "enum": [
                     "DAYS",
                     "MONTHS",
                     "RECURRING_DAY_OF_MONTH"
                  ]
               },
               "invoiceReceiverEmail": {
                  "maxLength": 254,
                  "type": "string",
                  "description": "receiver email"
               },
               "accessType": {
                  "type": "string",
                  "description": "READ/WRITE access on project",
                  "enum": [
                     "NONE",
                     "READ",
                     "WRITE"
                  ]
               },
               "useProductNetPrice": {
                  "type": "boolean"
               },
               "ignoreCompanyProductDiscountAgreement": {
                  "type": "boolean"
               },
               "customerName": {
                  "type": "string",
                  "readOnly": true
               },
               "hierarchyLevel": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "projectManagerNameAndNumber": {
                  "type": "string",
                  "readOnly": true
               },
               "totalInvoicedOnAccountAmountAbsoluteCurrency": {
                  "type": "number",
                  "description": "Amount paid on account(a konto)",
                  "readOnly": true
               },
               "invoiceOnAccountVatHigh": {
                  "type": "boolean",
                  "description": "The on account(a konto) amounts including VAT"
               }
            }
         },
         "ProjectCategory": {
            "required": [
               "name"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "name": {
                  "maxLength": 255,
                  "minLength": 1,
                  "type": "string"
               },
               "number": {
                  "maxLength": 100,
                  "type": "string"
               },
               "description": {
                  "type": "string"
               },
               "displayName": {
                  "type": "string"
               }
            }
         },
         "DiscountGroup": {
            "required": [
               "name"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "name": {
                  "maxLength": 255,
                  "type": "string"
               },
               "number": {
                  "maxLength": 100,
                  "type": "string",
                  "readOnly": true
               },
               "nameAndNumber": {
                  "type": "string",
                  "readOnly": true
               }
            }
         },
         "ProductUnit": {
            "required": [
               "commonCode",
               "name",
               "nameEN"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "displayName": {
                  "type": "string",
                  "readOnly": true
               },
               "displayNameShort": {
                  "type": "string",
                  "readOnly": true
               },
               "name": {
                  "maxLength": 100,
                  "type": "string"
               },
               "nameEN": {
                  "maxLength": 255,
                  "type": "string"
               },
               "nameShort": {
                  "maxLength": 50,
                  "type": "string"
               },
               "nameShortEN": {
                  "maxLength": 50,
                  "type": "string"
               },
               "commonCode": {
                  "maxLength": 50,
                  "type": "string"
               },
               "isDeletable": {
                  "type": "boolean"
               }
            }
         },
         "Product": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "name": {
                  "maxLength": 255,
                  "type": "string"
               },
               "number": {
                  "maxLength": 100,
                  "type": "string"
               },
               "displayNumber": {
                  "type": "string",
                  "readOnly": true
               },
               "description": {
                  "type": "string"
               },
               "ean": {
                  "maxLength": 14,
                  "type": "string"
               },
               "elNumber": {
                  "maxLength": 14,
                  "type": "string",
                  "readOnly": true
               },
               "nrfNumber": {
                  "maxLength": 14,
                  "type": "string",
                  "readOnly": true
               },
               "costExcludingVatCurrency": {
                  "type": "number",
                  "description": "Price purchase (cost) excluding VAT in the product's currency"
               },
               "expenses": {
                  "type": "number"
               },
               "expensesInPercent": {
                  "type": "number",
                  "readOnly": true
               },
               "costPrice": {
                  "type": "number",
                  "description": "Cost price of purchase",
                  "readOnly": true
               },
               "profit": {
                  "type": "number",
                  "readOnly": true
               },
               "profitInPercent": {
                  "type": "number",
                  "readOnly": true
               },
               "priceExcludingVatCurrency": {
                  "type": "number",
                  "description": "Price of purchase excluding VAT in the product's currency"
               },
               "priceIncludingVatCurrency": {
                  "type": "number",
                  "description": "Price of purchase including VAT in the product's currency"
               },
               "isInactive": {
                  "type": "boolean"
               },
               "discountGroup": {
                  "$ref": "#/components/schemas/DiscountGroup"
               },
               "productUnit": {
                  "$ref": "#/components/schemas/ProductUnit"
               },
               "isStockItem": {
                  "type": "boolean"
               },
               "stockOfGoods": {
                  "type": "number",
                  "description": "From January 23rd 2023 this field will be available only on demand",
                  "readOnly": true
               },
               "vatType": {
                  "$ref": "#/components/schemas/VatType"
               },
               "currency": {
                  "$ref": "#/components/schemas/Currency"
               },
               "department": {
                  "$ref": "#/components/schemas/Department"
               },
               "account": {
                  "$ref": "#/components/schemas/Account"
               },
               "discountPrice": {
                  "type": "number",
                  "readOnly": true
               },
               "supplier": {
                  "$ref": "#/components/schemas/Supplier"
               },
               "resaleProduct": {
                  "$ref": "#/components/schemas/Product"
               },
               "isDeletable": {
                  "type": "boolean",
                  "description": "For performance reasons, field is deprecated and it will always return false."
               },
               "hasSupplierProductConnected": {
                  "type": "boolean"
               },
               "weight": {
                  "type": "number"
               },
               "weightUnit": {
                  "type": "string",
                  "enum": [
                     "kg",
                     "g",
                     "hg"
                  ]
               },
               "volume": {
                  "type": "number"
               },
               "volumeUnit": {
                  "type": "string",
                  "enum": [
                     "cm3",
                     "dm3",
                     "m3"
                  ]
               },
               "hsnCode": {
                  "maxLength": 20,
                  "type": "string"
               },
               "image": {
                  "$ref": "#/components/schemas/Document"
               },
               "markupListPercentage": {
                  "type": "number",
                  "readOnly": true
               },
               "markupNetPercentage": {
                  "type": "number",
                  "readOnly": true
               },
               "displayName": {
                  "type": "string",
                  "readOnly": true
               },
               "mainSupplierProduct": {
                  "$ref": "#/components/schemas/SupplierProduct"
               }
            }
         },
         "Document": {
            "required": [
               "fileName"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "fileName": {
                  "maxLength": 255,
                  "type": "string",
                  "description": "The name of the document."
               },
               "size": {
                  "minimum": 0,
                  "type": "integer",
                  "description": "The size of the document in bytes.",
                  "format": "int32",
                  "readOnly": true
               },
               "mimeType": {
                  "maxLength": 100,
                  "type": "string",
                  "description": "Type of the document",
                  "readOnly": true,
                  "example": "type/subtype of resource. E.g. application/pdf"
               }
            }
         },
         "SupplierProduct": {
            "required": [
               "supplier"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "name": {
                  "maxLength": 255,
                  "type": "string"
               },
               "displayName": {
                  "type": "string",
                  "readOnly": true
               },
               "number": {
                  "maxLength": 100,
                  "type": "string"
               },
               "description": {
                  "type": "string"
               },
               "ean": {
                  "maxLength": 14,
                  "type": "string"
               },
               "costExcludingVatCurrency": {
                  "type": "number",
                  "description": "Price purchase (cost) excluding VAT in the product's currency"
               },
               "cost": {
                  "type": "number",
                  "description": "Price purchase (cost) in the company's currency"
               },
               "priceExcludingVatCurrency": {
                  "type": "number",
                  "description": "Price of purchase excluding VAT in the product's currency"
               },
               "priceIncludingVatCurrency": {
                  "type": "number",
                  "description": "Price of purchase including VAT in the product's currency"
               },
               "isInactive": {
                  "type": "boolean"
               },
               "productUnit": {
                  "$ref": "#/components/schemas/ProductUnit"
               },
               "isStockItem": {
                  "type": "boolean"
               },
               "stockOfGoods": {
                  "type": "number",
                  "readOnly": true
               },
               "vatType": {
                  "$ref": "#/components/schemas/VatType"
               },
               "currency": {
                  "$ref": "#/components/schemas/Currency"
               },
               "discountPrice": {
                  "type": "number",
                  "readOnly": true
               },
               "supplier": {
                  "$ref": "#/components/schemas/Supplier"
               },
               "resaleProduct": {
                  "$ref": "#/components/schemas/Product"
               },
               "isDeletable": {
                  "type": "boolean",
                  "readOnly": true
               },
               "vendorName": {
                  "type": "string",
                  "readOnly": true
               },
               "isEfoNelfoProduct": {
                  "type": "boolean",
                  "readOnly": true
               },
               "wholesalerId": {
                  "minimum": 0,
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "isMainSupplierProduct": {
                  "type": "boolean",
                  "description": "This feature is available only in pilot"
               }
            }
         },
         "Inventory": {
            "required": [
               "name"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "name": {
                  "maxLength": 255,
                  "minLength": 1,
                  "type": "string"
               },
               "number": {
                  "maxLength": 100,
                  "minLength": 0,
                  "type": "string"
               },
               "displayName": {
                  "type": "string",
                  "readOnly": true
               },
               "isMainInventory": {
                  "type": "boolean"
               },
               "isInactive": {
                  "type": "boolean"
               },
               "description": {
                  "maxLength": 255,
                  "type": "string"
               },
               "email": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
               },
               "phone": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
               },
               "deletable": {
                  "type": "boolean"
               },
               "address": {
                  "$ref": "#/components/schemas/Address"
               },
               "lastStocking": {
                  "type": "string"
               },
               "status": {
                  "type": "string"
               },
               "hasLocations": {
                  "type": "boolean"
               },
               "inactive": {
                  "type": "boolean"
               },
               "mainInventory": {
                  "type": "boolean"
               }
            }
         },
         "InventoryLocation": {
            "required": [
               "inventory",
               "name"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "inventory": {
                  "$ref": "#/components/schemas/Inventory"
               },
               "number": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "name": {
                  "maxLength": 255,
                  "type": "string"
               },
               "displayName": {
                  "type": "string",
                  "readOnly": true
               },
               "isInactive": {
                  "type": "boolean"
               },
               "isDeletable": {
                  "type": "boolean",
                  "readOnly": true
               }
            }
         },
         "Contact": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "firstName": {
                  "maxLength": 100,
                  "minLength": 0,
                  "type": "string"
               },
               "lastName": {
                  "maxLength": 100,
                  "minLength": 0,
                  "type": "string"
               },
               "displayName": {
                  "type": "string"
               },
               "email": {
                  "maxLength": 100,
                  "minLength": 0,
                  "type": "string",
                  "format": "email"
               },
               "phoneNumberMobileCountry": {
                  "$ref": "#/components/schemas/Country"
               },
               "phoneNumberMobile": {
                  "maxLength": 100,
                  "type": "string"
               },
               "phoneNumberWork": {
                  "maxLength": 100,
                  "type": "string"
               },
               "customer": {
                  "$ref": "#/components/schemas/Customer"
               },
               "department": {
                  "$ref": "#/components/schemas/Department"
               },
               "isInactive": {
                  "type": "boolean",
                  "readOnly": true
               }
            }
         },
         "Order": {
            "required": [
               "customer",
               "deliveryDate",
               "orderDate"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "customer": {
                  "$ref": "#/components/schemas/Customer"
               },
               "contact": {
                  "$ref": "#/components/schemas/Contact"
               },
               "attn": {
                  "$ref": "#/components/schemas/Contact"
               },
               "displayName": {
                  "type": "string",
                  "readOnly": true
               },
               "receiverEmail": {
                  "maxLength": 254,
                  "type": "string"
               },
               "overdueNoticeEmail": {
                  "maxLength": 254,
                  "type": "string",
                  "format": "email"
               },
               "number": {
                  "maxLength": 100,
                  "type": "string"
               },
               "reference": {
                  "maxLength": 255,
                  "type": "string"
               },
               "ourContact": {
                  "$ref": "#/components/schemas/Contact"
               },
               "ourContactEmployee": {
                  "$ref": "#/components/schemas/Employee"
               },
               "department": {
                  "$ref": "#/components/schemas/Department"
               },
               "orderDate": {
                  "type": "string"
               },
               "project": {
                  "$ref": "#/components/schemas/Project"
               },
               "invoiceComment": {
                  "type": "string",
                  "description": "Comment to be displayed in the invoice based on this order. Can be also found in Invoice.invoiceComment on Invoice objects."
               },
               "currency": {
                  "$ref": "#/components/schemas/Currency"
               },
               "invoicesDueIn": {
                  "maximum": 10000,
                  "minimum": 0,
                  "type": "integer",
                  "description": "Number of days/months in which invoices created from this order is due",
                  "format": "int32"
               },
               "status": {
                  "type": "string",
                  "description": "Logistics only",
                  "enum": [
                     "NOT_CHOSEN",
                     "NEW",
                     "CONFIRMATION_SENT",
                     "READY_FOR_PICKING",
                     "PICKED",
                     "PACKED",
                     "READY_FOR_SHIPPING",
                     "READY_FOR_INVOICING",
                     "INVOICED",
                     "CANCELLED"
                  ]
               },
               "invoicesDueInType": {
                  "type": "string",
                  "description": "Set the time unit of invoicesDueIn. The special case RECURRING_DAY_OF_MONTH enables the due date to be fixed to a specific day of the month, in this case the fixed due date will automatically be set as standard on all invoices created from this order. Note that when RECURRING_DAY_OF_MONTH is set, the due date will be set to the last day of month if \"31\" is set in invoicesDueIn.",
                  "enum": [
                     "DAYS",
                     "MONTHS",
                     "RECURRING_DAY_OF_MONTH"
                  ]
               },
               "isShowOpenPostsOnInvoices": {
                  "type": "boolean",
                  "description": "Show account statement - open posts on invoices created from this order"
               },
               "isClosed": {
                  "type": "boolean",
                  "description": "Denotes if this order is closed. A closed order can no longer be invoiced unless it is opened again."
               },
               "deliveryDate": {
                  "type": "string"
               },
               "deliveryAddress": {
                  "$ref": "#/components/schemas/DeliveryAddress"
               },
               "deliveryComment": {
                  "type": "string"
               },
               "isPrioritizeAmountsIncludingVat": {
                  "type": "boolean"
               },
               "orderLineSorting": {
                  "type": "string",
                  "enum": [
                     "ID",
                     "PRODUCT",
                     "CUSTOM"
                  ]
               },
               "orderGroups": {
                  "type": "array",
                  "description": "Order line groups",
                  "items": {
                     "$ref": "#/components/schemas/OrderGroup"
                  }
               },
               "orderLines": {
                  "type": "array",
                  "description": "Order lines tied to the order. New OrderLines may be embedded here, in some endpoints.",
                  "items": {
                     "$ref": "#/components/schemas/OrderLine"
                  }
               },
               "isSubscription": {
                  "type": "boolean",
                  "description": "If true, the order is a subscription, which enables periodical invoicing of order lines. First, create an order with isSubscription=true, then approve it for subscription invoicing with the :approveSubscriptionInvoice method."
               },
               "subscriptionDuration": {
                  "minimum": 0,
                  "type": "integer",
                  "description": "Number of months/years the subscription shall run",
                  "format": "int32"
               },
               "subscriptionDurationType": {
                  "type": "string",
                  "description": "The time unit of subscriptionDuration",
                  "enum": [
                     "MONTHS",
                     "YEAR"
                  ]
               },
               "subscriptionPeriodsOnInvoice": {
                  "minimum": 0,
                  "type": "integer",
                  "description": "Number of periods on each invoice",
                  "format": "int32"
               },
               "subscriptionPeriodsOnInvoiceType": {
                  "type": "string",
                  "description": "The time unit of subscriptionPeriodsOnInvoice",
                  "readOnly": true,
                  "enum": [
                     "MONTHS"
                  ]
               },
               "subscriptionInvoicingTimeInAdvanceOrArrears": {
                  "type": "string",
                  "description": "Invoicing in advance/in arrears",
                  "enum": [
                     "ADVANCE",
                     "ARREARS"
                  ]
               },
               "subscriptionInvoicingTime": {
                  "minimum": 0,
                  "type": "integer",
                  "description": "Number of days/months invoicing in advance/in arrears",
                  "format": "int32"
               },
               "subscriptionInvoicingTimeType": {
                  "type": "string",
                  "description": "The time unit of subscriptionInvoicingTime",
                  "enum": [
                     "DAYS",
                     "MONTHS"
                  ]
               },
               "isSubscriptionAutoInvoicing": {
                  "type": "boolean",
                  "description": "Automatic invoicing. Starts when the subscription is approved"
               },
               "preliminaryInvoice": {
                  "$ref": "#/components/schemas/Invoice"
               },
               "attachment": {
                  "type": "array",
                  "description": "[BETA] Attachments belonging to this order",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Document"
                  }
               },
               "sendMethodDescription": {
                  "type": "string",
                  "description": "Description of how this invoice will be sent"
               },
               "canCreateBackorder": {
                  "type": "boolean",
                  "readOnly": true
               },
               "invoiceOnAccountVatHigh": {
                  "type": "boolean",
                  "description": "Is the on account(a konto) amounts including vat "
               },
               "totalInvoicedOnAccountAmountAbsoluteCurrency": {
                  "type": "number",
                  "description": "Amount paid on account(a konto)",
                  "readOnly": true
               },
               "invoiceSendSMSNotification": {
                  "type": "boolean",
                  "description": "Is sms-notification on/off",
                  "readOnly": true
               },
               "invoiceSMSNotificationNumber": {
                  "maxLength": 100,
                  "type": "string",
                  "description": "The phone number of the receiver of sms notifications",
                  "readOnly": true
               }
            }
         },
         "OrderGroup": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "order": {
                  "$ref": "#/components/schemas/Order"
               },
               "title": {
                  "maxLength": 255,
                  "type": "string"
               },
               "comment": {
                  "type": "string"
               },
               "sortIndex": {
                  "minimum": 0,
                  "type": "integer",
                  "description": "Minimum 1. Defines the presentation order of the orderGroups. Does not need to be, and is often not continuous.",
                  "format": "int32"
               },
               "orderLines": {
                  "type": "array",
                  "description": "Order lines belonging to the OrderGroup. Order lines that does not belong to a group, can be posted on the orderLines field on the order.",
                  "items": {
                     "$ref": "#/components/schemas/OrderLine"
                  }
               }
            }
         },
         "OrderLine": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "product": {
                  "$ref": "#/components/schemas/Product"
               },
               "inventory": {
                  "$ref": "#/components/schemas/Inventory"
               },
               "inventoryLocation": {
                  "$ref": "#/components/schemas/InventoryLocation"
               },
               "description": {
                  "type": "string"
               },
               "count": {
                  "type": "number"
               },
               "unitCostCurrency": {
                  "type": "number",
                  "description": "Unit price purchase (cost) excluding VAT in the order's currency"
               },
               "unitPriceExcludingVatCurrency": {
                  "type": "number",
                  "description": "Unit price of purchase excluding VAT in the order's currency"
               },
               "currency": {
                  "$ref": "#/components/schemas/Currency"
               },
               "markup": {
                  "type": "number",
                  "description": "Markup given as a percentage (%)"
               },
               "discount": {
                  "type": "number",
                  "description": "Discount given as a percentage (%)"
               },
               "vatType": {
                  "$ref": "#/components/schemas/VatType"
               },
               "amountExcludingVatCurrency": {
                  "type": "number",
                  "description": "Total amount on order line excluding VAT in the order's currency",
                  "readOnly": true
               },
               "amountIncludingVatCurrency": {
                  "type": "number",
                  "description": "Total amount on order line including VAT in the order's currency",
                  "readOnly": true
               },
               "order": {
                  "$ref": "#/components/schemas/Order"
               },
               "unitPriceIncludingVatCurrency": {
                  "type": "number",
                  "description": "Unit price of purchase including VAT in the order's currency"
               },
               "isSubscription": {
                  "type": "boolean"
               },
               "subscriptionPeriodStart": {
                  "type": "string"
               },
               "subscriptionPeriodEnd": {
                  "type": "string"
               },
               "orderGroup": {
                  "$ref": "#/components/schemas/OrderGroup"
               },
               "sortIndex": {
                  "minimum": 0,
                  "type": "integer",
                  "description": "Minimum 1. Defines the presentation order of the lines. Does not need to be, and is often not continuous.",
                  "format": "int32"
               }
            }
         },
         "Invoice": {
            "required": [
               "invoiceDate",
               "invoiceDueDate",
               "orders"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "invoiceNumber": {
                  "minimum": 0,
                  "type": "integer",
                  "description": "If value is set to 0, the invoice number will be generated.",
                  "format": "int32"
               },
               "invoiceDate": {
                  "type": "string"
               },
               "customer": {
                  "$ref": "#/components/schemas/Customer"
               },
               "creditedInvoice": {
                  "type": "integer",
                  "description": "The id of the original invoice if this is a credit note.",
                  "format": "int32",
                  "readOnly": true
               },
               "isCredited": {
                  "type": "boolean",
                  "readOnly": true
               },
               "invoiceDueDate": {
                  "type": "string"
               },
               "kid": {
                  "maxLength": 25,
                  "type": "string",
                  "description": "KID - Kundeidentifikasjonsnummer."
               },
               "invoiceComment": {
                  "type": "string",
                  "description": "Comment text for the invoice. This was specified on the order as invoiceComment.",
                  "readOnly": true
               },
               "comment": {
                  "type": "string",
                  "description": "Comment text for the specific invoice."
               },
               "orders": {
                  "type": "array",
                  "description": "Related orders. Only one order per invoice is supported at the moment.",
                  "items": {
                     "$ref": "#/components/schemas/Order"
                  }
               },
               "orderLines": {
                  "type": "array",
                  "description": "Orderlines connected to the invoice.",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/OrderLine"
                  }
               },
               "travelReports": {
                  "type": "array",
                  "description": "Travel reports connected to the invoice.",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/TravelExpense"
                  }
               },
               "projectInvoiceDetails": {
                  "type": "array",
                  "description": "ProjectInvoiceDetails contains additional information about the invoice, in particular invoices for projects. It contains information about the charged project, the fee amount, extra percent and amount, extra costs, travel expenses, invoice and project comments, akonto amount and values determining if extra costs, akonto and hours should be included. ProjectInvoiceDetails is an object which represents the relation between an invoice and a Project, Orderline and OrderOut object.",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/ProjectInvoiceDetails"
                  }
               },
               "voucher": {
                  "$ref": "#/components/schemas/Voucher"
               },
               "deliveryDate": {
                  "type": "string",
                  "description": "The delivery date.",
                  "readOnly": true
               },
               "amount": {
                  "type": "number",
                  "description": "In the company’s currency, typically NOK.",
                  "readOnly": true
               },
               "amountCurrency": {
                  "type": "number",
                  "description": "In the specified currency.",
                  "readOnly": true
               },
               "amountExcludingVat": {
                  "type": "number",
                  "description": "Amount excluding VAT (NOK).",
                  "readOnly": true
               },
               "amountExcludingVatCurrency": {
                  "type": "number",
                  "description": "Amount excluding VAT in the specified currency.",
                  "readOnly": true
               },
               "amountRoundoff": {
                  "type": "number",
                  "description": "Amount of round off to nearest integer.",
                  "readOnly": true
               },
               "amountRoundoffCurrency": {
                  "type": "number",
                  "description": "Amount of round off to nearest integer in the specified currency.",
                  "readOnly": true
               },
               "amountOutstanding": {
                  "type": "number",
                  "description": "The amount outstanding based on the history collection, excluding reminders and any existing remits, in the invoice currency.",
                  "readOnly": true
               },
               "amountCurrencyOutstanding": {
                  "type": "number",
                  "description": "The amountCurrency outstanding based on the history collection, excluding reminders and any existing remits, in the invoice currency.",
                  "readOnly": true
               },
               "amountOutstandingTotal": {
                  "type": "number",
                  "description": "The amount outstanding based on the history collection and including the last reminder and any existing remits. This is the total invoice balance including reminders and remittances, in the invoice currency.",
                  "readOnly": true
               },
               "amountCurrencyOutstandingTotal": {
                  "type": "number",
                  "description": "The amountCurrency outstanding based on the history collection and including the last reminder and any existing remits. This is the total invoice balance including reminders and remittances, in the invoice currency.",
                  "readOnly": true
               },
               "sumRemits": {
                  "type": "number",
                  "description": "The sum of all open remittances of the invoice. Remittances are reimbursement payments back to the customer and are therefore relevant to the bookkeeping of the invoice in the accounts.",
                  "readOnly": true
               },
               "currency": {
                  "$ref": "#/components/schemas/Currency"
               },
               "isCreditNote": {
                  "type": "boolean",
                  "readOnly": true
               },
               "isCharged": {
                  "type": "boolean",
                  "readOnly": true
               },
               "isApproved": {
                  "type": "boolean",
                  "readOnly": true
               },
               "postings": {
                  "type": "array",
                  "description": "The invoice postings, which includes a posting for the invoice with a positive amount, and one or more posting for the payments with negative amounts.",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Posting"
                  }
               },
               "reminders": {
                  "type": "array",
                  "description": "Invoice debt collection and reminders.",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Reminder"
                  }
               },
               "invoiceRemarks": {
                  "type": "string",
                  "description": "Deprecated Invoice remarks - please use the 'invoiceRemark' instead."
               },
               "invoiceRemark": {
                  "$ref": "#/components/schemas/InvoiceRemark"
               },
               "paymentTypeId": {
                  "minimum": 0,
                  "type": "integer",
                  "description": "[BETA] Optional. Used to specify payment type for prepaid invoices. Payment type can be specified here, or as a parameter to the /invoice API endpoint.",
                  "format": "int32"
               },
               "paidAmount": {
                  "type": "number",
                  "description": "[BETA] Optional. Used to specify the prepaid amount of the invoice. The paid amount can be specified here, or as a parameter to the /invoice API endpoint."
               },
               "isPeriodizationPossible": {
                  "type": "boolean",
                  "readOnly": true
               },
               "ehfSendStatus": {
                  "type": "string",
                  "description": "[Deprecated] EHF (Peppol) send status. This only shows status for historic EHFs.",
                  "enum": [
                     "DO_NOT_SEND",
                     "SEND",
                     "SENT",
                     "SEND_FAILURE_RECIPIENT_NOT_FOUND"
                  ]
               }
            }
         },
         "Payslip": {
            "required": [
               "employee"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "transaction": {
                  "$ref": "#/components/schemas/SalaryTransaction"
               },
               "employee": {
                  "$ref": "#/components/schemas/Employee"
               },
               "date": {
                  "type": "string",
                  "description": "Voucher date."
               },
               "year": {
                  "type": "integer",
                  "format": "int32"
               },
               "month": {
                  "type": "integer",
                  "format": "int32"
               },
               "specifications": {
                  "type": "array",
                  "description": "Link to salary specifications.",
                  "items": {
                     "$ref": "#/components/schemas/SalarySpecification"
                  }
               },
               "vacationAllowanceAmount": {
                  "type": "number",
                  "readOnly": true
               },
               "grossAmount": {
                  "type": "number",
                  "readOnly": true
               },
               "amount": {
                  "type": "number",
                  "readOnly": true
               },
               "number": {
                  "minimum": 0,
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               }
            }
         },
         "SalaryTransaction": {
            "required": [
               "month",
               "payslips",
               "year"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "date": {
                  "type": "string",
                  "description": "Voucher date."
               },
               "year": {
                  "type": "integer",
                  "format": "int32"
               },
               "month": {
                  "type": "integer",
                  "format": "int32"
               },
               "isHistorical": {
                  "type": "boolean",
                  "description": "With historical wage vouchers you can update the wage system with information dated before the opening balance."
               },
               "paySlipsAvailableDate": {
                  "type": "string",
                  "description": "The date payslips are made available to the employee. Defaults to voucherDate."
               },
               "payslips": {
                  "type": "array",
                  "description": "Link to individual payslip objects.",
                  "items": {
                     "$ref": "#/components/schemas/Payslip"
                  }
               }
            }
         },
         "SalaryType": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "number": {
                  "maxLength": 10,
                  "type": "string"
               },
               "name": {
                  "maxLength": 255,
                  "type": "string"
               },
               "description": {
                  "type": "string"
               },
               "showInTimesheet": {
                  "type": "boolean",
                  "readOnly": true
               }
            }
         },
         "SalarySpecification": {
            "required": [
               "count",
               "rate",
               "salaryType"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "rate": {
                  "type": "number"
               },
               "count": {
                  "type": "number"
               },
               "project": {
                  "$ref": "#/components/schemas/Project"
               },
               "department": {
                  "$ref": "#/components/schemas/Department"
               },
               "salaryType": {
                  "$ref": "#/components/schemas/SalaryType"
               },
               "payslip": {
                  "$ref": "#/components/schemas/Payslip"
               },
               "employee": {
                  "$ref": "#/components/schemas/Employee"
               },
               "description": {
                  "type": "string"
               },
               "year": {
                  "type": "integer",
                  "format": "int32"
               },
               "month": {
                  "type": "integer",
                  "format": "int32"
               },
               "amount": {
                  "type": "number"
               }
            }
         },
         "TravelDetails": {
            "type": "object",
            "properties": {
               "isForeignTravel": {
                  "type": "boolean"
               },
               "isDayTrip": {
                  "type": "boolean"
               },
               "isCompensationFromRates": {
                  "type": "boolean"
               },
               "departureDate": {
                  "type": "string"
               },
               "returnDate": {
                  "type": "string"
               },
               "detailedJourneyDescription": {
                  "type": "string"
               },
               "departureFrom": {
                  "maxLength": 255,
                  "type": "string"
               },
               "destination": {
                  "maxLength": 255,
                  "type": "string"
               },
               "departureTime": {
                  "maxLength": 20,
                  "type": "string"
               },
               "returnTime": {
                  "maxLength": 20,
                  "type": "string"
               },
               "purpose": {
                  "type": "string"
               }
            }
         },
         "TravelExpense": {
            "required": [
               "employee"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "project": {
                  "$ref": "#/components/schemas/Project"
               },
               "employee": {
                  "$ref": "#/components/schemas/Employee"
               },
               "approvedBy": {
                  "$ref": "#/components/schemas/Employee"
               },
               "completedBy": {
                  "$ref": "#/components/schemas/Employee"
               },
               "rejectedBy": {
                  "$ref": "#/components/schemas/Employee"
               },
               "department": {
                  "$ref": "#/components/schemas/Department"
               },
               "payslip": {
                  "$ref": "#/components/schemas/Payslip"
               },
               "vatType": {
                  "$ref": "#/components/schemas/VatType"
               },
               "paymentCurrency": {
                  "$ref": "#/components/schemas/Currency"
               },
               "travelDetails": {
                  "$ref": "#/components/schemas/TravelDetails"
               },
               "voucher": {
                  "$ref": "#/components/schemas/Voucher"
               },
               "attachment": {
                  "$ref": "#/components/schemas/Document"
               },
               "isCompleted": {
                  "type": "boolean",
                  "readOnly": true
               },
               "isApproved": {
                  "type": "boolean",
                  "readOnly": true
               },
               "rejectedComment": {
                  "type": "string",
                  "readOnly": true
               },
               "isChargeable": {
                  "type": "boolean"
               },
               "isFixedInvoicedAmount": {
                  "type": "boolean"
               },
               "isIncludeAttachedReceiptsWhenReinvoicing": {
                  "type": "boolean"
               },
               "completedDate": {
                  "type": "string",
                  "readOnly": true
               },
               "approvedDate": {
                  "type": "string",
                  "readOnly": true
               },
               "date": {
                  "type": "string",
                  "readOnly": true
               },
               "travelAdvance": {
                  "type": "number"
               },
               "fixedInvoicedAmount": {
                  "type": "number"
               },
               "amount": {
                  "type": "number",
                  "readOnly": true
               },
               "paymentAmount": {
                  "type": "number",
                  "readOnly": true
               },
               "chargeableAmount": {
                  "type": "number",
                  "readOnly": true
               },
               "lowRateVAT": {
                  "type": "number",
                  "readOnly": true
               },
               "mediumRateVAT": {
                  "type": "number",
                  "readOnly": true
               },
               "highRateVAT": {
                  "type": "number",
                  "readOnly": true
               },
               "paymentAmountCurrency": {
                  "type": "number",
                  "readOnly": true
               },
               "number": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "invoice": {
                  "$ref": "#/components/schemas/Invoice"
               },
               "title": {
                  "maxLength": 255,
                  "type": "string"
               },
               "perDiemCompensations": {
                  "type": "array",
                  "description": "Link to individual per diem compensations.",
                  "items": {
                     "$ref": "#/components/schemas/PerDiemCompensation"
                  }
               },
               "mileageAllowances": {
                  "type": "array",
                  "description": "Link to individual mileage allowances.",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/MileageAllowance"
                  }
               },
               "accommodationAllowances": {
                  "type": "array",
                  "description": "Link to individual accommodation allowances.",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/AccommodationAllowance"
                  }
               },
               "costs": {
                  "type": "array",
                  "description": "Link to individual costs.",
                  "items": {
                     "$ref": "#/components/schemas/Cost"
                  }
               },
               "attachmentCount": {
                  "maximum": 2147483647,
                  "minimum": 0,
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "state": {
                  "type": "string",
                  "readOnly": true,
                  "enum": [
                     "ALL",
                     "OPEN",
                     "APPROVED",
                     "SALARY_PAID",
                     "DELIVERED",
                     "REJECTED"
                  ]
               },
               "actions": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Link"
                  }
               },
               "isSalaryAdmin": {
                  "type": "boolean",
                  "readOnly": true
               },
               "showPayslip": {
                  "type": "boolean",
                  "readOnly": true
               },
               "accountingPeriodClosed": {
                  "type": "boolean",
                  "readOnly": true
               },
               "accountingPeriodVATClosed": {
                  "type": "boolean",
                  "readOnly": true
               }
            }
         },
         "TravelExpenseRateCategory": {
            "required": [
               "fromDate",
               "toDate"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "name": {
                  "type": "string",
                  "readOnly": true
               },
               "ameldingWageCode": {
                  "type": "integer",
                  "format": "int32"
               },
               "wageCodeNumber": {
                  "type": "string"
               },
               "isValidDayTrip": {
                  "type": "boolean"
               },
               "isValidAccommodation": {
                  "type": "boolean"
               },
               "isValidDomestic": {
                  "type": "boolean"
               },
               "isValidForeignTravel": {
                  "type": "boolean"
               },
               "isRequiresZone": {
                  "type": "boolean"
               },
               "isRequiresOvernightAccommodation": {
                  "type": "boolean"
               },
               "fromDate": {
                  "type": "string"
               },
               "toDate": {
                  "type": "string"
               },
               "type": {
                  "type": "string",
                  "enum": [
                     "PER_DIEM",
                     "ACCOMMODATION_ALLOWANCE",
                     "MILEAGE_ALLOWANCE"
                  ]
               }
            }
         },
         "TravelExpenseRate": {
            "required": [
               "rateCategory",
               "zone"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "rateCategory": {
                  "$ref": "#/components/schemas/TravelExpenseRateCategory"
               },
               "zone": {
                  "type": "string"
               },
               "rate": {
                  "type": "number"
               },
               "breakfastDeductionRate": {
                  "type": "number"
               },
               "lunchDeductionRate": {
                  "type": "number"
               },
               "dinnerDeductionRate": {
                  "type": "number"
               }
            }
         },
         "PerDiemCompensation": {
            "required": [
               "location"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "travelExpense": {
                  "$ref": "#/components/schemas/TravelExpense"
               },
               "rateType": {
                  "$ref": "#/components/schemas/TravelExpenseRate"
               },
               "rateCategory": {
                  "$ref": "#/components/schemas/TravelExpenseRateCategory"
               },
               "countryCode": {
                  "type": "string"
               },
               "travelExpenseZoneId": {
                  "type": "integer",
                  "description": "Optional travel expense zone id. If not specified, the value from field zone will be used.",
                  "format": "int32"
               },
               "overnightAccommodation": {
                  "type": "string",
                  "description": "Set what sort of accommodation was had overnight.",
                  "enum": [
                     "NONE",
                     "HOTEL",
                     "BOARDING_HOUSE_WITHOUT_COOKING",
                     "BOARDING_HOUSE_WITH_COOKING"
                  ]
               },
               "location": {
                  "maxLength": 255,
                  "type": "string"
               },
               "address": {
                  "type": "string"
               },
               "count": {
                  "type": "integer",
                  "format": "int32"
               },
               "rate": {
                  "type": "number"
               },
               "amount": {
                  "type": "number"
               },
               "isDeductionForBreakfast": {
                  "type": "boolean"
               },
               "isDeductionForLunch": {
                  "type": "boolean"
               },
               "isDeductionForDinner": {
                  "type": "boolean"
               }
            }
         },
         "MileageAllowance": {
            "required": [
               "date",
               "departureLocation",
               "destination"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "travelExpense": {
                  "$ref": "#/components/schemas/TravelExpense"
               },
               "rateType": {
                  "$ref": "#/components/schemas/TravelExpenseRate"
               },
               "rateCategory": {
                  "$ref": "#/components/schemas/TravelExpenseRateCategory"
               },
               "date": {
                  "type": "string"
               },
               "departureLocation": {
                  "type": "string"
               },
               "destination": {
                  "type": "string"
               },
               "km": {
                  "type": "number"
               },
               "rate": {
                  "type": "number"
               },
               "amount": {
                  "type": "number"
               },
               "isCompanyCar": {
                  "type": "boolean"
               },
               "vehicleType": {
                  "minimum": 0,
                  "type": "integer",
                  "description": "The corresponded number for the vehicleType. Default value = 0.",
                  "format": "int32"
               },
               "passengers": {
                  "type": "array",
                  "description": "Link to individual passengers.",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Passenger"
                  }
               },
               "passengerSupplement": {
                  "$ref": "#/components/schemas/MileageAllowance"
               },
               "trailerSupplement": {
                  "$ref": "#/components/schemas/MileageAllowance"
               },
               "tollCost": {
                  "$ref": "#/components/schemas/Cost"
               },
               "drivingStops": {
                  "type": "array",
                  "description": "Link to individual mileage stops.",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/DrivingStop"
                  }
               }
            }
         },
         "Passenger": {
            "required": [
               "name"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "name": {
                  "maxLength": 255,
                  "type": "string"
               },
               "mileageAllowance": {
                  "$ref": "#/components/schemas/MileageAllowance"
               }
            }
         },
         "TravelCostCategory": {
            "required": [
               "description"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "description": {
                  "maxLength": 255,
                  "type": "string"
               },
               "account": {
                  "$ref": "#/components/schemas/Account"
               },
               "vatType": {
                  "$ref": "#/components/schemas/VatType"
               },
               "isVatLocked": {
                  "type": "boolean",
                  "readOnly": true
               },
               "showOnTravelExpenses": {
                  "type": "boolean",
                  "readOnly": true
               },
               "showOnEmployeeExpenses": {
                  "type": "boolean",
                  "readOnly": true
               },
               "isInactive": {
                  "type": "boolean",
                  "readOnly": true
               },
               "sequence": {
                  "minimum": 0,
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               }
            }
         },
         "TravelPaymentType": {
            "required": [
               "description"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "description": {
                  "maxLength": 255,
                  "type": "string"
               },
               "account": {
                  "$ref": "#/components/schemas/Account"
               },
               "showOnTravelExpenses": {
                  "type": "boolean",
                  "readOnly": true
               },
               "showOnEmployeeExpenses": {
                  "type": "boolean",
                  "readOnly": true
               },
               "isInactive": {
                  "type": "boolean",
                  "readOnly": true
               }
            }
         },
         "Cost": {
            "required": [
               "amountCurrencyIncVat",
               "paymentType"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "travelExpense": {
                  "$ref": "#/components/schemas/TravelExpense"
               },
               "vatType": {
                  "$ref": "#/components/schemas/VatType"
               },
               "currency": {
                  "$ref": "#/components/schemas/Currency"
               },
               "costCategory": {
                  "$ref": "#/components/schemas/TravelCostCategory"
               },
               "paymentType": {
                  "$ref": "#/components/schemas/TravelPaymentType"
               },
               "category": {
                  "maxLength": 100,
                  "type": "string"
               },
               "comments": {
                  "type": "string"
               },
               "rate": {
                  "type": "number"
               },
               "amountCurrencyIncVat": {
                  "type": "number"
               },
               "amountNOKInclVAT": {
                  "type": "number"
               },
               "amountNOKInclVATLow": {
                  "type": "number",
                  "readOnly": true
               },
               "amountNOKInclVATMedium": {
                  "type": "number",
                  "readOnly": true
               },
               "amountNOKInclVATHigh": {
                  "type": "number",
                  "readOnly": true
               },
               "isPaidByEmployee": {
                  "type": "boolean",
                  "readOnly": true
               },
               "isChargeable": {
                  "type": "boolean"
               },
               "date": {
                  "type": "string"
               },
               "participants": {
                  "type": "array",
                  "description": "Link to individual expense participant.",
                  "items": {
                     "$ref": "#/components/schemas/TravelExpenseParticipant"
                  }
               },
               "predictions": {
                  "type": "object",
                  "additionalProperties": {
                     "$ref": "#/components/schemas/Prediction"
                  }
               }
            }
         },
         "TravelExpenseParticipant": {
            "required": [
               "cost"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "displayName": {
                  "type": "string"
               },
               "employeeId": {
                  "type": "integer",
                  "description": "Optional employee id in case the participant is an employee",
                  "format": "int32"
               },
               "cost": {
                  "$ref": "#/components/schemas/Cost"
               }
            }
         },
         "Prediction": {
            "type": "object",
            "properties": {
               "predictedValue": {
                  "type": "string"
               },
               "confidence": {
                  "type": "string"
               }
            }
         },
         "DrivingStop": {
            "required": [
               "locationName",
               "mileageAllowance"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "locationName": {
                  "maxLength": 250,
                  "type": "string"
               },
               "latitude": {
                  "type": "number"
               },
               "longitude": {
                  "type": "number"
               },
               "sortIndex": {
                  "minimum": 0,
                  "type": "integer",
                  "format": "int32"
               },
               "type": {
                  "minimum": 0,
                  "type": "integer",
                  "format": "int32"
               },
               "mileageAllowance": {
                  "$ref": "#/components/schemas/MileageAllowance"
               }
            }
         },
         "AccommodationAllowance": {
            "required": [
               "location"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "travelExpense": {
                  "$ref": "#/components/schemas/TravelExpense"
               },
               "rateType": {
                  "$ref": "#/components/schemas/TravelExpenseRate"
               },
               "rateCategory": {
                  "$ref": "#/components/schemas/TravelExpenseRateCategory"
               },
               "zone": {
                  "type": "string"
               },
               "location": {
                  "maxLength": 255,
                  "type": "string"
               },
               "address": {
                  "type": "string"
               },
               "count": {
                  "type": "integer",
                  "format": "int32"
               },
               "rate": {
                  "type": "number"
               },
               "amount": {
                  "type": "number"
               }
            }
         },
         "Link": {
            "type": "object",
            "properties": {
               "rel": {
                  "type": "string"
               },
               "type": {
                  "type": "string",
                  "enum": [
                     "POST",
                     "PUT",
                     "GET",
                     "DELETE"
                  ]
               },
               "href": {
                  "type": "string"
               }
            }
         },
         "ProjectInvoiceDetails": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "project": {
                  "$ref": "#/components/schemas/Project"
               },
               "feeAmount": {
                  "type": "number",
                  "description": "Fee amount of the project. For example: 100 NOK.",
                  "readOnly": true
               },
               "feeAmountCurrency": {
                  "type": "number",
                  "description": "Fee amount of the project in the invoice currency.",
                  "readOnly": true
               },
               "markupPercent": {
                  "type": "number",
                  "description": "The percentage value of mark-up of amountFee. For example: 10%.",
                  "readOnly": true
               },
               "markupAmount": {
                  "type": "number",
                  "description": "The amount value of mark-up of amountFee on the project invoice. For example: 10 NOK.",
                  "readOnly": true
               },
               "markupAmountCurrency": {
                  "type": "number",
                  "description": "The amount value of mark-up of amountFee on the project invoice, in the invoice currency.",
                  "readOnly": true
               },
               "amountOrderLinesAndReinvoicing": {
                  "type": "number",
                  "description": "The amount of chargeable manual order lines and vendor invoices on the project invoice.",
                  "readOnly": true
               },
               "amountOrderLinesAndReinvoicingCurrency": {
                  "type": "number",
                  "description": "The amount of chargeable manual order lines and vendor invoices on the project invoice, in the invoice currency.",
                  "readOnly": true
               },
               "amountTravelReportsAndExpenses": {
                  "type": "number",
                  "description": "The amount of travel costs and expenses on the project invoice.",
                  "readOnly": true
               },
               "amountTravelReportsAndExpensesCurrency": {
                  "type": "number",
                  "description": "The amount of travel costs and expenses on the project invoice, in the invoice currency.",
                  "readOnly": true
               },
               "feeInvoiceText": {
                  "type": "string",
                  "description": "The fee comment on the project invoice.",
                  "readOnly": true
               },
               "invoiceText": {
                  "type": "string",
                  "description": "The comment on the project invoice.",
                  "readOnly": true
               },
               "includeOrderLinesAndReinvoicing": {
                  "type": "boolean",
                  "description": "Determines if extra costs should be included on the project invoice.",
                  "readOnly": true
               },
               "includeHours": {
                  "type": "boolean",
                  "description": "Determines if hours should be included on the project invoice.",
                  "readOnly": true
               },
               "includeOnAccountBalance": {
                  "type": "boolean",
                  "description": "Determines if akonto should be included on the project invoice.",
                  "readOnly": true
               },
               "onAccountBalanceAmount": {
                  "type": "number",
                  "description": "The akonto amount on the project invoice.",
                  "readOnly": true
               },
               "onAccountBalanceAmountCurrency": {
                  "type": "number",
                  "description": "The akonto amount on the project invoice in the invoice currency.",
                  "readOnly": true
               },
               "vatType": {
                  "$ref": "#/components/schemas/VatType"
               },
               "invoice": {
                  "$ref": "#/components/schemas/Invoice"
               }
            }
         },
         "Posting": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "voucher": {
                  "$ref": "#/components/schemas/Voucher"
               },
               "date": {
                  "type": "string"
               },
               "description": {
                  "type": "string"
               },
               "account": {
                  "$ref": "#/components/schemas/Account"
               },
               "amortizationAccount": {
                  "$ref": "#/components/schemas/Account"
               },
               "amortizationStartDate": {
                  "type": "string",
                  "description": "Amortization start date. AmortizationAccountId, amortizationStartDate and amortizationEndDate should be provided."
               },
               "amortizationEndDate": {
                  "type": "string"
               },
               "customer": {
                  "$ref": "#/components/schemas/Customer"
               },
               "supplier": {
                  "$ref": "#/components/schemas/Supplier"
               },
               "employee": {
                  "$ref": "#/components/schemas/Employee"
               },
               "project": {
                  "$ref": "#/components/schemas/Project"
               },
               "product": {
                  "$ref": "#/components/schemas/Product"
               },
               "department": {
                  "$ref": "#/components/schemas/Department"
               },
               "vatType": {
                  "$ref": "#/components/schemas/VatType"
               },
               "amount": {
                  "type": "number"
               },
               "amountCurrency": {
                  "type": "number"
               },
               "amountGross": {
                  "type": "number"
               },
               "amountGrossCurrency": {
                  "type": "number"
               },
               "currency": {
                  "$ref": "#/components/schemas/Currency"
               },
               "closeGroup": {
                  "$ref": "#/components/schemas/CloseGroup"
               },
               "invoiceNumber": {
                  "maxLength": 100,
                  "type": "string"
               },
               "termOfPayment": {
                  "type": "string"
               },
               "row": {
                  "minimum": 0,
                  "type": "integer",
                  "format": "int32"
               },
               "type": {
                  "type": "string",
                  "readOnly": true,
                  "enum": [
                     "INCOMING_PAYMENT",
                     "INCOMING_PAYMENT_OPPOSITE",
                     "INVOICE_EXPENSE",
                     "OUTGOING_INVOICE_CUSTOMER_POSTING",
                     "WAGE"
                  ]
               },
               "externalRef": {
                  "maxLength": 100,
                  "type": "string",
                  "description": "External reference for identifying payment basis of the posting, e.g., KID, customer identification or credit note number.",
                  "readOnly": true
               },
               "systemGenerated": {
                  "type": "boolean",
                  "readOnly": true
               },
               "taxTransactionType": {
                  "type": "string",
                  "readOnly": true
               },
               "taxTransactionTypeId": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "matched": {
                  "type": "boolean",
                  "readOnly": true
               }
            }
         },
         "Reminder": {
            "required": [
               "termOfPayment",
               "type"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "reminderDate": {
                  "type": "string",
                  "description": "Creation date of the invoice reminder.",
                  "readOnly": true
               },
               "charge": {
                  "type": "number",
                  "description": "The fee part of the reminder, in the company's currency.",
                  "readOnly": true
               },
               "chargeCurrency": {
                  "type": "number",
                  "description": "The fee part of the reminder, in the invoice currency.",
                  "readOnly": true
               },
               "totalCharge": {
                  "type": "number",
                  "description": "The total fee part of all reminders, in the company's currency.",
                  "readOnly": true
               },
               "totalChargeCurrency": {
                  "type": "number",
                  "description": "The total fee part of all reminders, in the invoice currency.",
                  "readOnly": true
               },
               "totalAmountCurrency": {
                  "type": "number",
                  "description": "The total amount to pay in reminder's currency.",
                  "readOnly": true
               },
               "interests": {
                  "type": "number",
                  "description": "The interests part of the reminder.",
                  "readOnly": true
               },
               "interestRate": {
                  "type": "number",
                  "description": "The reminder interest rate.",
                  "readOnly": true
               },
               "termOfPayment": {
                  "type": "string",
                  "description": "The reminder term of payment date."
               },
               "currency": {
                  "$ref": "#/components/schemas/Currency"
               },
               "type": {
                  "type": "string",
                  "enum": [
                     "SOFT_REMINDER",
                     "REMINDER",
                     "NOTICE_OF_DEBT_COLLECTION",
                     "DEBT_COLLECTION"
                  ]
               },
               "comment": {
                  "type": "string"
               },
               "kid": {
                  "maxLength": 25,
                  "type": "string",
                  "description": "KID - Kundeidentifikasjonsnummer."
               },
               "bankAccountNumber": {
                  "maxLength": 255,
                  "type": "string"
               },
               "bankAccountIBAN": {
                  "maxLength": 255,
                  "type": "string"
               },
               "bankAccountSWIFT": {
                  "maxLength": 255,
                  "type": "string"
               },
               "bank": {
                  "maxLength": 255,
                  "type": "string"
               }
            }
         },
         "InvoiceRemark": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "description": {
                  "type": "string"
               },
               "postponeRemindersTo": {
                  "type": "string"
               }
            }
         },
         "ProjectOrderLine": {
            "required": [
               "date",
               "project"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "product": {
                  "$ref": "#/components/schemas/Product"
               },
               "inventory": {
                  "$ref": "#/components/schemas/Inventory"
               },
               "inventoryLocation": {
                  "$ref": "#/components/schemas/InventoryLocation"
               },
               "description": {
                  "type": "string"
               },
               "count": {
                  "type": "number"
               },
               "unitCostCurrency": {
                  "type": "number",
                  "description": "Unit price purchase (cost) excluding VAT in the order's currency"
               },
               "unitPriceExcludingVatCurrency": {
                  "type": "number",
                  "description": "Unit price of purchase excluding VAT in the order's currency"
               },
               "currency": {
                  "$ref": "#/components/schemas/Currency"
               },
               "markup": {
                  "type": "number",
                  "description": "Markup given as a percentage (%)"
               },
               "discount": {
                  "type": "number",
                  "description": "Discount given as a percentage (%)"
               },
               "vatType": {
                  "$ref": "#/components/schemas/VatType"
               },
               "amountExcludingVatCurrency": {
                  "type": "number",
                  "description": "Total amount on order line excluding VAT in the order's currency",
                  "readOnly": true
               },
               "amountIncludingVatCurrency": {
                  "type": "number",
                  "description": "Total amount on order line including VAT in the order's currency",
                  "readOnly": true
               },
               "project": {
                  "$ref": "#/components/schemas/Project"
               },
               "date": {
                  "type": "string"
               },
               "isChargeable": {
                  "type": "boolean"
               },
               "isBudget": {
                  "type": "boolean",
                  "readOnly": true
               },
               "invoice": {
                  "$ref": "#/components/schemas/Invoice"
               }
            }
         },
         "ProjectHourlyRate": {
            "required": [
               "hourlyRateModel",
               "startDate"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "project": {
                  "$ref": "#/components/schemas/Project"
               },
               "startDate": {
                  "type": "string"
               },
               "showInProjectOrder": {
                  "type": "boolean",
                  "description": "Show on contract confirmation/offers"
               },
               "hourlyRateModel": {
                  "type": "string",
                  "description": "Defines the model used for the hourly rate.",
                  "enum": [
                     "TYPE_PREDEFINED_HOURLY_RATES",
                     "TYPE_PROJECT_SPECIFIC_HOURLY_RATES",
                     "TYPE_FIXED_HOURLY_RATE"
                  ]
               },
               "projectSpecificRates": {
                  "type": "array",
                  "description": "Project specific rates if hourlyRateModel is TYPE_PROJECT_SPECIFIC_HOURLY_RATES. ",
                  "items": {
                     "$ref": "#/components/schemas/ProjectSpecificRate"
                  }
               },
               "fixedRate": {
                  "type": "number",
                  "description": "Fixed Hourly rates if hourlyRateModel is TYPE_FIXED_HOURLY_RATE."
               }
            }
         },
         "ProjectSpecificRate": {
            "required": [
               "hourlyRate",
               "projectHourlyRate"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "hourlyRate": {
                  "type": "number"
               },
               "hourlyCostPercentage": {
                  "type": "number"
               },
               "projectHourlyRate": {
                  "$ref": "#/components/schemas/ProjectHourlyRate"
               },
               "employee": {
                  "$ref": "#/components/schemas/Employee"
               },
               "activity": {
                  "$ref": "#/components/schemas/Activity"
               }
            }
         },
         "ProjectParticipant": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "project": {
                  "$ref": "#/components/schemas/Project"
               },
               "employee": {
                  "$ref": "#/components/schemas/Employee"
               },
               "adminAccess": {
                  "type": "boolean"
               }
            }
         },
         "ProjectActivity": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "activity": {
                  "$ref": "#/components/schemas/Activity"
               },
               "project": {
                  "$ref": "#/components/schemas/Project"
               },
               "startDate": {
                  "type": "string"
               },
               "endDate": {
                  "type": "string"
               },
               "isClosed": {
                  "type": "boolean"
               },
               "budgetHours": {
                  "type": "number",
                  "description": "Set budget hours"
               },
               "budgetHourlyRateCurrency": {
                  "type": "number",
                  "description": "Set budget hourly rate"
               },
               "budgetFeeCurrency": {
                  "type": "number",
                  "description": "Set budget fee"
               }
            }
         },
         "CloseGroup": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "date": {
                  "type": "string"
               },
               "postings": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Posting"
                  }
               }
            }
         },
         "BankTransaction": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "postedDate": {
                  "type": "string"
               },
               "description": {
                  "maxLength": 255,
                  "type": "string"
               },
               "amountCurrency": {
                  "type": "number"
               },
               "bankStatement": {
                  "$ref": "#/components/schemas/BankStatement"
               },
               "account": {
                  "$ref": "#/components/schemas/Account"
               },
               "groupedPostings": {
                  "type": "array",
                  "items": {
                     "$ref": "#/components/schemas/BankTransactionPosting"
                  }
               },
               "matchType": {
                  "type": "string",
                  "enum": [
                     "ONE_TRANSACTION_TO_ONE_POSTING",
                     "ONE_TRANSACTION_TO_MANY_POSTINGS",
                     "MANY_TRANSACTIONS_TO_ONE_POSTING",
                     "MANY_TRANSACTIONS_TO_MANY_POSTINGS",
                     "NO_MATCH",
                     "UNKNOWN"
                  ]
               },
               "companyId": {
                  "type": "integer",
                  "format": "int32"
               },
               "matched": {
                  "type": "boolean",
                  "readOnly": true
               },
               "bankReconciliationMatchSum": {
                  "$ref": "#/components/schemas/TlxNumber"
               }
            }
         },
         "BankStatement": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "openingBalanceCurrency": {
                  "type": "number",
                  "description": "Opening balance on the account.",
                  "readOnly": true
               },
               "closingBalanceCurrency": {
                  "type": "number",
                  "description": "Closing balance on the account.",
                  "readOnly": true
               },
               "fileName": {
                  "type": "string",
                  "description": "Bank statement file name.",
                  "readOnly": true
               },
               "bank": {
                  "$ref": "#/components/schemas/Bank"
               },
               "fromDate": {
                  "type": "string",
                  "readOnly": true
               },
               "toDate": {
                  "type": "string",
                  "readOnly": true
               },
               "transactions": {
                  "type": "array",
                  "description": "Bank transactions tied to the bank statement",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/BankTransaction"
                  }
               }
            }
         },
         "BankTransactionPosting": {
            "type": "object",
            "properties": {
               "voucher": {
                  "$ref": "#/components/schemas/Voucher"
               },
               "date": {
                  "type": "string"
               },
               "description": {
                  "type": "string"
               },
               "account": {
                  "$ref": "#/components/schemas/Account"
               },
               "customer": {
                  "$ref": "#/components/schemas/Customer"
               },
               "supplier": {
                  "$ref": "#/components/schemas/Supplier"
               },
               "amount": {
                  "type": "number"
               },
               "amountCurrency": {
                  "type": "number"
               },
               "currency": {
                  "$ref": "#/components/schemas/Currency"
               },
               "invoiceNumber": {
                  "maxLength": 100,
                  "type": "string"
               },
               "postingMatchType": {
                  "type": "string",
                  "enum": [
                     "DEFAULT",
                     "INTERNAL_TRANSFER",
                     "WAGE",
                     "TAX",
                     "VAT"
                  ]
               }
            }
         },
         "BankReconciliation": {
            "required": [
               "account",
               "accountingPeriod",
               "type"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "account": {
                  "$ref": "#/components/schemas/Account"
               },
               "accountingPeriod": {
                  "$ref": "#/components/schemas/AccountingPeriod"
               },
               "voucher": {
                  "$ref": "#/components/schemas/Voucher"
               },
               "transactions": {
                  "type": "array",
                  "description": "Bank transactions tied to the bank reconciliation",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/BankTransaction"
                  }
               },
               "isClosed": {
                  "type": "boolean"
               },
               "type": {
                  "type": "string",
                  "description": "Type of Bank Reconciliation.",
                  "enum": [
                     "MANUAL",
                     "AUTOMATIC"
                  ]
               },
               "bankAccountClosingBalanceCurrency": {
                  "type": "number"
               },
               "closedDate": {
                  "type": "string",
                  "readOnly": true
               },
               "closedByContact": {
                  "$ref": "#/components/schemas/Contact"
               },
               "closedByEmployee": {
                  "$ref": "#/components/schemas/Employee"
               },
               "approvable": {
                  "type": "boolean",
                  "readOnly": true
               },
               "autoPayReconciliation": {
                  "type": "boolean",
                  "readOnly": true
               }
            }
         },
         "ResponseWrapperBankReconciliation": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/BankReconciliation"
               }
            }
         },
         "ListResponseBankReconciliation": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/BankReconciliation"
                  }
               }
            }
         },
         "BankReconciliationPaymentType": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "description": {
                  "maxLength": 255,
                  "type": "string",
                  "description": "Description",
                  "readOnly": true
               },
               "debitAccount": {
                  "$ref": "#/components/schemas/Account"
               },
               "creditAccount": {
                  "$ref": "#/components/schemas/Account"
               },
               "isInactive": {
                  "type": "boolean",
                  "readOnly": true
               }
            }
         },
         "BankReconciliationMatch": {
            "required": [
               "bankReconciliation"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "bankReconciliation": {
                  "$ref": "#/components/schemas/BankReconciliation"
               },
               "type": {
                  "type": "string",
                  "description": "Type of match, MANUAL and APPROVED_SUGGESTION are considered part of reconciliation.",
                  "enum": [
                     "MANUAL",
                     "PENDING_SUGGESTION",
                     "REJECTED_SUGGESTION",
                     "APPROVED_SUGGESTION",
                     "ADJUSTMENT",
                     "AUTO_MATCHED",
                     "REJECTED_AUTO_MATCH"
                  ]
               },
               "transactions": {
                  "type": "array",
                  "description": "Match transactions",
                  "items": {
                     "$ref": "#/components/schemas/BankTransaction"
                  }
               },
               "postings": {
                  "type": "array",
                  "description": "Match postings",
                  "items": {
                     "$ref": "#/components/schemas/Posting"
                  }
               }
            }
         },
         "BankReconciliationAdjustment": {
            "type": "object",
            "properties": {
               "paymentType": {
                  "$ref": "#/components/schemas/BankReconciliationPaymentType"
               },
               "bankTransactions": {
                  "type": "array",
                  "items": {
                     "$ref": "#/components/schemas/BankTransaction"
                  }
               },
               "postingDate": {
                  "type": "string"
               },
               "amount": {
                  "minimum": 0,
                  "type": "number"
               },
               "postings": {
                  "type": "array",
                  "items": {
                     "$ref": "#/components/schemas/Posting"
                  }
               },
               "bankReconciliationMatch": {
                  "$ref": "#/components/schemas/BankReconciliationMatch"
               },
               "date": {
                  "type": "string"
               },
               "description": {
                  "type": "string"
               },
               "interimAccount": {
                  "$ref": "#/components/schemas/Account"
               },
               "voucherNumber": {
                  "type": "string"
               },
               "voucherViewLink": {
                  "type": "string"
               },
               "voucherDetailsLink": {
                  "type": "string"
               }
            }
         },
         "ListResponseBankReconciliationAdjustment": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/BankReconciliationAdjustment"
                  }
               }
            }
         },
         "ResponseWrapperDate": {
            "type": "object",
            "properties": {
               "value": {
                  "type": "string",
                  "format": "date-time"
               }
            }
         },
         "ResponseWrapperBankReconciliationMatch": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/BankReconciliationMatch"
               }
            }
         },
         "ResponseWrapperInteger": {
            "type": "object",
            "properties": {
               "value": {
                  "type": "integer",
                  "format": "int32"
               }
            }
         },
         "ListResponseBankReconciliationMatch": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/BankReconciliationMatch"
                  }
               }
            }
         },
         "BankReconciliationMatchesCounter": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "bankReconciliationId": {
                  "type": "integer",
                  "description": "The reconciliation id for which the number of matches is stored.",
                  "format": "int32"
               },
               "autoMatchedMatches": {
                  "minimum": 0,
                  "type": "integer",
                  "description": "Number of auto-matched matches since last page access.",
                  "format": "int32"
               },
               "suggestedMatches": {
                  "minimum": 0,
                  "type": "integer",
                  "description": "Number of suggested matches since last page access.",
                  "format": "int32"
               }
            }
         },
         "ResponseWrapperBankReconciliationMatchesCounter": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/BankReconciliationMatchesCounter"
               }
            }
         },
         "ResponseWrapperBankReconciliationPaymentType": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/BankReconciliationPaymentType"
               }
            }
         },
         "ListResponseBankReconciliationPaymentType": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/BankReconciliationPaymentType"
                  }
               }
            }
         },
         "BankReconciliationSettings": {
            "required": [
               "numberOfMatchesPerPage"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "numberOfMatchesPerPage": {
                  "type": "string",
                  "description": "The number of matches showed per page in bank reconciliation.",
                  "enum": [
                     "ITEMS_10",
                     "ITEMS_50",
                     "ITEMS_100",
                     "ITEMS_500",
                     "ITEMS_1000",
                     "ITEMS_5000",
                     "ITEMS_10000"
                  ]
               }
            }
         },
         "ResponseWrapperBankReconciliationSettings": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/BankReconciliationSettings"
               }
            }
         },
         "ResponseWrapperBankStatement": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/BankStatement"
               }
            }
         },
         "ListResponseBankStatement": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/BankStatement"
                  }
               }
            }
         },
         "ResponseWrapperBankTransaction": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/BankTransaction"
               }
            }
         },
         "ListResponseBankTransaction": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/BankTransaction"
                  }
               }
            }
         },
         "ResponseWrapperObject": {
            "type": "object",
            "properties": {
               "value": {
                  "type": "object",
                  "properties": {}
               }
            }
         },
         "ApiConsumer": {
            "required": [
               "consumerName",
               "emails"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "consumerName": {
                  "maxLength": 100,
                  "minLength": 5,
                  "type": "string"
               },
               "emails": {
                  "type": "string",
                  "format": "email"
               }
            }
         },
         "ConsumerToken": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "apiConsumer": {
                  "$ref": "#/components/schemas/ApiConsumer"
               },
               "token": {
                  "type": "string"
               },
               "expirationDate": {
                  "type": "string"
               }
            }
         },
         "ResponseWrapperConsumerToken": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/ConsumerToken"
               }
            }
         },
         "EmployeeToken": {
            "required": [
               "token"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "employee": {
                  "$ref": "#/components/schemas/Employee"
               },
               "apiConsumer": {
                  "$ref": "#/components/schemas/ApiConsumer"
               },
               "token": {
                  "type": "string"
               },
               "expirationDate": {
                  "type": "string"
               }
            }
         },
         "ResponseWrapperEmployeeToken": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/EmployeeToken"
               }
            }
         },
         "SessionToken": {
            "required": [
               "expirationDate",
               "token"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "consumerToken": {
                  "$ref": "#/components/schemas/ConsumerToken"
               },
               "employeeToken": {
                  "$ref": "#/components/schemas/EmployeeToken"
               },
               "expirationDate": {
                  "type": "string"
               },
               "token": {
                  "type": "string"
               },
               "encryptionKey": {
                  "type": "string",
                  "readOnly": true
               }
            }
         },
         "ResponseWrapperSessionToken": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/SessionToken"
               }
            }
         },
         "Company": {
            "required": [
               "address",
               "name",
               "type"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "name": {
                  "maxLength": 255,
                  "type": "string"
               },
               "displayName": {
                  "type": "string",
                  "readOnly": true
               },
               "startDate": {
                  "type": "string"
               },
               "endDate": {
                  "type": "string"
               },
               "organizationNumber": {
                  "maxLength": 100,
                  "type": "string"
               },
               "email": {
                  "maxLength": 254,
                  "type": "string",
                  "format": "email"
               },
               "phoneNumber": {
                  "maxLength": 100,
                  "type": "string"
               },
               "phoneNumberMobile": {
                  "maxLength": 100,
                  "type": "string"
               },
               "faxNumber": {
                  "maxLength": 100,
                  "type": "string"
               },
               "address": {
                  "$ref": "#/components/schemas/Address"
               },
               "type": {
                  "type": "string",
                  "enum": [
                     "NONE",
                     "ENK",
                     "AS",
                     "NUF",
                     "ANS",
                     "DA",
                     "PRE",
                     "KS",
                     "ASA",
                     "BBL",
                     "BRL",
                     "GFS",
                     "SPA",
                     "SF",
                     "IKS",
                     "KF_FKF",
                     "FCD",
                     "EOFG",
                     "BA",
                     "STI",
                     "ORG",
                     "ESEK",
                     "SA",
                     "SAM",
                     "BO",
                     "VPFO",
                     "OS",
                     "FLI",
                     "Other"
                  ]
               },
               "currency": {
                  "$ref": "#/components/schemas/Currency"
               },
               "accountantOrSimilar": {
                  "type": "boolean",
                  "readOnly": true
               },
               "companyMigration": {
                  "type": "string",
                  "description": "If the company was migrated from another system, this field will contain the name of the system it was migrated from.",
                  "readOnly": true,
                  "enum": [
                     "NONE",
                     "AGRO"
                  ]
               }
            }
         },
         "LoggedInUserInfoDTO": {
            "type": "object",
            "properties": {
               "employeeId": {
                  "type": "integer",
                  "format": "int32"
               },
               "employee": {
                  "$ref": "#/components/schemas/Employee"
               },
               "companyId": {
                  "type": "integer",
                  "format": "int32"
               },
               "company": {
                  "$ref": "#/components/schemas/Company"
               },
               "language": {
                  "type": "string"
               },
               "loggedInWithConnect": {
                  "type": "boolean"
               }
            }
         },
         "ResponseWrapperLoggedInUserInfoDTO": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/LoggedInUserInfoDTO"
               }
            }
         },
         "Client": {
            "required": [
               "address",
               "name",
               "type"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "name": {
                  "maxLength": 255,
                  "type": "string"
               },
               "displayName": {
                  "type": "string",
                  "readOnly": true
               },
               "startDate": {
                  "type": "string"
               },
               "endDate": {
                  "type": "string"
               },
               "organizationNumber": {
                  "maxLength": 100,
                  "type": "string"
               },
               "email": {
                  "maxLength": 254,
                  "type": "string",
                  "format": "email"
               },
               "phoneNumber": {
                  "maxLength": 100,
                  "type": "string"
               },
               "phoneNumberMobile": {
                  "maxLength": 100,
                  "type": "string"
               },
               "faxNumber": {
                  "maxLength": 100,
                  "type": "string"
               },
               "address": {
                  "$ref": "#/components/schemas/Address"
               },
               "type": {
                  "type": "string",
                  "enum": [
                     "NONE",
                     "ENK",
                     "AS",
                     "NUF",
                     "ANS",
                     "DA",
                     "PRE",
                     "KS",
                     "ASA",
                     "BBL",
                     "BRL",
                     "GFS",
                     "SPA",
                     "SF",
                     "IKS",
                     "KF_FKF",
                     "FCD",
                     "EOFG",
                     "BA",
                     "STI",
                     "ORG",
                     "ESEK",
                     "SA",
                     "SAM",
                     "BO",
                     "VPFO",
                     "OS",
                     "FLI",
                     "Other"
                  ]
               },
               "currency": {
                  "$ref": "#/components/schemas/Currency"
               },
               "accountantOrSimilar": {
                  "type": "boolean",
                  "readOnly": true
               },
               "companyMigration": {
                  "type": "string",
                  "description": "If the company was migrated from another system, this field will contain the name of the system it was migrated from.",
                  "readOnly": true,
                  "enum": [
                     "NONE",
                     "AGRO"
                  ]
               },
               "customerCompanyId": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               }
            }
         },
         "ListResponseClient": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Client"
                  }
               }
            }
         },
         "ResponseWrapperCompany": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/Company"
               }
            }
         },
         "ListResponseCompany": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Company"
                  }
               }
            }
         },
         "AltinnCompanyModule": {
            "required": [
               "altInnId",
               "altInnPassword"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "altInnId": {
                  "type": "integer",
                  "format": "int32"
               },
               "altInnPassword": {
                  "maxLength": 100,
                  "minLength": 1,
                  "type": "string"
               }
            }
         },
         "ResponseWrapperAltinnCompanyModule": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/AltinnCompanyModule"
               }
            }
         },
         "SalesModuleDTO": {
            "required": [
               "name"
            ],
            "type": "object",
            "properties": {
               "name": {
                  "type": "string",
                  "enum": [
                     "MAMUT",
                     "MAMUT_WITH_WAGE",
                     "AGRO_LICENCE",
                     "AGRO_CLIENT",
                     "AGRO_DOCUMENT_CENTER",
                     "AGRO_INVOICE",
                     "AGRO_INVOICE_MIGRATED",
                     "AGRO_WAGE",
                     "NO1TS",
                     "NO1TS_TRAVELREPORT",
                     "NO1TS_ACCOUNTING",
                     "BASIS",
                     "SMART",
                     "PLUSS",
                     "KOMPLETT",
                     "VVS",
                     "ELECTRO",
                     "ACCOUNTING_OFFICE",
                     "SMART_WAGE",
                     "SMART_TIME_TRACKING",
                     "SMART_PROJECT",
                     "OCR",
                     "API_V2",
                     "ELECTRONIC_VOUCHERS",
                     "UP_TO_100_VOUCHERS",
                     "UP_TO_500_VOUCHERS",
                     "UP_TO_1000_VOUCHERS",
                     "UP_TO_2000_VOUCHERS",
                     "UP_TO_3500_VOUCHERS",
                     "UP_TO_5000_VOUCHERS",
                     "UP_TO_10000_VOUCHERS",
                     "UNLIMITED_VOUCHERS",
                     "UP_TO_100_VOUCHERS_AUTOMATION",
                     "UP_TO_500_VOUCHERS_AUTOMATION",
                     "UP_TO_1000_VOUCHERS_AUTOMATION",
                     "UP_TO_2000_VOUCHERS_AUTOMATION",
                     "UP_TO_3500_VOUCHERS_AUTOMATION",
                     "UP_TO_5000_VOUCHERS_AUTOMATION",
                     "UP_TO_10000_VOUCHERS_AUTOMATION",
                     "UNLIMITED_VOUCHERS_AUTOMATION",
                     "LOGISTICS",
                     "MIKRO",
                     "AUTOPLUS_MINI",
                     "AUTOPLUS_MEDIUM",
                     "AUTOPLUS_STOR",
                     "INTEGRATION_PARTNER",
                     "PROJECT",
                     "YEAR_END_REPORTING_ENK",
                     "YEAR_END_REPORTING_AS"
                  ]
               },
               "costStartDate": {
                  "type": "string"
               }
            }
         },
         "ListResponseSalesModuleDTO": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/SalesModuleDTO"
                  }
               }
            }
         },
         "ResponseWrapperSalesModuleDTO": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/SalesModuleDTO"
               }
            }
         },
         "ResponseWrapperContact": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/Contact"
               }
            }
         },
         "ListResponseContact": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Contact"
                  }
               }
            }
         },
         "ResponseWrapperCountry": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/Country"
               }
            }
         },
         "ListResponseCountry": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Country"
                  }
               }
            }
         },
         "ResponseWrapperCurrency": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/Currency"
               }
            }
         },
         "ListResponseCurrency": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Currency"
                  }
               }
            }
         },
         "CurrencyExchangeRate": {
            "required": [
               "sourceCurrency",
               "targetCurrency"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "targetCurrency": {
                  "$ref": "#/components/schemas/Currency"
               },
               "sourceCurrency": {
                  "$ref": "#/components/schemas/Currency"
               },
               "rate": {
                  "minimum": 0,
                  "type": "number"
               },
               "source": {
                  "type": "string",
                  "description": "Source of exchange rates, i.e Norges Bank",
                  "enum": [
                     "NORGES_BANK",
                     "HALLONEN"
                  ]
               },
               "date": {
                  "type": "string"
               }
            }
         },
         "ResponseWrapperCurrencyExchangeRate": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/CurrencyExchangeRate"
               }
            }
         },
         "ResponseWrapperCustomer": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/Customer"
               }
            }
         },
         "ListResponseCustomer": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Customer"
                  }
               }
            }
         },
         "ResponseWrapperCustomerCategory": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/CustomerCategory"
               }
            }
         },
         "ListResponseCustomerCategory": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/CustomerCategory"
                  }
               }
            }
         },
         "ResponseWrapperDepartment": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/Department"
               }
            }
         },
         "ListResponseDepartment": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Department"
                  }
               }
            }
         },
         "ResponseWrapperDivision": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/Division"
               }
            }
         },
         "ListResponseDivision": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Division"
                  }
               }
            }
         },
         "ResponseWrapperDocument": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/Document"
               }
            }
         },
         "DocumentArchive": {
            "required": [
               "fileName",
               "mimeType"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "fileName": {
                  "maxLength": 255,
                  "type": "string",
                  "description": "The name of the document."
               },
               "size": {
                  "minimum": 0,
                  "type": "integer",
                  "description": "The size of the document in readable format.",
                  "format": "int32",
                  "readOnly": true
               },
               "archiveDate": {
                  "type": "string"
               },
               "mimeType": {
                  "maxLength": 100,
                  "type": "string",
                  "description": "Type of the document"
               }
            }
         },
         "ResponseWrapperDocumentArchive": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/DocumentArchive"
               }
            }
         },
         "ListResponseDocumentArchive": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/DocumentArchive"
                  }
               }
            }
         },
         "ResponseWrapperEmployee": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/Employee"
               }
            }
         },
         "ListResponseEmployee": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Employee"
                  }
               }
            }
         },
         "ResponseWrapperEmployeeCategory": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/EmployeeCategory"
               }
            }
         },
         "ListResponseEmployeeCategory": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/EmployeeCategory"
                  }
               }
            }
         },
         "ResponseWrapperEmployment": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/Employment"
               }
            }
         },
         "ListResponseEmployment": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Employment"
                  }
               }
            }
         },
         "ResponseWrapperEmploymentDetails": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/EmploymentDetails"
               }
            }
         },
         "ListResponseEmploymentDetails": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/EmploymentDetails"
                  }
               }
            }
         },
         "EmploymentType": {
            "required": [
               "employmentType"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "employmentType": {
                  "type": "string",
                  "description": "Defines the employment type option. ",
                  "enum": [
                     "ORDINARY",
                     "MARITIME",
                     "FREELANCE",
                     "NOT_CHOSEN"
                  ]
               },
               "nameNO": {
                  "type": "string"
               },
               "code": {
                  "type": "string"
               }
            }
         },
         "ListResponseEmploymentType": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/EmploymentType"
                  }
               }
            }
         },
         "LeaveOfAbsence": {
            "required": [
               "percentage",
               "startDate"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "employment": {
                  "$ref": "#/components/schemas/Employment"
               },
               "importedLeaveOfAbsenceId": {
                  "maxLength": 255,
                  "type": "string",
                  "description": "Existing leave of absence ID used by the current accounting system"
               },
               "startDate": {
                  "type": "string"
               },
               "endDate": {
                  "type": "string"
               },
               "percentage": {
                  "type": "number"
               },
               "isWageDeduction": {
                  "type": "boolean"
               },
               "type": {
                  "type": "string",
                  "description": "Define the leave of absence type.",
                  "enum": [
                     "LEAVE_OF_ABSENCE",
                     "FURLOUGH",
                     "PARENTAL_BENEFITS",
                     "MILITARY_SERVICE",
                     "EDUCATIONAL",
                     "COMPASSIONATE",
                     "OTHER_NOT_STATUTORILY_REQUIRED",
                     "OTHER_STATUTORILY_REQUIRED",
                     "EDUCATIONAL_NOT_STATUTORILY_REQUIRED",
                     "EDUCATIONAL_STATUTORILY_REQUIRED"
                  ]
               }
            }
         },
         "ResponseWrapperLeaveOfAbsence": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/LeaveOfAbsence"
               }
            }
         },
         "ListResponseLeaveOfAbsence": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/LeaveOfAbsence"
                  }
               }
            }
         },
         "LeaveOfAbsenceType": {
            "required": [
               "leaveOfAbsenceType"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "leaveOfAbsenceType": {
                  "type": "string",
                  "description": "Defines the leave of absence type option.",
                  "enum": [
                     "LEAVE_OF_ABSENCE",
                     "FURLOUGH",
                     "PARENTAL_BENEFITS",
                     "MILITARY_SERVICE",
                     "EDUCATIONAL",
                     "COMPASSIONATE",
                     "OTHER_NOT_STATUTORILY_REQUIRED",
                     "OTHER_STATUTORILY_REQUIRED",
                     "EDUCATIONAL_NOT_STATUTORILY_REQUIRED",
                     "EDUCATIONAL_STATUTORILY_REQUIRED"
                  ]
               },
               "nameNO": {
                  "type": "string"
               },
               "code": {
                  "type": "string"
               }
            }
         },
         "ListResponseLeaveOfAbsenceType": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/LeaveOfAbsenceType"
                  }
               }
            }
         },
         "ResponseWrapperOccupationCode": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/OccupationCode"
               }
            }
         },
         "ListResponseOccupationCode": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/OccupationCode"
                  }
               }
            }
         },
         "RemunerationType": {
            "required": [
               "remunerationType"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "remunerationType": {
                  "type": "string",
                  "description": "Defines the remuneration type option. ",
                  "enum": [
                     "MONTHLY_WAGE",
                     "HOURLY_WAGE",
                     "COMMISION_PERCENTAGE",
                     "FEE",
                     "NOT_CHOSEN",
                     "PIECEWORK_WAGE"
                  ]
               },
               "nameNO": {
                  "type": "string"
               },
               "code": {
                  "type": "string"
               }
            }
         },
         "ListResponseRemunerationType": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/RemunerationType"
                  }
               }
            }
         },
         "WorkingHoursScheme": {
            "required": [
               "workingHoursScheme"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "workingHoursScheme": {
                  "type": "string",
                  "description": "Defines the working hours scheme option.",
                  "enum": [
                     "NOT_SHIFT",
                     "ROUND_THE_CLOCK",
                     "SHIFT_365",
                     "OFFSHORE_336",
                     "CONTINUOUS",
                     "OTHER_SHIFT",
                     "NOT_CHOSEN"
                  ]
               },
               "nameNO": {
                  "type": "string"
               },
               "code": {
                  "type": "string"
               }
            }
         },
         "ListResponseWorkingHoursScheme": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/WorkingHoursScheme"
                  }
               }
            }
         },
         "HourlyCostAndRate": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "employee": {
                  "$ref": "#/components/schemas/Employee"
               },
               "date": {
                  "type": "string"
               },
               "rate": {
                  "type": "number"
               },
               "budgetRate": {
                  "type": "number"
               },
               "hourCostRate": {
                  "type": "number"
               }
            }
         },
         "ResponseWrapperHourlyCostAndRate": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/HourlyCostAndRate"
               }
            }
         },
         "ListResponseHourlyCostAndRate": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/HourlyCostAndRate"
                  }
               }
            }
         },
         "SalesForceCountry": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "name": {
                  "type": "string",
                  "readOnly": true
               },
               "isoAlpha2Code": {
                  "type": "string",
                  "readOnly": true
               },
               "isoAlpha3Code": {
                  "type": "string",
                  "readOnly": true
               },
               "isoNumericCode": {
                  "type": "string",
                  "readOnly": true
               }
            }
         },
         "SalesForceAddress": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "addressLine1": {
                  "maxLength": 255,
                  "type": "string",
                  "readOnly": true
               },
               "addressLine2": {
                  "maxLength": 255,
                  "type": "string",
                  "readOnly": true
               },
               "postalCode": {
                  "maxLength": 100,
                  "type": "string",
                  "readOnly": true
               },
               "city": {
                  "maxLength": 100,
                  "type": "string",
                  "readOnly": true
               },
               "country": {
                  "$ref": "#/components/schemas/SalesForceCountry"
               }
            }
         },
         "SalesForceEmployee": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "firstName": {
                  "maxLength": 100,
                  "type": "string",
                  "readOnly": true
               },
               "lastName": {
                  "maxLength": 100,
                  "type": "string",
                  "readOnly": true
               },
               "email": {
                  "maxLength": 100,
                  "type": "string",
                  "readOnly": true
               },
               "phoneNumberMobile": {
                  "maxLength": 100,
                  "type": "string",
                  "readOnly": true
               },
               "phoneNumberHome": {
                  "maxLength": 100,
                  "type": "string",
                  "readOnly": true
               },
               "phoneNumberWork": {
                  "maxLength": 100,
                  "type": "string",
                  "readOnly": true
               },
               "userId": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "companyId": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "customerId": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "phoneNumberSmsCertified": {
                  "type": "string",
                  "readOnly": true
               },
               "isUserAdministrator": {
                  "type": "boolean",
                  "readOnly": true
               },
               "isAccountAdministrator": {
                  "type": "boolean",
                  "readOnly": true
               },
               "allowLogin": {
                  "type": "boolean",
                  "readOnly": true
               },
               "isExternal": {
                  "type": "boolean",
                  "readOnly": true
               },
               "isTripletexCertified": {
                  "type": "boolean",
                  "readOnly": true
               },
               "isDefaultLogin": {
                  "type": "boolean",
                  "readOnly": true
               },
               "loginEndDate": {
                  "type": "string",
                  "description": "Login end date",
                  "readOnly": true
               },
               "address": {
                  "$ref": "#/components/schemas/SalesForceAddress"
               },
               "isMarketingConsent": {
                  "type": "boolean",
                  "readOnly": true
               },
               "isAppUser": {
                  "type": "boolean",
                  "readOnly": true
               }
            }
         },
         "EmployeeLoginInfo": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "employeeId": {
                  "type": "integer",
                  "description": "Employee id",
                  "format": "int32",
                  "readOnly": true
               },
               "username": {
                  "maxLength": 255,
                  "type": "string",
                  "description": "Employee username",
                  "readOnly": true
               },
               "lastLoginDate": {
                  "type": "string",
                  "description": "Last successful employee login datetime",
                  "readOnly": true
               },
               "salesForceEmployee": {
                  "$ref": "#/components/schemas/SalesForceEmployee"
               }
            }
         },
         "ResponseWrapperEmployeeLoginInfo": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/EmployeeLoginInfo"
               }
            }
         },
         "NextOfKin": {
            "required": [
               "name",
               "phoneNumber"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "employee": {
                  "$ref": "#/components/schemas/Employee"
               },
               "name": {
                  "maxLength": 255,
                  "type": "string"
               },
               "phoneNumber": {
                  "maxLength": 20,
                  "type": "string"
               },
               "address": {
                  "maxLength": 255,
                  "type": "string"
               },
               "typeOfRelationship": {
                  "type": "string",
                  "description": "Define the employee's next of kin relationtype.<br>SPOUSE<br>PARTNER<br>PARENT<br>CHILD<br>SIBLING",
                  "enum": [
                     "SPOUSE",
                     "PARTNER",
                     "PARENT",
                     "CHILD",
                     "SIBLING"
                  ]
               }
            }
         },
         "ResponseWrapperNextOfKin": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/NextOfKin"
               }
            }
         },
         "ListResponseNextOfKin": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/NextOfKin"
                  }
               }
            }
         },
         "EmployeePreferences": {
            "required": [
               "id"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "employeeId": {
                  "type": "integer",
                  "format": "int32"
               },
               "companyId": {
                  "type": "integer",
                  "format": "int32"
               },
               "filterOnProjectParticipant": {
                  "type": "boolean"
               },
               "filterOnProjectManager": {
                  "type": "boolean"
               },
               "language": {
                  "type": "string",
                  "enum": [
                     "NO",
                     "EN"
                  ]
               }
            }
         },
         "ResponseWrapperEmployeePreferences": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/EmployeePreferences"
               }
            }
         },
         "ListResponseEmployeePreferences": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/EmployeePreferences"
                  }
               }
            }
         },
         "StandardTime": {
            "required": [
               "fromDate",
               "hoursPerDay"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "employee": {
                  "$ref": "#/components/schemas/Employee"
               },
               "fromDate": {
                  "type": "string"
               },
               "hoursPerDay": {
                  "type": "number"
               }
            }
         },
         "ResponseWrapperStandardTime": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/StandardTime"
               }
            }
         },
         "ListResponseStandardTime": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/StandardTime"
                  }
               }
            }
         },
         "Entitlement": {
            "required": [
               "customer",
               "employee",
               "entitlementId"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "employee": {
                  "$ref": "#/components/schemas/Employee"
               },
               "name": {
                  "type": "string",
                  "description": "Descriptive name for the privilege. Might change between releases.",
                  "readOnly": true
               },
               "entitlementId": {
                  "type": "integer",
                  "description": "Unique id for the type of privilege.",
                  "format": "int32"
               },
               "customer": {
                  "$ref": "#/components/schemas/Company"
               }
            }
         },
         "ResponseWrapperEntitlement": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/Entitlement"
               }
            }
         },
         "ListResponseEntitlement": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Entitlement"
                  }
               }
            }
         },
         "EventInfoDescription": {
            "type": "object",
            "properties": {
               "description": {
                  "type": "string"
               },
               "payloadModel": {
                  "type": "string"
               }
            }
         },
         "ResponseWrapperMapStringEventInfoDescription": {
            "type": "object",
            "properties": {
               "value": {
                  "type": "object",
                  "additionalProperties": {
                     "$ref": "#/components/schemas/EventInfoDescription"
                  }
               }
            }
         },
         "WebHookWrapper": {
            "type": "object",
            "properties": {
               "value": {
                  "type": "object",
                  "properties": {}
               },
               "event": {
                  "type": "string"
               },
               "subscriptionId": {
                  "type": "integer",
                  "format": "int32"
               },
               "id": {
                  "type": "integer",
                  "format": "int32"
               }
            }
         },
         "EventInfoDTO": {
            "type": "object",
            "properties": {
               "name": {
                  "type": "string"
               },
               "description": {
                  "type": "string"
               },
               "payloadModel": {
                  "type": "string"
               },
               "examples": {
                  "type": "array",
                  "items": {
                     "$ref": "#/components/schemas/WebHookWrapper"
                  }
               }
            }
         },
         "ResponseWrapperEventInfoDTO": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/EventInfoDTO"
               }
            }
         },
         "Subscription": {
            "required": [
               "event",
               "targetUrl"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "event": {
                  "maxLength": 255,
                  "minLength": 1,
                  "type": "string",
                  "description": "Event name (from /v2/event) you wish to subscribe to. Form should be: *subject.verb*.",
                  "example": "customer.create"
               },
               "targetUrl": {
                  "minLength": 1,
                  "type": "string",
                  "description": "The callback URL used for subscriptions (including authentication tokens). Must be absolute and use HTTPS. Basic authentication is supported.",
                  "example": "https://username:password@myintegration.example/tripletexCallback"
               },
               "fields": {
                  "maxLength": 255,
                  "type": "string",
                  "description": "The fields in the object delivered with the notification callback, nested as in other API calls.",
                  "example": "id,version,number"
               },
               "status": {
                  "type": "string",
                  "description": "The status of the subscription.",
                  "enum": [
                     "ACTIVE",
                     "DISABLED",
                     "DISABLED_TOO_MANY_ERRORS",
                     "DISABLED_RATE_LIMIT_EXCEEDED",
                     "DISABLED_MISUSE"
                  ]
               },
               "authHeaderName": {
                  "maxLength": 255,
                  "type": "string",
                  "description": "Custom authentication header name",
                  "example": "Authorization"
               },
               "authHeaderValue": {
                  "maxLength": 4096,
                  "type": "string",
                  "description": "Custom authentication header value (write only)",
                  "example": "Basic dXNlcm5hbWU6cGFzc3dvcmQ="
               }
            }
         },
         "ResponseWrapperSubscription": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/Subscription"
               }
            }
         },
         "ListResponseSubscription": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Subscription"
                  }
               }
            }
         },
         "ResponseWrapperInventory": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/Inventory"
               }
            }
         },
         "ListResponseInventory": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Inventory"
                  }
               }
            }
         },
         "Stock": {
            "type": "object",
            "properties": {
               "inventory": {
                  "maxLength": 255,
                  "type": "string",
                  "readOnly": true
               },
               "inventoryId": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "openingStock": {
                  "type": "number",
                  "readOnly": true
               },
               "changesInPeriod": {
                  "type": "number",
                  "readOnly": true
               },
               "closingStock": {
                  "type": "number",
                  "readOnly": true
               }
            }
         },
         "Inventories": {
            "type": "object",
            "properties": {
               "product": {
                  "$ref": "#/components/schemas/Product"
               },
               "stock": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Stock"
                  }
               }
            }
         },
         "ListResponseInventories": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Inventories"
                  }
               }
            }
         },
         "ResponseWrapperInventoryLocation": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/InventoryLocation"
               }
            }
         },
         "ListResponseInventoryLocation": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/InventoryLocation"
                  }
               }
            }
         },
         "Stocktaking": {
            "required": [
               "date",
               "inventory"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "number": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "date": {
                  "type": "string"
               },
               "comment": {
                  "type": "string"
               },
               "typeOfStocktaking": {
                  "type": "string",
                  "description": "[Deprecated] Define the type of stoctaking.<br>ALL_PRODUCTS_WITH_INVENTORIES: Create a stocktaking for all products with inventories.<br>INCLUDE_PRODUCTS: Create a stocktaking which includes all products.<br>NO_PRODUCTS: Create a stocktaking without products.<br>If not specified, the value 'ALL_PRODUCTS_WITH_INVENTORIES' is used.",
                  "enum": [
                     "ALL_PRODUCTS_WITH_INVENTORIES",
                     "INCLUDE_PRODUCTS",
                     "NO_PRODUCTS"
                  ]
               },
               "inventory": {
                  "$ref": "#/components/schemas/Inventory"
               },
               "isCompleted": {
                  "type": "boolean"
               }
            }
         },
         "ResponseWrapperStocktaking": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/Stocktaking"
               }
            }
         },
         "ListResponseStocktaking": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Stocktaking"
                  }
               }
            }
         },
         "ProductLine": {
            "required": [
               "product",
               "stocktaking"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "stocktaking": {
                  "$ref": "#/components/schemas/Stocktaking"
               },
               "product": {
                  "$ref": "#/components/schemas/Product"
               },
               "count": {
                  "type": "number"
               },
               "unitCostCurrency": {
                  "type": "number",
                  "description": "Unit price purchase (cost) excluding VAT in the order's currency"
               },
               "costCurrency": {
                  "type": "number",
                  "readOnly": true
               },
               "comment": {
                  "type": "string"
               },
               "counted": {
                  "type": "boolean",
                  "description": "If a line is counted or not - only for internal use; will return true/false based on whether the stocktaking is completed otherwise.",
                  "readOnly": true
               },
               "counter": {
                  "$ref": "#/components/schemas/Employee"
               },
               "dateCounted": {
                  "type": "string",
                  "description": "When the line was counted - only for internal use",
                  "format": "date-time",
                  "readOnly": true
               },
               "expectedStock": {
                  "type": "number",
                  "description": "For internal use only",
                  "readOnly": true
               },
               "location": {
                  "$ref": "#/components/schemas/InventoryLocation"
               }
            }
         },
         "ResponseWrapperProductLine": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/ProductLine"
               }
            }
         },
         "ListResponseProductLine": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/ProductLine"
                  }
               }
            }
         },
         "ResponseWrapperInvoice": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/Invoice"
               }
            }
         },
         "ListResponseInvoice": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Invoice"
                  }
               }
            }
         },
         "ResponseWrapperInvoiceRemark": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/InvoiceRemark"
               }
            }
         },
         "PaymentType": {
            "required": [
               "description",
               "displayName"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "description": {
                  "maxLength": 255,
                  "type": "string"
               },
               "displayName": {
                  "type": "string"
               },
               "debitAccount": {
                  "$ref": "#/components/schemas/Account"
               },
               "creditAccount": {
                  "$ref": "#/components/schemas/Account"
               },
               "vatType": {
                  "$ref": "#/components/schemas/VatType"
               },
               "customer": {
                  "$ref": "#/components/schemas/Customer"
               },
               "supplier": {
                  "$ref": "#/components/schemas/Supplier"
               }
            }
         },
         "ResponseWrapperPaymentType": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/PaymentType"
               }
            }
         },
         "ListResponsePaymentType": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/PaymentType"
                  }
               }
            }
         },
         "ResponseWrapperProjectInvoiceDetails": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/ProjectInvoiceDetails"
               }
            }
         },
         "ListResponseProjectInvoiceDetails": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/ProjectInvoiceDetails"
                  }
               }
            }
         },
         "LedgerAccount": {
            "type": "object",
            "properties": {
               "account": {
                  "$ref": "#/components/schemas/Account"
               },
               "sumAmount": {
                  "type": "number",
                  "readOnly": true
               },
               "currency": {
                  "$ref": "#/components/schemas/Currency"
               },
               "sumAmountCurrency": {
                  "type": "number",
                  "readOnly": true
               },
               "openingBalance": {
                  "type": "number",
                  "readOnly": true
               },
               "openingBalanceCurrency": {
                  "type": "number",
                  "readOnly": true
               },
               "closingBalance": {
                  "type": "number",
                  "readOnly": true
               },
               "closingBalanceCurrency": {
                  "type": "number",
                  "readOnly": true
               },
               "postings": {
                  "type": "array",
                  "description": "Link to postings on this account.",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Posting"
                  }
               }
            }
         },
         "ListResponseLedgerAccount": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/LedgerAccount"
                  }
               }
            }
         },
         "ResponseWrapperAccount": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/Account"
               }
            }
         },
         "ListResponseAccount": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Account"
                  }
               }
            }
         },
         "ResponseWrapperAccountingPeriod": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/AccountingPeriod"
               }
            }
         },
         "ListResponseAccountingPeriod": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/AccountingPeriod"
                  }
               }
            }
         },
         "AnnualAccount": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "year": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "start": {
                  "type": "string",
                  "readOnly": true
               },
               "end": {
                  "type": "string",
                  "readOnly": true
               }
            }
         },
         "ResponseWrapperAnnualAccount": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/AnnualAccount"
               }
            }
         },
         "ListResponseAnnualAccount": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/AnnualAccount"
                  }
               }
            }
         },
         "ResponseWrapperCloseGroup": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/CloseGroup"
               }
            }
         },
         "ListResponseCloseGroup": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/CloseGroup"
                  }
               }
            }
         },
         "PaymentTypeOut": {
            "required": [
               "creditAccount",
               "description"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "description": {
                  "maxLength": 255,
                  "type": "string"
               },
               "isBruttoWageDeduction": {
                  "type": "boolean",
                  "description": "true if it should be a deduction from the wage. The module PROVISIONSALARY is required to both view and change this setting"
               },
               "creditAccount": {
                  "$ref": "#/components/schemas/Account"
               },
               "showIncomingInvoice": {
                  "type": "boolean",
                  "description": "true if the payment type should be available in supplier invoices"
               },
               "showWagePayment": {
                  "type": "boolean",
                  "description": "true if the payment type should be available in wage payments. The wage module is required to both view and change this setting"
               },
               "showVatReturns": {
                  "type": "boolean",
                  "description": "true if the payment type should be available in vat returns"
               },
               "showWagePeriodTransaction": {
                  "type": "boolean",
                  "description": "true if the payment type should be available in period transactionsThe wage module is required to both view and change this setting"
               },
               "requiresSeparateVoucher": {
                  "type": "boolean",
                  "description": "true if a separate voucher is required"
               },
               "sequence": {
                  "type": "integer",
                  "description": "determines in which order the types should be listed. No 1 is listed first",
                  "format": "int32"
               },
               "isInactive": {
                  "type": "boolean",
                  "description": "true if the payment type should be hidden from available payment types"
               }
            }
         },
         "ResponseWrapperPaymentTypeOut": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/PaymentTypeOut"
               }
            }
         },
         "ListResponsePaymentTypeOut": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/PaymentTypeOut"
                  }
               }
            }
         },
         "ResponseWrapperPosting": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/Posting"
               }
            }
         },
         "ListResponsePosting": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Posting"
                  }
               }
            }
         },
         "ResponseWrapperVatType": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/VatType"
               }
            }
         },
         "ListResponseVatType": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/VatType"
                  }
               }
            }
         },
         "ResponseWrapperVoucher": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/Voucher"
               }
            }
         },
         "OpeningBalanceBalancePosting": {
            "required": [
               "account",
               "amount"
            ],
            "type": "object",
            "properties": {
               "account": {
                  "$ref": "#/components/schemas/Account"
               },
               "project": {
                  "$ref": "#/components/schemas/Project"
               },
               "department": {
                  "$ref": "#/components/schemas/Department"
               },
               "product": {
                  "$ref": "#/components/schemas/Product"
               },
               "employee": {
                  "$ref": "#/components/schemas/Employee"
               },
               "amount": {
                  "type": "number"
               },
               "amountCurrency": {
                  "type": "number",
                  "description": "Only relevant for accounts in a different currency than the company currency, e.g an EUR account in a Norwegian company.  If provided on other accounts, it must always equal 'amount'"
               }
            }
         },
         "OpeningBalanceCustomerPosting": {
            "required": [
               "amount",
               "customer"
            ],
            "type": "object",
            "properties": {
               "customer": {
                  "$ref": "#/components/schemas/Customer"
               },
               "amount": {
                  "type": "number"
               },
               "description": {
                  "type": "string"
               }
            }
         },
         "OpeningBalanceSupplierPosting": {
            "required": [
               "amount",
               "supplier"
            ],
            "type": "object",
            "properties": {
               "supplier": {
                  "$ref": "#/components/schemas/Supplier"
               },
               "amount": {
                  "type": "number"
               },
               "description": {
                  "type": "string"
               }
            }
         },
         "OpeningBalanceEmployeePosting": {
            "required": [
               "amount",
               "employee"
            ],
            "type": "object",
            "properties": {
               "employee": {
                  "$ref": "#/components/schemas/Employee"
               },
               "amount": {
                  "type": "number"
               },
               "description": {
                  "type": "string"
               }
            }
         },
         "OpeningBalance": {
            "required": [
               "voucherDate"
            ],
            "type": "object",
            "properties": {
               "voucherDate": {
                  "type": "string",
                  "description": "The date for the opening balance"
               },
               "balancePostings": {
                  "type": "array",
                  "description": "Balance postings",
                  "items": {
                     "$ref": "#/components/schemas/OpeningBalanceBalancePosting"
                  }
               },
               "customerPostings": {
                  "type": "array",
                  "description": "Postings in the customer sub ledger",
                  "items": {
                     "$ref": "#/components/schemas/OpeningBalanceCustomerPosting"
                  }
               },
               "supplierPostings": {
                  "type": "array",
                  "description": "Postings in the supplier sub ledger",
                  "items": {
                     "$ref": "#/components/schemas/OpeningBalanceSupplierPosting"
                  }
               },
               "employeePostings": {
                  "type": "array",
                  "description": "Postings in the employee sub ledger",
                  "items": {
                     "$ref": "#/components/schemas/OpeningBalanceEmployeePosting"
                  }
               }
            }
         },
         "VoucherSearchResponse": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Voucher"
                  }
               },
               "totalNumberOfPostings": {
                  "type": "integer",
                  "description": "[DEPRECATED] Number of postings returned (if postings are returned)",
                  "format": "int32",
                  "readOnly": true
               }
            }
         },
         "Delete": {
            "type": "object",
            "properties": {
               "available": {
                  "type": "boolean",
                  "description": "Is the delete operation available for this Voucher?",
                  "readOnly": true
               },
               "reasons": {
                  "type": "array",
                  "description": "If the delete operation is not available then this is a list of reasons why. Otherwise the list will be empty",
                  "readOnly": true,
                  "items": {
                     "type": "string"
                  }
               }
            }
         },
         "VoucherOptions": {
            "type": "object",
            "properties": {
               "delete": {
                  "$ref": "#/components/schemas/Delete"
               }
            }
         },
         "ResponseWrapperVoucherOptions": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/VoucherOptions"
               }
            }
         },
         "ListResponseVoucher": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Voucher"
                  }
               }
            }
         },
         "HistoricalPosting": {
            "required": [
               "account",
               "amount",
               "amountCurrency",
               "amountGross",
               "amountGrossCurrency",
               "amountVat",
               "currency",
               "date"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "voucher": {
                  "$ref": "#/components/schemas/Voucher"
               },
               "date": {
                  "type": "string",
                  "description": "The posting date."
               },
               "description": {
                  "type": "string",
                  "description": "The description of the posting."
               },
               "account": {
                  "$ref": "#/components/schemas/Account"
               },
               "customer": {
                  "$ref": "#/components/schemas/Customer"
               },
               "supplier": {
                  "$ref": "#/components/schemas/Supplier"
               },
               "employee": {
                  "$ref": "#/components/schemas/Employee"
               },
               "project": {
                  "$ref": "#/components/schemas/Project"
               },
               "product": {
                  "$ref": "#/components/schemas/Product"
               },
               "department": {
                  "$ref": "#/components/schemas/Department"
               },
               "vatType": {
                  "$ref": "#/components/schemas/VatType"
               },
               "amount": {
                  "type": "number",
                  "description": "The posting amount in company currency. Important: The amounts in this amount field must have sum = 0 on all the dates. If multiple postings with different dates, then the sum must be 0 on each of the dates."
               },
               "amountCurrency": {
                  "type": "number",
                  "description": "The posting amount in posting currency."
               },
               "amountGross": {
                  "type": "number",
                  "description": "The posting gross amount in company currency."
               },
               "amountGrossCurrency": {
                  "type": "number",
                  "description": "The posting gross amount in posting currency."
               },
               "amountVat": {
                  "type": "number",
                  "description": "The amount of vat on this posting in company currency (NOK)."
               },
               "currency": {
                  "$ref": "#/components/schemas/Currency"
               },
               "invoiceNumber": {
                  "maxLength": 100,
                  "type": "string",
                  "description": "Invoice number."
               },
               "termOfPayment": {
                  "type": "string",
                  "description": "Due date."
               },
               "closeGroup": {
                  "type": "string",
                  "description": "Optional. Used to create a close group for postings."
               }
            }
         },
         "HistoricalVoucher": {
            "required": [
               "date",
               "description",
               "externalVoucherNumber",
               "postings"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "date": {
                  "type": "string",
                  "description": "The voucher date."
               },
               "externalVoucherNumber": {
                  "type": "string",
                  "description": "External voucher number. This is the voucher number in the historical system."
               },
               "number": {
                  "minimum": 0,
                  "type": "integer",
                  "description": "The voucher number generated by Tripletex. System generated number that cannot be changed.",
                  "format": "int32",
                  "readOnly": true
               },
               "year": {
                  "minimum": 0,
                  "type": "integer",
                  "description": "Voucher year. System generated number that cannot be changed.",
                  "format": "int32",
                  "readOnly": true
               },
               "description": {
                  "type": "string",
                  "description": "The voucher description."
               },
               "voucherType": {
                  "$ref": "#/components/schemas/VoucherType"
               },
               "postings": {
                  "type": "array",
                  "description": "The list of postings of the voucher. In postings, these fields must be provided: date, account, currency, amount, amountBasis, amountVat, amountCurrency, amountBasisCurrency.",
                  "items": {
                     "$ref": "#/components/schemas/HistoricalPosting"
                  }
               }
            }
         },
         "ListResponseHistoricalVoucher": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/HistoricalVoucher"
                  }
               }
            }
         },
         "ResponseWrapperVoucherType": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/VoucherType"
               }
            }
         },
         "ListResponseVoucherType": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/VoucherType"
                  }
               }
            }
         },
         "ListResponseMunicipality": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Municipality"
                  }
               }
            }
         },
         "MySubscriptionModuleDTO": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "category": {
                  "type": "string"
               },
               "title": {
                  "type": "string"
               },
               "shortDescription": {
                  "type": "string"
               },
               "descriptionPart1": {
                  "type": "string"
               },
               "descriptionPart2": {
                  "type": "string"
               },
               "perUsePrice": {
                  "$ref": "#/components/schemas/TlxNumber"
               },
               "perUserPrice": {
                  "$ref": "#/components/schemas/TlxNumber"
               },
               "monthlyPrice": {
                  "$ref": "#/components/schemas/TlxNumber"
               },
               "yearlyPrice": {
                  "$ref": "#/components/schemas/TlxNumber"
               },
               "startUpPrice": {
                  "$ref": "#/components/schemas/TlxNumber"
               },
               "perUserOverLimitPrice": {
                  "$ref": "#/components/schemas/TlxNumber"
               },
               "priceDescription": {
                  "type": "string"
               },
               "active": {
                  "type": "boolean"
               },
               "available": {
                  "type": "boolean"
               },
               "processing": {
                  "type": "boolean"
               },
               "infoText": {
                  "type": "string"
               },
               "agreementTitle": {
                  "type": "string"
               },
               "agreementText": {
                  "type": "string"
               },
               "unavailableText": {
                  "type": "string"
               },
               "licenseUrl": {
                  "type": "string"
               },
               "licenseText": {
                  "type": "string"
               },
               "redirectUrl": {
                  "type": "string"
               },
               "priceLine1Text": {
                  "type": "string"
               },
               "priceLine2Text": {
                  "type": "string"
               },
               "priceLine3Text": {
                  "type": "string"
               },
               "price1": {
                  "$ref": "#/components/schemas/TlxNumber"
               },
               "price2": {
                  "$ref": "#/components/schemas/TlxNumber"
               },
               "price3": {
                  "$ref": "#/components/schemas/TlxNumber"
               },
               "canDeactivate": {
                  "type": "boolean"
               },
               "deactivationError": {
                  "type": "string"
               }
            }
         },
         "ResponseWrapperOrder": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/Order"
               }
            }
         },
         "ListResponseOrder": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Order"
                  }
               }
            }
         },
         "ResponseWrapperOrderGroup": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/OrderGroup"
               }
            }
         },
         "ListResponseOrderGroup": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/OrderGroup"
                  }
               }
            }
         },
         "ResponseWrapperOrderLine": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/OrderLine"
               }
            }
         },
         "ListResponseOrderLine": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/OrderLine"
                  }
               }
            }
         },
         "ExternalProduct": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "name": {
                  "maxLength": 255,
                  "type": "string"
               },
               "elNumber": {
                  "maxLength": 14,
                  "type": "string"
               },
               "nrfNumber": {
                  "maxLength": 14,
                  "type": "string"
               },
               "costExcludingVatCurrency": {
                  "type": "number",
                  "description": "Price purchase (cost) excluding VAT in the product's currency",
                  "readOnly": true
               },
               "priceExcludingVatCurrency": {
                  "type": "number",
                  "description": "Price of purchase excluding VAT in the product's currency"
               },
               "priceIncludingVatCurrency": {
                  "type": "number",
                  "description": "Price of purchase including VAT in the product's currency"
               },
               "isInactive": {
                  "type": "boolean"
               },
               "productUnit": {
                  "$ref": "#/components/schemas/ProductUnit"
               },
               "isStockItem": {
                  "type": "boolean"
               },
               "vatType": {
                  "$ref": "#/components/schemas/VatType"
               },
               "currency": {
                  "$ref": "#/components/schemas/Currency"
               },
               "department": {
                  "$ref": "#/components/schemas/Department"
               },
               "account": {
                  "$ref": "#/components/schemas/Account"
               },
               "discountPrice": {
                  "type": "number",
                  "readOnly": true
               }
            }
         },
         "ResponseWrapperExternalProduct": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/ExternalProduct"
               }
            }
         },
         "ListResponseExternalProduct": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/ExternalProduct"
                  }
               }
            }
         },
         "ResponseWrapperProduct": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/Product"
               }
            }
         },
         "ListResponseProduct": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Product"
                  }
               }
            }
         },
         "ResponseWrapperSupplierProduct": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/SupplierProduct"
               }
            }
         },
         "ListResponseSupplierProduct": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/SupplierProduct"
                  }
               }
            }
         },
         "ResponseWrapperDiscountGroup": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/DiscountGroup"
               }
            }
         },
         "ListResponseDiscountGroup": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/DiscountGroup"
                  }
               }
            }
         },
         "ProductInventoryLocation": {
            "required": [
               "inventory",
               "product"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "product": {
                  "$ref": "#/components/schemas/Product"
               },
               "inventory": {
                  "$ref": "#/components/schemas/Inventory"
               },
               "inventoryLocation": {
                  "$ref": "#/components/schemas/InventoryLocation"
               },
               "isMainLocation": {
                  "type": "boolean"
               },
               "stockOfGoods": {
                  "type": "number",
                  "readOnly": true
               }
            }
         },
         "ResponseWrapperProductInventoryLocation": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/ProductInventoryLocation"
               }
            }
         },
         "ListResponseProductInventoryLocation": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/ProductInventoryLocation"
                  }
               }
            }
         },
         "LogisticsSettings": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "hasWarehouseLocation": {
                  "type": "boolean"
               },
               "showOnboardingWizard": {
                  "type": "boolean"
               },
               "moduleSuggestedProductNumber": {
                  "type": "boolean"
               },
               "suggestedProductNumber": {
                  "maxLength": 50,
                  "type": "string"
               },
               "purchaseOrderDefaultComment": {
                  "type": "string"
               }
            }
         },
         "ResponseWrapperLogisticsSettings": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/LogisticsSettings"
               }
            }
         },
         "ProductGroup": {
            "required": [
               "name"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "name": {
                  "maxLength": 255,
                  "type": "string",
                  "description": "Product group name"
               },
               "displayName": {
                  "type": "string",
                  "description": "Product group displayName",
                  "readOnly": true
               },
               "parentGroup": {
                  "$ref": "#/components/schemas/ProductGroup"
               },
               "isDeletable": {
                  "type": "boolean",
                  "readOnly": true
               }
            }
         },
         "ResponseWrapperProductGroup": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/ProductGroup"
               }
            }
         },
         "ListResponseProductGroup": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/ProductGroup"
                  }
               }
            }
         },
         "ProductGroupRelation": {
            "required": [
               "product",
               "productGroup"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "product": {
                  "$ref": "#/components/schemas/Product"
               },
               "productGroup": {
                  "$ref": "#/components/schemas/ProductGroup"
               }
            }
         },
         "ResponseWrapperProductGroupRelation": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/ProductGroupRelation"
               }
            }
         },
         "ListResponseProductGroupRelation": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/ProductGroupRelation"
                  }
               }
            }
         },
         "ProductPrice": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "product": {
                  "$ref": "#/components/schemas/Product"
               },
               "fromDate": {
                  "type": "string"
               },
               "toDate": {
                  "type": "string"
               },
               "purchasePrice": {
                  "$ref": "#/components/schemas/TlxNumber"
               },
               "purchasePriceCurrency": {
                  "type": "number",
                  "description": "Purchase Price (cost) excluding VAT in the product's currency"
               },
               "costPrice": {
                  "$ref": "#/components/schemas/TlxNumber"
               },
               "salesPriceExcludingVat": {
                  "$ref": "#/components/schemas/TlxNumber"
               },
               "vatType": {
                  "$ref": "#/components/schemas/VatType"
               },
               "salesPriceIncludingVat": {
                  "$ref": "#/components/schemas/TlxNumber"
               }
            }
         },
         "ListResponseProductPrice": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/ProductPrice"
                  }
               }
            }
         },
         "ResponseWrapperProductUnit": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/ProductUnit"
               }
            }
         },
         "ListResponseProductUnit": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/ProductUnit"
                  }
               }
            }
         },
         "ProductUnitMaster": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "name": {
                  "type": "string",
                  "readOnly": true
               },
               "nameShort": {
                  "type": "string",
                  "readOnly": true
               },
               "commonCode": {
                  "type": "string",
                  "readOnly": true
               },
               "peppolName": {
                  "type": "string",
                  "readOnly": true
               },
               "peppolSymbol": {
                  "type": "string",
                  "readOnly": true
               },
               "isInactive": {
                  "type": "boolean",
                  "readOnly": true
               }
            }
         },
         "ResponseWrapperProductUnitMaster": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/ProductUnitMaster"
               }
            }
         },
         "ListResponseProductUnitMaster": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/ProductUnitMaster"
                  }
               }
            }
         },
         "ResponseWrapperProject": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/Project"
               }
            }
         },
         "ListResponseProject": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Project"
                  }
               }
            }
         },
         "ResponseWrapperProjectCategory": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/ProjectCategory"
               }
            }
         },
         "ListResponseProjectCategory": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/ProjectCategory"
                  }
               }
            }
         },
         "ResponseWrapperProjectOrderLine": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/ProjectOrderLine"
               }
            }
         },
         "ListResponseProjectOrderLine": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/ProjectOrderLine"
                  }
               }
            }
         },
         "ResponseWrapperProjectParticipant": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/ProjectParticipant"
               }
            }
         },
         "ListResponseProjectParticipant": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/ProjectParticipant"
                  }
               }
            }
         },
         "ProjectPeriodInvoicingReserve": {
            "type": "object",
            "properties": {
               "invoiceFeeReserveCurrency": {
                  "type": "number",
                  "readOnly": true
               },
               "periodOrderLinesIncomeCurrency": {
                  "type": "number",
                  "readOnly": true
               },
               "invoiceExtracostsReserveCurrency": {
                  "type": "number",
                  "readOnly": true
               },
               "invoiceAkontoReserveAmountCurrency": {
                  "type": "number",
                  "readOnly": true
               },
               "invoiceReserveTotalAmountCurrency": {
                  "type": "number",
                  "readOnly": true
               }
            }
         },
         "ResponseWrapperProjectPeriodInvoicingReserve": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/ProjectPeriodInvoicingReserve"
               }
            }
         },
         "ProjectPeriodInvoiced": {
            "type": "object",
            "properties": {
               "sumAmountPaid": {
                  "type": "number",
                  "readOnly": true
               },
               "sumAmountOutstanding": {
                  "type": "number",
                  "readOnly": true
               },
               "sumAmountDue": {
                  "type": "number",
                  "readOnly": true
               },
               "sumAmountDueOutstanding": {
                  "type": "number",
                  "readOnly": true
               },
               "sumAmount": {
                  "type": "number",
                  "readOnly": true
               }
            }
         },
         "ResponseWrapperProjectPeriodInvoiced": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/ProjectPeriodInvoiced"
               }
            }
         },
         "ProjectPeriodOverallStatus": {
            "type": "object",
            "properties": {
               "income": {
                  "type": "number",
                  "readOnly": true
               },
               "costs": {
                  "type": "number",
                  "readOnly": true
               }
            }
         },
         "ResponseWrapperProjectPeriodOverallStatus": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/ProjectPeriodOverallStatus"
               }
            }
         },
         "ProjectPeriodMonthlyStatus": {
            "type": "object",
            "properties": {
               "income": {
                  "type": "number",
                  "readOnly": true
               },
               "costs": {
                  "type": "number",
                  "readOnly": true
               },
               "dateFrom": {
                  "type": "string",
                  "readOnly": true
               },
               "dateTo": {
                  "type": "string",
                  "readOnly": true
               }
            }
         },
         "ListResponseProjectPeriodMonthlyStatus": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/ProjectPeriodMonthlyStatus"
                  }
               }
            }
         },
         "ProjectPeriodHourlyReport": {
            "type": "object",
            "properties": {
               "chargeableHours": {
                  "type": "number",
                  "readOnly": true
               },
               "nonChargeableHours": {
                  "type": "number",
                  "readOnly": true
               },
               "approvedButUnchargedHours": {
                  "type": "number",
                  "readOnly": true
               },
               "nonApprovedHours": {
                  "type": "number",
                  "readOnly": true
               },
               "registeredHours": {
                  "type": "number",
                  "readOnly": true
               }
            }
         },
         "ResponseWrapperProjectPeriodHourlyReport": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/ProjectPeriodHourlyReport"
               }
            }
         },
         "ProjectBudgetStatus": {
            "type": "object",
            "properties": {
               "totalTotalIncomeCurrency": {
                  "type": "number",
                  "readOnly": true
               },
               "budgetTotalIncomeCurrency": {
                  "type": "number",
                  "readOnly": true
               }
            }
         },
         "ResponseWrapperProjectBudgetStatus": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/ProjectBudgetStatus"
               }
            }
         },
         "ResponseWrapperProjectActivity": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/ProjectActivity"
               }
            }
         },
         "ProjectControlForm": {
            "required": [
               "comment",
               "title"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "title": {
                  "maxLength": 255,
                  "minLength": 1,
                  "type": "string"
               },
               "comment": {
                  "minLength": 1,
                  "type": "string"
               },
               "completed": {
                  "type": "boolean"
               },
               "signatureRequired": {
                  "type": "boolean",
                  "readOnly": true
               },
               "signed": {
                  "type": "boolean",
                  "readOnly": true
               },
               "controlForm": {
                  "type": "string",
                  "readOnly": true
               }
            }
         },
         "ResponseWrapperProjectControlForm": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/ProjectControlForm"
               }
            }
         },
         "ListResponseProjectControlForm": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/ProjectControlForm"
                  }
               }
            }
         },
         "ProjectControlFormType": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "name": {
                  "type": "string"
               }
            }
         },
         "ResponseWrapperProjectControlFormType": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/ProjectControlFormType"
               }
            }
         },
         "ListResponseProjectControlFormType": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/ProjectControlFormType"
                  }
               }
            }
         },
         "ResponseWrapperProjectHourlyRate": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/ProjectHourlyRate"
               }
            }
         },
         "ListResponseProjectHourlyRate": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/ProjectHourlyRate"
                  }
               }
            }
         },
         "HourlyRate": {
            "required": [
               "hourlyRateModel",
               "startDate"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "startDate": {
                  "type": "string"
               },
               "hourlyRateModel": {
                  "type": "string",
                  "description": "Defines the model used for the hourly rate.",
                  "enum": [
                     "TYPE_PREDEFINED_HOURLY_RATES",
                     "TYPE_PROJECT_SPECIFIC_HOURLY_RATES",
                     "TYPE_FIXED_HOURLY_RATE"
                  ]
               },
               "projectSpecificRates": {
                  "type": "array",
                  "description": "Project specific rates if hourlyRateModel is TYPE_PROJECT_SPECIFIC_HOURLY_RATES. ",
                  "items": {
                     "$ref": "#/components/schemas/ProjectSpecificRate"
                  }
               },
               "fixedRate": {
                  "type": "number",
                  "description": "Fixed Hourly rates if hourlyRateModel is TYPE_FIXED_HOURLY_RATE."
               }
            }
         },
         "ResponseWrapperProjectSpecificRate": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/ProjectSpecificRate"
               }
            }
         },
         "ListResponseProjectSpecificRate": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/ProjectSpecificRate"
                  }
               }
            }
         },
         "ResourcePlanHours": {
            "type": "object",
            "properties": {
               "label": {
                  "type": "string"
               },
               "allocatedHours": {
                  "$ref": "#/components/schemas/TlxNumber"
               },
               "workedHours": {
                  "$ref": "#/components/schemas/TlxNumber"
               }
            }
         },
         "ResourcePlanEmployee": {
            "type": "object",
            "properties": {
               "employeeId": {
                  "type": "integer",
                  "format": "int32"
               },
               "employeeName": {
                  "type": "string"
               },
               "budget": {
                  "$ref": "#/components/schemas/TlxNumber"
               },
               "remaining": {
                  "$ref": "#/components/schemas/TlxNumber"
               },
               "totalHours": {
                  "$ref": "#/components/schemas/TlxNumber"
               },
               "totalAllocated": {
                  "$ref": "#/components/schemas/TlxNumber"
               },
               "hoursEntries": {
                  "type": "array",
                  "description": "List of HoursResourcePlanDTO",
                  "items": {
                     "$ref": "#/components/schemas/ResourcePlanHours"
                  }
               }
            }
         },
         "ResourcePlanActivity": {
            "type": "object",
            "properties": {
               "activityId": {
                  "type": "integer",
                  "format": "int32"
               },
               "activityName": {
                  "type": "string"
               },
               "employeeEntries": {
                  "type": "array",
                  "description": "List of EmployeeResourcePlanDTO",
                  "items": {
                     "$ref": "#/components/schemas/ResourcePlanEmployee"
                  }
               }
            }
         },
         "ResourcePlanBudget": {
            "type": "object",
            "properties": {
               "projectId": {
                  "type": "integer",
                  "format": "int32"
               },
               "projectName": {
                  "type": "string"
               },
               "periodStart": {
                  "type": "string"
               },
               "periodEnd": {
                  "type": "string"
               },
               "periodType": {
                  "type": "string",
                  "enum": [
                     "HOUR",
                     "DAY",
                     "WEEK",
                     "MONTH"
                  ]
               },
               "activityEntries": {
                  "type": "array",
                  "description": "List of ActivityResourcePlanDTO",
                  "items": {
                     "$ref": "#/components/schemas/ResourcePlanActivity"
                  }
               }
            }
         },
         "ResponseWrapperResourcePlanBudget": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/ResourcePlanBudget"
               }
            }
         },
         "ProjectSettings": {
            "type": "object",
            "properties": {
               "approveHourLists": {
                  "type": "boolean"
               },
               "approveInvoices": {
                  "type": "boolean"
               },
               "markReadyForInvoicing": {
                  "type": "boolean"
               },
               "historicalInformation": {
                  "type": "boolean"
               },
               "projectForecast": {
                  "type": "boolean"
               },
               "budgetOnSubcontracts": {
                  "type": "boolean"
               },
               "projectCategories": {
                  "type": "boolean"
               },
               "referenceFee": {
                  "type": "boolean"
               },
               "sortOrderProjects": {
                  "type": "string",
                  "enum": [
                     "SORT_ORDER_NAME_AND_NUMBER",
                     "SORT_ORDER_NAME"
                  ]
               },
               "autoCloseInvoicedProjects": {
                  "type": "boolean"
               },
               "mustApproveRegisteredHours": {
                  "type": "boolean"
               },
               "showProjectOrderLinesToAllProjectParticipants": {
                  "type": "boolean"
               },
               "hourCostPercentage": {
                  "type": "boolean"
               },
               "fixedPriceProjectsFeeCalcMethod": {
                  "type": "string",
                  "enum": [
                     "FIXED_PRICE_PROJECTS_CALC_METHOD_INVOICED_FEE",
                     "FIXED_PRICE_PROJECTS_CALC_METHOD_PERCENT_COMPLETED"
                  ]
               },
               "fixedPriceProjectsInvoiceByProgress": {
                  "type": "boolean"
               },
               "projectBudgetReferenceFee": {
                  "type": "boolean"
               },
               "allowMultipleProjectInvoiceVat": {
                  "type": "boolean"
               },
               "standardReinvoicing": {
                  "type": "boolean"
               },
               "isCurrentMonthDefaultPeriod": {
                  "type": "boolean"
               },
               "showProjectOnboarding": {
                  "type": "boolean"
               },
               "autoConnectIncomingOrderlineToProject": {
                  "type": "boolean"
               },
               "autoGenerateProjectNumber": {
                  "type": "boolean"
               },
               "autoGenerateStartingNumber": {
                  "minimum": 0,
                  "type": "integer",
                  "format": "int32"
               },
               "projectNameScheme": {
                  "type": "string",
                  "enum": [
                     "NAME_STANDARD",
                     "NAME_INCL_CUSTOMER_NAME",
                     "NAME_INCL_PARENT_NAME",
                     "NAME_INCL_PARENT_NUMBER",
                     "NAME_INCL_PARENT_NAME_AND_NUMBER"
                  ]
               },
               "projectTypeOfContract": {
                  "type": "string",
                  "enum": [
                     "PROJECT_FIXED_PRICE",
                     "PROJECT_HOUR_RATES"
                  ]
               },
               "projectOrderLinesSortOrder": {
                  "type": "string",
                  "enum": [
                     "SORT_ORDER_ID",
                     "SORT_ORDER_DATE",
                     "SORT_ORDER_PRODUCT",
                     "SORT_ORDER_CUSTOM"
                  ]
               },
               "projectHourlyRateModel": {
                  "type": "string",
                  "enum": [
                     "TYPE_PREDEFINED_HOURLY_RATES",
                     "TYPE_PROJECT_SPECIFIC_HOURLY_RATES",
                     "TYPE_FIXED_HOURLY_RATE"
                  ]
               },
               "onlyProjectMembersCanRegisterInfo": {
                  "type": "boolean"
               },
               "onlyProjectActivitiesTimesheetRegistration": {
                  "type": "boolean"
               },
               "hourlyRateProjectsWriteUpDown": {
                  "type": "boolean"
               },
               "showRecentlyClosedProjectsOnSupplierInvoice": {
                  "type": "boolean"
               },
               "defaultProjectContractComment": {
                  "type": "string"
               },
               "defaultProjectInvoicingComment": {
                  "type": "string"
               },
               "resourcePlanning": {
                  "type": "boolean"
               },
               "resourceGroups": {
                  "type": "boolean"
               },
               "holidayPlan": {
                  "type": "boolean"
               },
               "resourcePlanPeriod": {
                  "type": "string",
                  "enum": [
                     "PERIOD_MONTH",
                     "PERIOD_WEEK",
                     "PERIOD_DAY"
                  ]
               },
               "controlFormsRequiredForInvoicing": {
                  "type": "array",
                  "description": "Control forms required for invoicing",
                  "items": {
                     "$ref": "#/components/schemas/ProjectControlFormType"
                  }
               },
               "controlFormsRequiredForHourTracking": {
                  "type": "array",
                  "description": "Control forms required for hour tracking",
                  "items": {
                     "$ref": "#/components/schemas/ProjectControlFormType"
                  }
               },
               "useLoggedInUserEmailOnProjectBudget": {
                  "type": "boolean"
               },
               "emailOnProjectBudget": {
                  "type": "string"
               },
               "useLoggedInUserEmailOnProjectContract": {
                  "type": "boolean"
               },
               "emailOnProjectContract": {
                  "type": "string"
               },
               "useLoggedInUserEmailOnDocuments": {
                  "type": "boolean"
               },
               "emailOnDocuments": {
                  "type": "string"
               },
               "useProductNetPrice": {
                  "type": "boolean"
               }
            }
         },
         "ResponseWrapperProjectSettings": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/ProjectSettings"
               }
            }
         },
         "Task": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "name": {
                  "type": "string",
                  "readOnly": true
               },
               "status": {
                  "type": "string",
                  "readOnly": true
               }
            }
         },
         "ListResponseTask": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Task"
                  }
               }
            }
         },
         "ProjectSpecificRateTemplate": {
            "type": "object",
            "properties": {
               "hourlyRate": {
                  "type": "number"
               },
               "hourlyCostPercentage": {
                  "type": "number"
               },
               "employee": {
                  "$ref": "#/components/schemas/Employee"
               },
               "activity": {
                  "$ref": "#/components/schemas/Activity"
               }
            }
         },
         "ProjectHourlyRateTemplate": {
            "type": "object",
            "properties": {
               "startDate": {
                  "type": "string"
               },
               "showInProjectOrder": {
                  "type": "boolean",
                  "description": "Show on contract confirmation/offers"
               },
               "hourlyRateModel": {
                  "type": "string",
                  "description": "Defines the model used for the hourly rate.",
                  "enum": [
                     "TYPE_PREDEFINED_HOURLY_RATES",
                     "TYPE_PROJECT_SPECIFIC_HOURLY_RATES",
                     "TYPE_FIXED_HOURLY_RATE"
                  ]
               },
               "projectSpecificRates": {
                  "type": "array",
                  "description": "Project specific rates if hourlyRateModel is TYPE_PROJECT_SPECIFIC_HOURLY_RATES. ",
                  "items": {
                     "$ref": "#/components/schemas/ProjectSpecificRateTemplate"
                  }
               },
               "fixedRate": {
                  "type": "number",
                  "description": "Fixed Hourly rates if hourlyRateModel is TYPE_FIXED_HOURLY_RATE."
               }
            }
         },
         "ProjectTemplate": {
            "type": "object",
            "properties": {
               "name": {
                  "maxLength": 255,
                  "type": "string"
               },
               "startDate": {
                  "type": "string"
               },
               "endDate": {
                  "type": "string"
               },
               "isInternal": {
                  "type": "boolean"
               },
               "number": {
                  "maxLength": 100,
                  "type": "string"
               },
               "displayNameFormat": {
                  "type": "string",
                  "enum": [
                     "NAME_STANDARD",
                     "NAME_INCL_CUSTOMER_NAME",
                     "NAME_INCL_PARENT_NAME",
                     "NAME_INCL_PARENT_NUMBER",
                     "NAME_INCL_PARENT_NAME_AND_NUMBER"
                  ]
               },
               "projectManager": {
                  "$ref": "#/components/schemas/Employee"
               },
               "department": {
                  "$ref": "#/components/schemas/Department"
               },
               "mainProject": {
                  "$ref": "#/components/schemas/Project"
               },
               "projectCategory": {
                  "$ref": "#/components/schemas/ProjectCategory"
               },
               "reference": {
                  "maxLength": 255,
                  "type": "string"
               },
               "externalAccountsNumber": {
                  "maxLength": 100,
                  "type": "string"
               },
               "description": {
                  "type": "string"
               },
               "invoiceComment": {
                  "type": "string",
                  "description": "Comment for project invoices"
               },
               "attention": {
                  "$ref": "#/components/schemas/Contact"
               },
               "contact": {
                  "$ref": "#/components/schemas/Contact"
               },
               "customer": {
                  "$ref": "#/components/schemas/Customer"
               },
               "deliveryAddress": {
                  "$ref": "#/components/schemas/DeliveryAddress"
               },
               "vatType": {
                  "$ref": "#/components/schemas/VatType"
               },
               "currency": {
                  "$ref": "#/components/schemas/Currency"
               },
               "markUpOrderLines": {
                  "type": "number",
                  "description": "Set mark-up (%) for order lines."
               },
               "markUpFeesEarned": {
                  "type": "number",
                  "description": "Set mark-up (%) for fees earned."
               },
               "isFixedPrice": {
                  "type": "boolean",
                  "description": "Project is fixed price if set to true, hourly rate if set to false."
               },
               "fixedprice": {
                  "type": "number",
                  "description": "Fixed price amount, in the project's currency."
               },
               "isPriceCeiling": {
                  "type": "boolean",
                  "description": "Set to true if an hourly rate project has a price ceiling."
               },
               "priceCeilingAmount": {
                  "type": "number",
                  "description": "Price ceiling amount, in the project's currency."
               },
               "generalProjectActivitiesPerProjectOnly": {
                  "type": "boolean",
                  "description": "Set to true if a general project activity must be linked to project to allow time tracking."
               },
               "forParticipantsOnly": {
                  "type": "boolean",
                  "description": "Set to true if only project participants can register information on the project"
               },
               "projectHourlyRates": {
                  "type": "array",
                  "description": "Project Rate Types tied to the project.",
                  "items": {
                     "$ref": "#/components/schemas/ProjectHourlyRateTemplate"
                  }
               }
            }
         },
         "ResponseWrapperProjectTemplate": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/ProjectTemplate"
               }
            }
         },
         "Prospect": {
            "required": [
               "createdDate"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "name": {
                  "maxLength": 255,
                  "type": "string"
               },
               "description": {
                  "type": "string"
               },
               "createdDate": {
                  "type": "string"
               },
               "customer": {
                  "$ref": "#/components/schemas/Customer"
               },
               "salesEmployee": {
                  "$ref": "#/components/schemas/Employee"
               },
               "isClosed": {
                  "type": "boolean"
               },
               "closedReason": {
                  "minimum": 0,
                  "type": "integer",
                  "format": "int32"
               },
               "closedDate": {
                  "type": "string"
               },
               "competitor": {
                  "maxLength": 255,
                  "type": "string"
               },
               "prospectType": {
                  "minimum": 1,
                  "type": "integer",
                  "format": "int32"
               },
               "project": {
                  "$ref": "#/components/schemas/Project"
               },
               "projectOffer": {
                  "$ref": "#/components/schemas/Project"
               },
               "finalIncomeDate": {
                  "type": "string",
                  "description": "The estimated start date for income on the prospect."
               },
               "finalInitialValue": {
                  "type": "number",
                  "description": "The estimated startup fee on this prospect."
               },
               "finalMonthlyValue": {
                  "type": "number",
                  "description": "The estimated monthly fee on this prospect."
               },
               "finalAdditionalServicesValue": {
                  "type": "number",
                  "description": "Tripletex specific."
               },
               "totalValue": {
                  "type": "number",
                  "description": "The estimated total fee on this prospect.",
                  "readOnly": true
               }
            }
         },
         "ResponseWrapperProspect": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/Prospect"
               }
            }
         },
         "ListResponseProspect": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Prospect"
                  }
               }
            }
         },
         "TransportType": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "nameKey": {
                  "type": "string",
                  "readOnly": true
               },
               "code": {
                  "type": "string",
                  "readOnly": true
               },
               "isPickUp": {
                  "type": "boolean",
                  "readOnly": true
               }
            }
         },
         "PickupPoint": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "code": {
                  "maxLength": 100,
                  "type": "string",
                  "readOnly": true
               },
               "name": {
                  "maxLength": 100,
                  "type": "string",
                  "readOnly": true
               },
               "transportType": {
                  "$ref": "#/components/schemas/TransportType"
               }
            }
         },
         "ResponseWrapperPickupPoint": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/PickupPoint"
               }
            }
         },
         "ListResponsePickupPoint": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/PickupPoint"
                  }
               }
            }
         },
         "PurchaseOrder": {
            "required": [
               "deliveryDate",
               "ourContact",
               "supplier"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "number": {
                  "maxLength": 100,
                  "type": "string",
                  "description": "Purchase order number",
                  "readOnly": true
               },
               "receiverEmail": {
                  "maxLength": 100,
                  "type": "string",
                  "description": "Email when purchase order is send by email."
               },
               "discount": {
                  "type": "number",
                  "description": "Discount Percentage"
               },
               "internalComment": {
                  "type": "string"
               },
               "packingNoteMessage": {
                  "maxLength": 50,
                  "type": "string",
                  "description": "Message on packing note.Wholesaler specific."
               },
               "transporterMessage": {
                  "maxLength": 255,
                  "type": "string",
                  "description": "Message to transporter.Wholesaler specific."
               },
               "comments": {
                  "type": "string",
                  "description": "Delivery information and invoice comments"
               },
               "supplier": {
                  "$ref": "#/components/schemas/Supplier"
               },
               "deliveryDate": {
                  "type": "string"
               },
               "receivedDate": {
                  "type": "string"
               },
               "orderLines": {
                  "type": "array",
                  "description": "Order lines tied to the purchase order",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/PurchaseOrderline"
                  }
               },
               "project": {
                  "$ref": "#/components/schemas/Project"
               },
               "department": {
                  "$ref": "#/components/schemas/Department"
               },
               "deliveryAddress": {
                  "$ref": "#/components/schemas/Address"
               },
               "creationDate": {
                  "type": "string"
               },
               "isClosed": {
                  "type": "boolean"
               },
               "ourContact": {
                  "$ref": "#/components/schemas/Employee"
               },
               "supplierContact": {
                  "$ref": "#/components/schemas/Employee"
               },
               "attention": {
                  "$ref": "#/components/schemas/Employee"
               },
               "status": {
                  "type": "string",
                  "enum": [
                     "STATUS_OPEN",
                     "STATUS_SENT",
                     "STATUS_RECEIVING",
                     "STATUS_CONFIRMED_DEVIATION_DETECTED",
                     "STATUS_DEVIATION_OPEN",
                     "STATUS_DEVIATION_CONFIRMED",
                     "STATUS_CLOSED",
                     "STATUS_CANCELLED",
                     "STATUS_CONFIRMED"
                  ]
               },
               "currency": {
                  "$ref": "#/components/schemas/Currency"
               },
               "restorder": {
                  "$ref": "#/components/schemas/PurchaseOrder"
               },
               "transportType": {
                  "$ref": "#/components/schemas/TransportType"
               },
               "pickupPoint": {
                  "$ref": "#/components/schemas/PickupPoint"
               },
               "document": {
                  "$ref": "#/components/schemas/Document"
               },
               "attachment": {
                  "$ref": "#/components/schemas/Document"
               },
               "ediDocument": {
                  "$ref": "#/components/schemas/Document"
               },
               "lastSentTimestamp": {
                  "type": "string"
               },
               "lastSentEmployeeName": {
                  "type": "string"
               }
            }
         },
         "PurchaseOrderline": {
            "required": [
               "purchaseOrder"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "purchaseOrder": {
                  "$ref": "#/components/schemas/PurchaseOrder"
               },
               "product": {
                  "$ref": "#/components/schemas/Product"
               },
               "supplierProduct": {
                  "$ref": "#/components/schemas/SupplierProduct"
               },
               "resaleProduct": {
                  "$ref": "#/components/schemas/Product"
               },
               "description": {
                  "type": "string"
               },
               "count": {
                  "type": "number"
               },
               "quantityReceived": {
                  "type": "number",
                  "description": "Used if the Purchase Order has a Goods received."
               },
               "unitCostCurrency": {
                  "type": "number",
                  "description": "Unit price purchase (cost) excluding VAT in the order's currency"
               },
               "unitPriceExcludingVatCurrency": {
                  "type": "number",
                  "description": "Unit price of purchase excluding VAT in the order's currency.If it's not specified,it takes the value from purchase price in productDTO"
               },
               "unitListPriceCurrency": {
                  "type": "number",
                  "description": "Unit list price of purchase excluding VAT in the order's currency.If it's not specified,it takes the value from purchase price in productDTO"
               },
               "unitPriceIncVatCurrency": {
                  "type": "number",
                  "description": "Unit  price including VAT in the order's currency.If it's not specified,it takes the value from purchase price in productDTO"
               },
               "currency": {
                  "$ref": "#/components/schemas/Currency"
               },
               "discount": {
                  "type": "number",
                  "description": "Discount given as a percentage (%)"
               },
               "amountExcludingVatCurrency": {
                  "type": "number",
                  "description": "Total amount on order line excluding VAT in the order's currency"
               },
               "amountIncludingVatCurrency": {
                  "type": "number",
                  "description": "Total amount on order line including VAT in the order's currency",
                  "readOnly": true
               }
            }
         },
         "ResponseWrapperPurchaseOrder": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/PurchaseOrder"
               }
            }
         },
         "ListResponsePurchaseOrder": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/PurchaseOrder"
                  }
               }
            }
         },
         "PurchaseOrderEmail": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "email": {
                  "type": "string"
               },
               "subject": {
                  "type": "string"
               },
               "message": {
                  "type": "string"
               }
            }
         },
         "ContentDisposition": {
            "type": "object",
            "properties": {
               "type": {
                  "type": "string"
               },
               "parameters": {
                  "type": "object",
                  "additionalProperties": {
                     "type": "string"
                  }
               },
               "fileName": {
                  "type": "string"
               },
               "creationDate": {
                  "type": "string",
                  "format": "date-time"
               },
               "modificationDate": {
                  "type": "string",
                  "format": "date-time"
               },
               "readDate": {
                  "type": "string",
                  "format": "date-time"
               },
               "size": {
                  "type": "integer",
                  "format": "int64"
               }
            }
         },
         "MediaType": {
            "type": "object",
            "properties": {
               "type": {
                  "type": "string"
               },
               "subtype": {
                  "type": "string"
               },
               "parameters": {
                  "type": "object",
                  "additionalProperties": {
                     "type": "string"
                  }
               },
               "wildcardType": {
                  "type": "boolean"
               },
               "wildcardSubtype": {
                  "type": "boolean"
               }
            }
         },
         "MessageBodyWorkers": {
            "type": "object"
         },
         "MultiPart": {
            "type": "object",
            "properties": {
               "contentDisposition": {
                  "$ref": "#/components/schemas/ContentDisposition"
               },
               "entity": {
                  "type": "object",
                  "properties": {}
               },
               "headers": {
                  "type": "object",
                  "additionalProperties": {
                     "type": "array",
                     "items": {
                        "type": "string"
                     }
                  }
               },
               "mediaType": {
                  "$ref": "#/components/schemas/MediaType"
               },
               "messageBodyWorkers": {
                  "$ref": "#/components/schemas/MessageBodyWorkers"
               },
               "parent": {
                  "$ref": "#/components/schemas/MultiPart"
               },
               "providers": {
                  "$ref": "#/components/schemas/Providers"
               },
               "bodyParts": {
                  "type": "array",
                  "items": {
                     "$ref": "#/components/schemas/BodyPart"
                  }
               },
               "parameterizedHeaders": {
                  "type": "object",
                  "additionalProperties": {
                     "type": "array",
                     "items": {
                        "$ref": "#/components/schemas/ParameterizedHeader"
                     }
                  }
               }
            }
         },
         "Providers": {
            "type": "object"
         },
         "ParameterizedHeader": {
            "type": "object",
            "properties": {
               "value": {
                  "type": "string"
               },
               "parameters": {
                  "type": "object",
                  "additionalProperties": {
                     "type": "string"
                  }
               }
            }
         },
         "BodyPart": {
            "type": "object",
            "properties": {
               "contentDisposition": {
                  "$ref": "#/components/schemas/ContentDisposition"
               },
               "entity": {
                  "type": "object",
                  "properties": {}
               },
               "headers": {
                  "type": "object",
                  "additionalProperties": {
                     "type": "array",
                     "items": {
                        "type": "string"
                     }
                  }
               },
               "mediaType": {
                  "$ref": "#/components/schemas/MediaType"
               },
               "messageBodyWorkers": {
                  "$ref": "#/components/schemas/MessageBodyWorkers"
               },
               "parent": {
                  "$ref": "#/components/schemas/MultiPart"
               },
               "providers": {
                  "$ref": "#/components/schemas/Providers"
               },
               "parameterizedHeaders": {
                  "type": "object",
                  "additionalProperties": {
                     "type": "array",
                     "items": {
                        "$ref": "#/components/schemas/ParameterizedHeader"
                     }
                  }
               }
            }
         },
         "FormDataContentDisposition": {
            "type": "object",
            "properties": {
               "type": {
                  "type": "string"
               },
               "parameters": {
                  "type": "object",
                  "additionalProperties": {
                     "type": "string"
                  }
               },
               "fileName": {
                  "type": "string"
               },
               "creationDate": {
                  "type": "string",
                  "format": "date-time"
               },
               "modificationDate": {
                  "type": "string",
                  "format": "date-time"
               },
               "readDate": {
                  "type": "string",
                  "format": "date-time"
               },
               "size": {
                  "type": "integer",
                  "format": "int64"
               },
               "name": {
                  "type": "string"
               }
            }
         },
         "FormDataBodyPart": {
            "type": "object",
            "properties": {
               "contentDisposition": {
                  "$ref": "#/components/schemas/ContentDisposition"
               },
               "entity": {
                  "type": "object",
                  "properties": {}
               },
               "headers": {
                  "type": "object",
                  "additionalProperties": {
                     "type": "array",
                     "items": {
                        "type": "string"
                     }
                  }
               },
               "mediaType": {
                  "$ref": "#/components/schemas/MediaType"
               },
               "messageBodyWorkers": {
                  "$ref": "#/components/schemas/MessageBodyWorkers"
               },
               "parent": {
                  "$ref": "#/components/schemas/MultiPart"
               },
               "providers": {
                  "$ref": "#/components/schemas/Providers"
               },
               "name": {
                  "type": "string"
               },
               "value": {
                  "type": "string"
               },
               "formDataContentDisposition": {
                  "$ref": "#/components/schemas/FormDataContentDisposition"
               },
               "simple": {
                  "type": "boolean"
               },
               "parameterizedHeaders": {
                  "type": "object",
                  "additionalProperties": {
                     "type": "array",
                     "items": {
                        "$ref": "#/components/schemas/ParameterizedHeader"
                     }
                  }
               }
            }
         },
         "FormDataMultiPart": {
            "type": "object",
            "properties": {
               "contentDisposition": {
                  "$ref": "#/components/schemas/ContentDisposition"
               },
               "entity": {
                  "type": "object",
                  "properties": {}
               },
               "headers": {
                  "type": "object",
                  "additionalProperties": {
                     "type": "array",
                     "items": {
                        "type": "string"
                     }
                  }
               },
               "mediaType": {
                  "$ref": "#/components/schemas/MediaType"
               },
               "messageBodyWorkers": {
                  "$ref": "#/components/schemas/MessageBodyWorkers"
               },
               "parent": {
                  "$ref": "#/components/schemas/MultiPart"
               },
               "providers": {
                  "$ref": "#/components/schemas/Providers"
               },
               "bodyParts": {
                  "type": "array",
                  "items": {
                     "$ref": "#/components/schemas/BodyPart"
                  }
               },
               "fields": {
                  "type": "object",
                  "additionalProperties": {
                     "type": "array",
                     "items": {
                        "$ref": "#/components/schemas/FormDataBodyPart"
                     }
                  }
               },
               "parameterizedHeaders": {
                  "type": "object",
                  "additionalProperties": {
                     "type": "array",
                     "items": {
                        "$ref": "#/components/schemas/ParameterizedHeader"
                     }
                  }
               }
            }
         },
         "ResponseWrapperTransportType": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/TransportType"
               }
            }
         },
         "ListResponseTransportType": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/TransportType"
                  }
               }
            }
         },
         "Deviation": {
            "required": [
               "date",
               "purchaseOrderLine"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "purchaseOrderLine": {
                  "$ref": "#/components/schemas/PurchaseOrderline"
               },
               "date": {
                  "type": "string"
               },
               "cause": {
                  "type": "string",
                  "enum": [
                     "CAUSE_DEFECT",
                     "CAUSE_TOO_FEW",
                     "CAUSE_TOO_MANY",
                     "CAUSE_REPLACEMENT"
                  ]
               },
               "action": {
                  "type": "string",
                  "enum": [
                     "ACTION_IGNORE",
                     "ACTION_GENERATE_RESTORDER",
                     "ACTION_RETURN",
                     "ACTION_RETURN_GENERATE_RESTORDER"
                  ]
               },
               "comment": {
                  "type": "string"
               },
               "receivedBy": {
                  "type": "string",
                  "readOnly": true
               },
               "quantityOrdered": {
                  "type": "number",
                  "readOnly": true
               },
               "quantityReceived": {
                  "type": "number",
                  "readOnly": true
               },
               "deviation": {
                  "type": "number",
                  "readOnly": true
               }
            }
         },
         "ResponseWrapperDeviation": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/Deviation"
               }
            }
         },
         "ListResponseDeviation": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Deviation"
                  }
               }
            }
         },
         "GoodsReceiptLine": {
            "required": [
               "product",
               "quantityReceived"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "purchaseOrder": {
                  "$ref": "#/components/schemas/PurchaseOrder"
               },
               "product": {
                  "$ref": "#/components/schemas/Product"
               },
               "resaleProduct": {
                  "$ref": "#/components/schemas/Product"
               },
               "inventory": {
                  "$ref": "#/components/schemas/Inventory"
               },
               "inventoryLocation": {
                  "$ref": "#/components/schemas/InventoryLocation"
               },
               "quantityOrdered": {
                  "type": "number",
                  "readOnly": true
               },
               "quantityReceived": {
                  "type": "number"
               },
               "quantityRest": {
                  "type": "number",
                  "readOnly": true
               },
               "deviation": {
                  "type": "number",
                  "readOnly": true
               }
            }
         },
         "GoodsReceipt": {
            "required": [
               "goodsReceiptLines",
               "registrationDate"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "purchaseOrder": {
                  "$ref": "#/components/schemas/PurchaseOrder"
               },
               "registrationDate": {
                  "type": "string"
               },
               "receivedBy": {
                  "$ref": "#/components/schemas/Employee"
               },
               "status": {
                  "type": "string",
                  "readOnly": true,
                  "enum": [
                     "STATUS_OPEN",
                     "STATUS_CONFIRMED"
                  ]
               },
               "comment": {
                  "type": "string"
               },
               "goodsReceiptLines": {
                  "type": "array",
                  "description": "Purchase Order lines tied to the goods receipt",
                  "items": {
                     "$ref": "#/components/schemas/GoodsReceiptLine"
                  }
               }
            }
         },
         "ResponseWrapperGoodsReceipt": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/GoodsReceipt"
               }
            }
         },
         "ListResponseGoodsReceipt": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/GoodsReceipt"
                  }
               }
            }
         },
         "ResponseWrapperGoodsReceiptLine": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/GoodsReceiptLine"
               }
            }
         },
         "ListResponseGoodsReceiptLine": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/GoodsReceiptLine"
                  }
               }
            }
         },
         "PurchaseOrderIncomingInvoiceRelation": {
            "required": [
               "orderOut",
               "voucher"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "orderOut": {
                  "$ref": "#/components/schemas/PurchaseOrder"
               },
               "voucher": {
                  "$ref": "#/components/schemas/Voucher"
               }
            }
         },
         "ResponseWrapperPurchaseOrderIncomingInvoiceRelation": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/PurchaseOrderIncomingInvoiceRelation"
               }
            }
         },
         "ListResponsePurchaseOrderIncomingInvoiceRelation": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/PurchaseOrderIncomingInvoiceRelation"
                  }
               }
            }
         },
         "ResponseWrapperPurchaseOrderline": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/PurchaseOrderline"
               }
            }
         },
         "ListResponsePurchaseOrderline": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/PurchaseOrderline"
                  }
               }
            }
         },
         "ResponseWrapperReminder": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/Reminder"
               }
            }
         },
         "ListResponseReminder": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Reminder"
                  }
               }
            }
         },
         "RP2ModalPermissionsDTO": {
            "type": "object",
            "properties": {
               "readonly": {
                  "type": "boolean"
               }
            }
         },
         "ResponseWrapperRP2ModalPermissionsDTO": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/RP2ModalPermissionsDTO"
               }
            }
         },
         "ResultBudget": {
            "required": [
               "account",
               "accountingPeriod"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "account": {
                  "$ref": "#/components/schemas/Account"
               },
               "accountingPeriod": {
                  "$ref": "#/components/schemas/AccountingPeriod"
               },
               "amount": {
                  "type": "number"
               },
               "department": {
                  "$ref": "#/components/schemas/Department"
               },
               "project": {
                  "$ref": "#/components/schemas/Project"
               },
               "product": {
                  "$ref": "#/components/schemas/Product"
               },
               "employee": {
                  "$ref": "#/components/schemas/Employee"
               },
               "resultBudgetType": {
                  "type": "string",
                  "readOnly": true,
                  "enum": [
                     "COMPANY",
                     "DEPARTMENT",
                     "EMPLOYEE",
                     "PROJECT",
                     "PRODUCT"
                  ]
               }
            }
         },
         "ListResponseResultBudget": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/ResultBudget"
                  }
               }
            }
         },
         "ResponseWrapperSalaryType": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/SalaryType"
               }
            }
         },
         "ListResponseSalaryType": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/SalaryType"
                  }
               }
            }
         },
         "SalaryCompilationLine": {
            "type": "object",
            "properties": {
               "description": {
                  "type": "string",
                  "readOnly": true
               },
               "amount": {
                  "type": "number",
                  "readOnly": true
               },
               "taxable": {
                  "type": "boolean",
                  "readOnly": true
               },
               "taxableDescription": {
                  "type": "string",
                  "readOnly": true
               }
            }
         },
         "SalaryCompilation": {
            "type": "object",
            "properties": {
               "employee": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "year": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "vacationPayBasis": {
                  "type": "number",
                  "readOnly": true
               },
               "wages": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/SalaryCompilationLine"
                  }
               },
               "expenses": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/SalaryCompilationLine"
                  }
               },
               "taxDeductions": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/SalaryCompilationLine"
                  }
               },
               "mandatoryTaxDeductions": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/SalaryCompilationLine"
                  }
               }
            }
         },
         "ResponseWrapperSalaryCompilation": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/SalaryCompilation"
               }
            }
         },
         "ResponseWrapperPayslip": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/Payslip"
               }
            }
         },
         "ListResponsePayslip": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Payslip"
                  }
               }
            }
         },
         "SalarySettings": {
            "required": [
               "payrollTaxCalcMethod"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "municipality": {
                  "$ref": "#/components/schemas/Municipality"
               },
               "payrollTaxCalcMethod": {
                  "type": "string",
                  "description": "Define the Payroll Tax Calculation Method. AA General industries,BB Central government administration and health trusts, CC Exempted business sectors (and undertakings in economic difficulty),DD Agriculture and forestry, fisheries etc., EE Reporting of payroll withholding tax only,GG Road freight transport",
                  "enum": [
                     "AA",
                     "BB",
                     "CC",
                     "C2",
                     "DD",
                     "EE",
                     "GG",
                     "JJ",
                     "EMPTY"
                  ]
               }
            }
         },
         "ResponseWrapperSalarySettings": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/SalarySettings"
               }
            }
         },
         "CompanyHoliday": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "year": {
                  "type": "integer",
                  "format": "int32"
               },
               "days": {
                  "type": "number"
               },
               "vacationPayPercentage1": {
                  "type": "number"
               },
               "vacationPayPercentage2": {
                  "type": "number"
               },
               "isMaxPercentage2Amount6G": {
                  "type": "boolean"
               }
            }
         },
         "ResponseWrapperCompanyHoliday": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/CompanyHoliday"
               }
            }
         },
         "ListResponseCompanyHoliday": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/CompanyHoliday"
                  }
               }
            }
         },
         "PensionScheme": {
            "required": [
               "number",
               "startDate"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "number": {
                  "type": "string"
               },
               "startDate": {
                  "type": "string"
               },
               "endDate": {
                  "type": "string"
               }
            }
         },
         "ResponseWrapperPensionScheme": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/PensionScheme"
               }
            }
         },
         "ListResponsePensionScheme": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/PensionScheme"
                  }
               }
            }
         },
         "CompanyStandardTime": {
            "required": [
               "fromDate",
               "hoursPerDay"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "company": {
                  "$ref": "#/components/schemas/Company"
               },
               "fromDate": {
                  "type": "string"
               },
               "hoursPerDay": {
                  "type": "number"
               }
            }
         },
         "ResponseWrapperCompanyStandardTime": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/CompanyStandardTime"
               }
            }
         },
         "ListResponseCompanyStandardTime": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/CompanyStandardTime"
                  }
               }
            }
         },
         "ResponseWrapperSalaryTransaction": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/SalaryTransaction"
               }
            }
         },
         "ResponseWrapperSupplier": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/Supplier"
               }
            }
         },
         "ListResponseSupplier": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Supplier"
                  }
               }
            }
         },
         "VoucherApprovalListElement": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "voucher": {
                  "$ref": "#/components/schemas/Voucher"
               },
               "employee": {
                  "$ref": "#/components/schemas/Employee"
               },
               "status": {
                  "minimum": 0,
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "organisationLevel": {
                  "minimum": 0,
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "department": {
                  "$ref": "#/components/schemas/Department"
               },
               "project": {
                  "$ref": "#/components/schemas/Project"
               },
               "comment": {
                  "type": "string"
               },
               "commentFromOriginator": {
                  "type": "string"
               },
               "actionDate": {
                  "type": "string",
                  "readOnly": true
               }
            }
         },
         "SupplierInvoice": {
            "required": [
               "invoiceDate",
               "invoiceDueDate"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "invoiceNumber": {
                  "maxLength": 100,
                  "type": "string",
                  "description": "Invoice number"
               },
               "invoiceDate": {
                  "type": "string"
               },
               "supplier": {
                  "$ref": "#/components/schemas/Supplier"
               },
               "invoiceDueDate": {
                  "type": "string"
               },
               "kidOrReceiverReference": {
                  "type": "string",
                  "description": "KID or message"
               },
               "voucher": {
                  "$ref": "#/components/schemas/Voucher"
               },
               "amount": {
                  "type": "number",
                  "description": "In the company’s currency, typically NOK. Is 0 if value is missing.",
                  "readOnly": true
               },
               "amountCurrency": {
                  "type": "number",
                  "description": "In the specified currency."
               },
               "amountExcludingVat": {
                  "type": "number",
                  "description": "Amount excluding VAT (NOK). Is 0 if value is missing.",
                  "readOnly": true
               },
               "amountExcludingVatCurrency": {
                  "type": "number",
                  "description": "Amount excluding VAT in the specified currency. Is 0 if value is missing.",
                  "readOnly": true
               },
               "currency": {
                  "$ref": "#/components/schemas/Currency"
               },
               "isCreditNote": {
                  "type": "boolean",
                  "readOnly": true
               },
               "orderLines": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/OrderLine"
                  }
               },
               "payments": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Posting"
                  }
               },
               "originalInvoiceDocumentId": {
                  "minimum": 0,
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "approvalListElements": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/VoucherApprovalListElement"
                  }
               },
               "outstandingAmount": {
                  "type": "number",
                  "description": "The amount outstanding on the invoice, in the invoice currency.",
                  "readOnly": true
               }
            }
         },
         "ResponseWrapperSupplierInvoice": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/SupplierInvoice"
               }
            }
         },
         "ListResponseSupplierInvoice": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/SupplierInvoice"
                  }
               }
            }
         },
         "OrderLinePostingDTO": {
            "required": [
               "posting"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "posting": {
                  "$ref": "#/components/schemas/Posting"
               },
               "orderLine": {
                  "$ref": "#/components/schemas/OrderLine"
               }
            }
         },
         "ResponseWrapperVoucherApprovalListElement": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/VoucherApprovalListElement"
               }
            }
         },
         "TimesheetAllocated": {
            "required": [
               "date",
               "hours"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "employee": {
                  "$ref": "#/components/schemas/Employee"
               },
               "project": {
                  "$ref": "#/components/schemas/Project"
               },
               "activity": {
                  "$ref": "#/components/schemas/Activity"
               },
               "date": {
                  "type": "string"
               },
               "hours": {
                  "type": "number"
               },
               "isApproved": {
                  "type": "boolean"
               },
               "managerComment": {
                  "maxLength": 255,
                  "type": "string"
               }
            }
         },
         "ResponseWrapperTimesheetAllocated": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/TimesheetAllocated"
               }
            }
         },
         "ListResponseTimesheetAllocated": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/TimesheetAllocated"
                  }
               }
            }
         },
         "CompanyHolidays": {
            "required": [
               "date",
               "percentage"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "date": {
                  "type": "string"
               },
               "percentage": {
                  "type": "number"
               }
            }
         },
         "ResponseWrapperCompanyHolidays": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/CompanyHolidays"
               }
            }
         },
         "ListResponseCompanyHolidays": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/CompanyHolidays"
                  }
               }
            }
         },
         "TimesheetEntry": {
            "required": [
               "activity",
               "date",
               "employee",
               "hours"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "project": {
                  "$ref": "#/components/schemas/Project"
               },
               "activity": {
                  "$ref": "#/components/schemas/Activity"
               },
               "date": {
                  "type": "string"
               },
               "hours": {
                  "type": "number"
               },
               "chargeableHours": {
                  "type": "number",
                  "readOnly": true
               },
               "employee": {
                  "$ref": "#/components/schemas/Employee"
               },
               "timeClocks": {
                  "type": "array",
                  "description": "Link to stop watches on this hour.",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/TimeClock"
                  }
               },
               "comment": {
                  "type": "string"
               },
               "locked": {
                  "type": "boolean",
                  "description": "Indicates if the hour can be changed.",
                  "readOnly": true
               },
               "chargeable": {
                  "type": "boolean",
                  "readOnly": true
               },
               "invoice": {
                  "$ref": "#/components/schemas/Invoice"
               },
               "hourlyRate": {
                  "type": "number",
                  "readOnly": true
               },
               "hourlyCost": {
                  "type": "number",
                  "readOnly": true
               },
               "hourlyCostPercentage": {
                  "type": "number",
                  "readOnly": true
               }
            }
         },
         "TimeClock": {
            "required": [
               "date",
               "employee",
               "timeStart",
               "timeStop",
               "timesheetEntry"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "employee": {
                  "$ref": "#/components/schemas/Employee"
               },
               "project": {
                  "$ref": "#/components/schemas/Project"
               },
               "activity": {
                  "$ref": "#/components/schemas/Activity"
               },
               "timesheetEntry": {
                  "$ref": "#/components/schemas/TimesheetEntry"
               },
               "date": {
                  "type": "string"
               },
               "timeStart": {
                  "type": "string"
               },
               "timeStop": {
                  "type": "string"
               },
               "hoursStart": {
                  "minimum": 0,
                  "type": "number"
               },
               "lunchBreakDuration": {
                  "minimum": 0,
                  "type": "number"
               }
            }
         },
         "ResponseWrapperTimesheetEntry": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/TimesheetEntry"
               }
            }
         },
         "TimesheetEntrySearchResponse": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/TimesheetEntry"
                  }
               },
               "sumAllHours": {
                  "type": "number",
                  "readOnly": true
               }
            }
         },
         "ListResponseTimesheetEntry": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/TimesheetEntry"
                  }
               }
            }
         },
         "ResponseWrapperBigDecimal": {
            "type": "object",
            "properties": {
               "value": {
                  "type": "number"
               }
            }
         },
         "HourSummary": {
            "type": "object",
            "properties": {
               "sumHours": {
                  "type": "number",
                  "readOnly": true
               },
               "hoursWithPay": {
                  "type": "number",
                  "readOnly": true
               },
               "hourlyWageHoursWithPay": {
                  "type": "number",
                  "readOnly": true
               },
               "standardTime": {
                  "type": "number",
                  "readOnly": true
               },
               "nonChargeableHours": {
                  "type": "number",
                  "readOnly": true
               },
               "chargeableHours": {
                  "type": "number",
                  "readOnly": true
               },
               "nonChargeableHoursWithPay": {
                  "type": "number",
                  "readOnly": true
               },
               "budgetChargeableHours": {
                  "type": "number",
                  "readOnly": true
               }
            }
         },
         "FlexSummary": {
            "type": "object",
            "properties": {
               "incomingHourBalance": {
                  "type": "number",
                  "readOnly": true
               },
               "outgoingHourBalance": {
                  "type": "number",
                  "readOnly": true
               },
               "change": {
                  "type": "number",
                  "readOnly": true
               }
            }
         },
         "VacationSummary": {
            "type": "object",
            "properties": {
               "incomingVacationBalance": {
                  "type": "number",
                  "readOnly": true
               },
               "outgoingVacationBalance": {
                  "type": "number",
                  "readOnly": true
               },
               "vacationTakenInPeriod": {
                  "type": "number",
                  "readOnly": true
               },
               "vacationTakenThisYear": {
                  "type": "number",
                  "readOnly": true
               }
            }
         },
         "MonthlyStatus": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "employee": {
                  "$ref": "#/components/schemas/Employee"
               },
               "timesheetEntries": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/TimesheetEntry"
                  }
               },
               "approvedDate": {
                  "type": "string",
                  "readOnly": true
               },
               "completed": {
                  "type": "boolean",
                  "readOnly": true
               },
               "approvedBy": {
                  "$ref": "#/components/schemas/Employee"
               },
               "approved": {
                  "type": "boolean",
                  "readOnly": true
               },
               "approvedUntilDate": {
                  "type": "string",
                  "readOnly": true
               },
               "monthYear": {
                  "type": "string",
                  "readOnly": true
               },
               "hoursPayout": {
                  "type": "number"
               },
               "vacationPayout": {
                  "type": "number"
               },
               "hourSummary": {
                  "$ref": "#/components/schemas/HourSummary"
               },
               "flexSummary": {
                  "$ref": "#/components/schemas/FlexSummary"
               },
               "vacationSummary": {
                  "$ref": "#/components/schemas/VacationSummary"
               }
            }
         },
         "ResponseWrapperMonthlyStatus": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/MonthlyStatus"
               }
            }
         },
         "ListResponseMonthlyStatus": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/MonthlyStatus"
                  }
               }
            }
         },
         "TimesheetProjectSalaryTypeSpecification": {
            "required": [
               "count",
               "date",
               "employee",
               "salaryType"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "employee": {
                  "$ref": "#/components/schemas/Employee"
               },
               "project": {
                  "$ref": "#/components/schemas/Project"
               },
               "salaryType": {
                  "$ref": "#/components/schemas/SalaryType"
               },
               "description": {
                  "type": "string"
               },
               "date": {
                  "type": "string"
               },
               "count": {
                  "type": "number"
               },
               "wagePayment": {
                  "$ref": "#/components/schemas/Payslip"
               }
            }
         },
         "ResponseWrapperTimesheetProjectSalaryTypeSpecification": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/TimesheetProjectSalaryTypeSpecification"
               }
            }
         },
         "ListResponseTimesheetProjectSalaryTypeSpecification": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/TimesheetProjectSalaryTypeSpecification"
                  }
               }
            }
         },
         "TimesheetSalaryTypeSpecification": {
            "required": [
               "count",
               "date",
               "employee",
               "salaryType"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "employee": {
                  "$ref": "#/components/schemas/Employee"
               },
               "salaryType": {
                  "$ref": "#/components/schemas/SalaryType"
               },
               "description": {
                  "type": "string"
               },
               "date": {
                  "type": "string"
               },
               "count": {
                  "type": "number"
               }
            }
         },
         "ResponseWrapperTimesheetSalaryTypeSpecification": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/TimesheetSalaryTypeSpecification"
               }
            }
         },
         "ListResponseTimesheetSalaryTypeSpecification": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/TimesheetSalaryTypeSpecification"
                  }
               }
            }
         },
         "TimesheetSettings": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "timeClock": {
                  "type": "boolean"
               },
               "timesheetCompleted": {
                  "type": "boolean"
               },
               "flexBalance": {
                  "type": "boolean"
               },
               "vacationBalance": {
                  "type": "boolean"
               },
               "defaultProjectActivity": {
                  "$ref": "#/components/schemas/Activity"
               }
            }
         },
         "ResponseWrapperTimesheetSettings": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/TimesheetSettings"
               }
            }
         },
         "ResponseWrapperTimeClock": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/TimeClock"
               }
            }
         },
         "ListResponseTimeClock": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/TimeClock"
                  }
               }
            }
         },
         "Week": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "employee": {
                  "$ref": "#/components/schemas/Employee"
               },
               "timesheetEntries": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/TimesheetEntry"
                  }
               },
               "year": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "week": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "completed": {
                  "type": "boolean",
                  "readOnly": true
               },
               "approved": {
                  "type": "boolean",
                  "readOnly": true
               },
               "approvedBy": {
                  "$ref": "#/components/schemas/Employee"
               },
               "approvedDate": {
                  "type": "string",
                  "readOnly": true
               }
            }
         },
         "ListResponseWeek": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Week"
                  }
               }
            }
         },
         "ResponseWrapperWeek": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/Week"
               }
            }
         },
         "ResponseWrapperAccommodationAllowance": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/AccommodationAllowance"
               }
            }
         },
         "ListResponseAccommodationAllowance": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/AccommodationAllowance"
                  }
               }
            }
         },
         "ResponseWrapperCost": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/Cost"
               }
            }
         },
         "ListResponseCost": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Cost"
                  }
               }
            }
         },
         "ResponseWrapperTravelExpenseParticipant": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/TravelExpenseParticipant"
               }
            }
         },
         "ListResponseTravelExpenseParticipant": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/TravelExpenseParticipant"
                  }
               }
            }
         },
         "ResponseWrapperDrivingStop": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/DrivingStop"
               }
            }
         },
         "ResponseWrapperMileageAllowance": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/MileageAllowance"
               }
            }
         },
         "ListResponseMileageAllowance": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/MileageAllowance"
                  }
               }
            }
         },
         "ResponseWrapperPassenger": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/Passenger"
               }
            }
         },
         "ListResponsePassenger": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Passenger"
                  }
               }
            }
         },
         "ResponseWrapperPerDiemCompensation": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/PerDiemCompensation"
               }
            }
         },
         "ListResponsePerDiemCompensation": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/PerDiemCompensation"
                  }
               }
            }
         },
         "ResponseWrapperTravelExpense": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/TravelExpense"
               }
            }
         },
         "ListResponseTravelExpense": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/TravelExpense"
                  }
               }
            }
         },
         "ResponseWrapperTravelExpenseRate": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/TravelExpenseRate"
               }
            }
         },
         "ListResponseTravelExpenseRate": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/TravelExpenseRate"
                  }
               }
            }
         },
         "ResponseWrapperTravelExpenseRateCategory": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/TravelExpenseRateCategory"
               }
            }
         },
         "ListResponseTravelExpenseRateCategory": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/TravelExpenseRateCategory"
                  }
               }
            }
         },
         "TravelExpenseRateCategoryGroup": {
            "required": [
               "fromDate",
               "toDate"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "name": {
                  "type": "string",
                  "readOnly": true
               },
               "isForeignTravel": {
                  "type": "boolean"
               },
               "fromDate": {
                  "type": "string"
               },
               "toDate": {
                  "type": "string"
               }
            }
         },
         "ResponseWrapperTravelExpenseRateCategoryGroup": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/TravelExpenseRateCategoryGroup"
               }
            }
         },
         "ListResponseTravelExpenseRateCategoryGroup": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/TravelExpenseRateCategoryGroup"
                  }
               }
            }
         },
         "ResponseWrapperTravelCostCategory": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/TravelCostCategory"
               }
            }
         },
         "ListResponseTravelCostCategory": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/TravelCostCategory"
                  }
               }
            }
         },
         "ResponseWrapperTravelPaymentType": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/TravelPaymentType"
               }
            }
         },
         "ListResponseTravelPaymentType": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/TravelPaymentType"
                  }
               }
            }
         },
         "TravelExpenseSettings": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "useRates": {
                  "type": "boolean"
               },
               "approvalRequired": {
                  "type": "boolean"
               },
               "taxFreePerDiemRates": {
                  "type": "boolean"
               },
               "taxFreeMileageRates": {
                  "type": "boolean"
               },
               "perDiemNotCompensated": {
                  "type": "boolean"
               },
               "accommodationNotCompensated": {
                  "type": "boolean"
               },
               "mileageNotCompensated": {
                  "type": "boolean"
               }
            }
         },
         "ResponseWrapperTravelExpenseSettings": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/TravelExpenseSettings"
               }
            }
         },
         "TravelExpenseZone": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "countryCode": {
                  "type": "string",
                  "description": "The ISO 3166-1 Alpha2 code of the country (2 letters). https://en.wikipedia.org/wiki/ISO_3166-1",
                  "readOnly": true
               },
               "zoneName": {
                  "type": "string",
                  "readOnly": true
               },
               "isDisabled": {
                  "type": "boolean",
                  "readOnly": true
               },
               "governmentName": {
                  "type": "string",
                  "description": "The Government name ",
                  "readOnly": true
               },
               "continent": {
                  "type": "string",
                  "readOnly": true
               }
            }
         },
         "ResponseWrapperTravelExpenseZone": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/TravelExpenseZone"
               }
            }
         },
         "ListResponseTravelExpenseZone": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/TravelExpenseZone"
                  }
               }
            }
         },
         "VatReturnsComment": {
            "type": "object",
            "properties": {
               "title": {
                  "type": "string",
                  "description": "Title of the comment",
                  "readOnly": true
               },
               "technicalName": {
                  "type": "string",
                  "description": "Technical name of the comment",
                  "readOnly": true
               },
               "description": {
                  "type": "string",
                  "description": "Detailed description of the comment",
                  "readOnly": true
               },
               "vatSpecificationType": {
                  "type": "string",
                  "description": "Detailed description of the comment",
                  "readOnly": true,
                  "enum": [
                     "DEFAULT",
                     "LOSS_OF_CLAIM",
                     "WITHDRAWAL",
                     "ADJUSTMENT",
                     "REVERSAL",
                     "COMPENSATION"
                  ]
               },
               "expectedSign": {
                  "type": "string",
                  "description": "The sign expected on the structured comment",
                  "readOnly": true,
                  "enum": [
                     "ZERO",
                     "POSITIVE",
                     "NEGATIVE"
                  ]
               },
               "deliveredSign": {
                  "type": "string",
                  "description": "The sign delivered on the structured comment",
                  "readOnly": true,
                  "enum": [
                     "ZERO",
                     "POSITIVE",
                     "NEGATIVE"
                  ]
               }
            }
         },
         "VatReturnsVatCodeComment": {
            "type": "object",
            "properties": {
               "vatCode": {
                  "type": "string",
                  "description": "The vatCode"
               },
               "comments": {
                  "type": "array",
                  "description": "List of comments for the given vatCode",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/VatReturnsComment"
                  }
               }
            }
         },
         "ListResponseVatReturnsVatCodeComment": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/VatReturnsVatCodeComment"
                  }
               }
            }
         },
         "ListResponseVatReturnsComment": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/VatReturnsComment"
                  }
               }
            }
         },
         "VoucherMessage": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "voucherId": {
                  "type": "integer",
                  "description": "The voucher to connect the message to, only set on create",
                  "format": "int32"
               },
               "content": {
                  "type": "string",
                  "description": "The message"
               },
               "sender": {
                  "$ref": "#/components/schemas/Employee"
               },
               "sendTime": {
                  "type": "string",
                  "description": "The timestamp of the message"
               }
            }
         },
         "ListResponseVoucherMessage": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/VoucherMessage"
                  }
               }
            }
         },
         "ResponseWrapperVoucherMessage": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/VoucherMessage"
               }
            }
         },
         "VoucherStatus": {
            "required": [
               "voucher"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "version": {
                  "type": "integer",
                  "format": "int32"
               },
               "changes": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/Change"
                  }
               },
               "url": {
                  "type": "string",
                  "readOnly": true
               },
               "voucher": {
                  "$ref": "#/components/schemas/Voucher"
               },
               "type": {
                  "type": "string",
                  "description": "The type of process",
                  "readOnly": true,
                  "enum": [
                     "TRIPLETEX",
                     "SUPPLIERINVOICE_EXTERNAL",
                     "DEBT_COLLECTION"
                  ]
               },
               "status": {
                  "type": "string",
                  "description": "Process status",
                  "enum": [
                     "WAITING",
                     "DONE",
                     "SKIPPED",
                     "ERROR",
                     "NONE",
                     "PROCESSING",
                     "RECLAIMED"
                  ]
               },
               "timestamp": {
                  "type": "string",
                  "description": "Time of last update",
                  "readOnly": true
               },
               "message": {
                  "type": "string",
                  "description": "1 or 0 predefined status message",
                  "enum": [
                     "NONE",
                     "ONGOING",
                     "NEEDS_APPROVAL",
                     "WITHDRAWN",
                     "SETTLED"
                  ]
               },
               "externalObjectUrl": {
                  "maxLength": 255,
                  "type": "string",
                  "description": "Link to external object"
               },
               "comment": {
                  "type": "string"
               },
               "referenceNumber": {
                  "maxLength": 255,
                  "type": "string",
                  "description": "reference number to external object"
               }
            }
         },
         "ResponseWrapperVoucherStatus": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/VoucherStatus"
               }
            }
         },
         "ListResponseVoucherStatus": {
            "type": "object",
            "properties": {
               "fullResultSize": {
                  "type": "integer",
                  "description": "Indicates whether there are more values available. Note: The value is not exact",
                  "format": "int32",
                  "readOnly": true
               },
               "from": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "count": {
                  "type": "integer",
                  "format": "int32",
                  "readOnly": true
               },
               "versionDigest": {
                  "type": "string",
                  "description": "Used to know if the paginated list has changed.",
                  "readOnly": true
               },
               "values": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                     "$ref": "#/components/schemas/VoucherStatus"
                  }
               }
            }
         },
         "Favorite": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "integer",
                  "format": "int32"
               },
               "rank": {
                  "type": "integer",
                  "format": "int32"
               },
               "name": {
                  "type": "string"
               },
               "pageUrl": {
                  "type": "string"
               }
            }
         },
         "FavoriteMenu": {
            "type": "object",
            "properties": {
               "shouldShow": {
                  "type": "boolean"
               },
               "favoriteList": {
                  "type": "array",
                  "items": {
                     "$ref": "#/components/schemas/Favorite"
                  }
               }
            }
         },
         "ResponseWrapperFavoriteMenu": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/FavoriteMenu"
               }
            }
         },
         "SegmentationModules": {
            "type": "object",
            "properties": {
               "moduleaccountinginternal": {
                  "type": "boolean"
               },
               "moduleaccountingexternal": {
                  "type": "boolean"
               },
               "moduledepartment": {
                  "type": "boolean"
               },
               "moduleprojectprognosis": {
                  "type": "boolean"
               },
               "moduleresourceallocation": {
                  "type": "boolean"
               },
               "moduleprojecteconomy": {
                  "type": "boolean"
               },
               "moduleinvoice": {
                  "type": "boolean"
               },
               "modulebudget": {
                  "type": "boolean"
               },
               "modulereferencefee": {
                  "type": "boolean"
               },
               "moduleHourCost": {
                  "type": "boolean"
               },
               "moduleemployee": {
                  "type": "boolean"
               },
               "moduleproject": {
                  "type": "boolean"
               },
               "moduleprojectcategory": {
                  "type": "boolean"
               },
               "moduleProjectBudget": {
                  "type": "boolean"
               },
               "moduletask": {
                  "type": "boolean"
               },
               "moduleTravelExpense": {
                  "type": "boolean"
               },
               "modulecustomer": {
                  "type": "boolean"
               },
               "modulenote": {
                  "type": "boolean"
               },
               "modulesubscription": {
                  "type": "boolean"
               },
               "moduleproduct": {
                  "type": "boolean"
               },
               "moduleVoucherExport": {
                  "type": "boolean"
               },
               "moduleaccountingreports": {
                  "type": "boolean"
               },
               "moduleCustomerCategories": {
                  "type": "boolean"
               },
               "moduleCustomerCategory1": {
                  "type": "boolean"
               },
               "moduleCustomerCategory2": {
                  "type": "boolean"
               },
               "moduleCustomerCategory3": {
                  "type": "boolean"
               },
               "moduleprojectsubcontract": {
                  "type": "boolean"
               },
               "approvehourlists": {
                  "type": "boolean"
               },
               "approveinvoices": {
                  "type": "boolean"
               },
               "approvetravelreports": {
                  "type": "boolean"
               },
               "completeweeklyhourlists": {
                  "type": "boolean"
               },
               "completemonthlyhourlists": {
                  "type": "boolean"
               },
               "approvemonthlyhourlists": {
                  "type": "boolean"
               },
               "invoiceapprovedhoursmandatory": {
                  "type": "boolean"
               },
               "modulePayrollAccounting": {
                  "type": "boolean"
               },
               "modulePayrollAccountingNO": {
                  "type": "boolean"
               },
               "modulehourlist": {
                  "type": "boolean"
               },
               "moduleTimeBalance": {
                  "type": "boolean"
               },
               "moduleVacationBalance": {
                  "type": "boolean"
               },
               "moduleWorkingHours": {
                  "type": "boolean"
               },
               "moduleCurrency": {
                  "type": "boolean"
               },
               "moduleContact": {
                  "type": "boolean"
               },
               "moduleAutoProjectNumber": {
                  "type": "boolean"
               },
               "moduleWageExport": {
                  "type": "boolean"
               },
               "approveWeeklyHourlists": {
                  "type": "boolean"
               },
               "moduleProvisionSalary": {
                  "type": "boolean"
               },
               "moduleOrderNumber": {
                  "type": "boolean"
               },
               "moduleOrderDiscount": {
                  "type": "boolean"
               },
               "moduleOrderMarkup": {
                  "type": "boolean"
               },
               "moduleOrderLineCost": {
                  "type": "boolean"
               },
               "moduleResourceGroups": {
                  "type": "boolean"
               },
               "moduleVendor": {
                  "type": "boolean"
               },
               "moduleAutoCustomerNumber": {
                  "type": "boolean"
               },
               "moduleAutoVendorNumber": {
                  "type": "boolean"
               },
               "moduleHistorical": {
                  "type": "boolean"
               },
               "showTravelReportLetterhead": {
                  "type": "boolean"
               },
               "moduleOcr": {
                  "type": "boolean"
               },
               "moduleRemit": {
                  "type": "boolean"
               },
               "moduleRemitNets": {
                  "type": "boolean"
               },
               "moduleRemitZtl": {
                  "type": "boolean"
               },
               "moduleRemitAutoPay": {
                  "type": "boolean"
               },
               "moduleTravelExpenseRates": {
                  "type": "boolean"
               },
               "moduleVoucherScanning": {
                  "type": "boolean"
               },
               "moduleInvoiceScanning": {
                  "type": "boolean"
               },
               "moduleHolydayPlan": {
                  "type": "boolean"
               },
               "moduleEmployeeCategory": {
                  "type": "boolean"
               },
               "multipleCustomerCategories": {
                  "type": "boolean"
               },
               "moduleProductInvoice": {
                  "type": "boolean"
               },
               "autoInvoicing": {
                  "type": "boolean"
               },
               "moduleFactoring": {
                  "type": "boolean"
               },
               "moduleEmployeeAccounting": {
                  "type": "boolean"
               },
               "moduleDepartmentAccounting": {
                  "type": "boolean"
               },
               "moduleProjectAccounting": {
                  "type": "boolean"
               },
               "moduleWageProjectAccounting": {
                  "type": "boolean"
               },
               "moduleProductAccounting": {
                  "type": "boolean"
               },
               "moduleElectro": {
                  "type": "boolean"
               },
               "moduleNrf": {
                  "type": "boolean"
               },
               "moduleResultBudget": {
                  "type": "boolean"
               },
               "moduleVoucherTypes": {
                  "type": "boolean"
               },
               "moduleWarehouse": {
                  "type": "boolean"
               },
               "moduleNetsEboks": {
                  "type": "boolean"
               },
               "moduleNetsPrintSalary": {
                  "type": "boolean"
               },
               "moduleNetsPrintInvoice": {
                  "type": "boolean"
               },
               "hourlyRateProjectsWriteUpDown": {
                  "type": "boolean"
               },
               "showRecentlyClosedProjectsOnSupplierInvoice": {
                  "type": "boolean"
               },
               "moduleEmail": {
                  "type": "boolean"
               },
               "sendPayslipsByEmail": {
                  "type": "boolean"
               },
               "moduleApproveVoucher": {
                  "type": "boolean"
               },
               "moduleApproveProjectVoucher": {
                  "type": "boolean"
               },
               "moduleApproveDepartmentVoucher": {
                  "type": "boolean"
               },
               "moduleArchive": {
                  "type": "boolean"
               },
               "moduleOrderOut": {
                  "type": "boolean"
               },
               "moduleMesan": {
                  "type": "boolean"
               },
               "moduleAccountantConnectClient": {
                  "type": "boolean"
               },
               "moduleDivisions": {
                  "type": "boolean"
               },
               "moduleBoligmappa": {
                  "type": "boolean"
               },
               "moduleAdditionProjectMarkup": {
                  "type": "boolean"
               },
               "tripletexSupportLoginAccessCompanyLevel": {
                  "type": "boolean"
               },
               "moduleCRM": {
                  "type": "boolean"
               },
               "modulePensionreport": {
                  "type": "boolean"
               },
               "moduleControlSchemaRequiredInvoicing": {
                  "type": "boolean"
               },
               "moduleControlSchemaRequiredHourTracking": {
                  "type": "boolean"
               },
               "moduleInvoiceOptionVipps": {
                  "type": "boolean"
               },
               "moduleInvoiceOptionEfaktura": {
                  "type": "boolean"
               },
               "moduleInvoiceOptionPaper": {
                  "type": "boolean"
               },
               "moduleInvoiceOptionAvtaleGiro": {
                  "type": "boolean"
               },
               "moduleInvoiceOptionEhfIncoming": {
                  "type": "boolean"
               },
               "moduleInvoiceOptionEhfOutbound": {
                  "type": "boolean"
               },
               "moduleAPI20": {
                  "type": "boolean"
               },
               "moduleAgro": {
                  "type": "boolean"
               },
               "moduleMamut": {
                  "type": "boolean"
               },
               "moduleFactoringAprila": {
                  "type": "boolean"
               },
               "moduleCashCreditAprila": {
                  "type": "boolean"
               },
               "moduleInvoiceOptionAutoinvoiceEhf": {
                  "type": "boolean"
               },
               "moduleSmartScan": {
                  "type": "boolean"
               },
               "moduleAutoBankReconciliation": {
                  "type": "boolean"
               },
               "moduleOffer": {
                  "type": "boolean"
               },
               "moduleVoucherAutomation": {
                  "type": "boolean"
               },
               "moduleAmortization": {
                  "type": "boolean"
               },
               "moduleEncryptedPaySlip": {
                  "type": "boolean"
               },
               "hourCostFactorProject": {
                  "type": "boolean"
               },
               "yearEndReport": {
                  "type": "boolean"
               },
               "moduleLogistics": {
                  "type": "boolean"
               },
               "moduleIndustry": {
                  "type": "boolean"
               }
            }
         },
         "SegmentationRoles": {
            "type": "object",
            "properties": {
               "roleAdministrator": {
                  "type": "boolean"
               },
               "roleAccountAdministrator": {
                  "type": "boolean"
               },
               "roleSystemAdministrator": {
                  "type": "boolean"
               },
               "isAuthInvoicing": {
                  "type": "boolean"
               },
               "isAuthCompanyAdmin": {
                  "type": "boolean"
               },
               "isAuthReadOnly": {
                  "type": "boolean"
               },
               "isAuthCreateOrder": {
                  "type": "boolean"
               },
               "isAuthAccountingSettings": {
                  "type": "boolean"
               },
               "isAuthCompanyWageAdmin": {
                  "type": "boolean"
               },
               "isAuthTravelsAndExpensesAdminSettings": {
                  "type": "boolean"
               },
               "isAuthInvoiceAdminSettings": {
                  "type": "boolean"
               },
               "isAuthInboxVoucher": {
                  "type": "boolean"
               },
               "isAutWageAdminSetting": {
                  "type": "boolean"
               },
               "isAuthWageSettings": {
                  "type": "boolean"
               }
            }
         },
         "SegmentationData": {
            "type": "object",
            "properties": {
               "contextId": {
                  "type": "integer",
                  "format": "int32"
               },
               "orgNumber": {
                  "type": "string"
               },
               "isTrialAccount": {
                  "type": "boolean"
               },
               "isTestOrFreeCompany": {
                  "type": "boolean"
               },
               "employeeId": {
                  "type": "integer",
                  "format": "int32"
               },
               "isAccountant": {
                  "type": "boolean"
               },
               "isReseller": {
                  "type": "boolean"
               },
               "employeeNumber": {
                  "type": "integer",
                  "format": "int32"
               },
               "packageName": {
                  "type": "string"
               },
               "industry": {
                  "type": "string"
               },
               "outgoingInvoices": {
                  "type": "integer",
                  "format": "int32"
               },
               "incomingInvoices": {
                  "type": "integer",
                  "format": "int32"
               },
               "companyStartDateYear": {
                  "type": "string"
               },
               "companyType": {
                  "type": "string"
               },
               "companyName": {
                  "type": "string"
               },
               "mainAccountBank": {
                  "type": "string"
               },
               "modules": {
                  "$ref": "#/components/schemas/SegmentationModules"
               },
               "roles": {
                  "$ref": "#/components/schemas/SegmentationRoles"
               },
               "pilotFeatures": {
                  "type": "object",
                  "additionalProperties": {
                     "type": "boolean"
                  }
               },
               "hackedOrSupportAccess": {
                  "type": "boolean"
               },
               "tripletexCustomerCategoryId3": {
                  "type": "integer",
                  "format": "int32"
               },
               "tripletexCustomerCategoryId2": {
                  "type": "integer",
                  "format": "int32"
               }
            }
         },
         "ResponseWrapperSegmentationData": {
            "type": "object",
            "properties": {
               "value": {
                  "$ref": "#/components/schemas/SegmentationData"
               }
            }
         }
      }
   }
}